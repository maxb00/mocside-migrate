[
  {
    "id": 16240,
    "title": "Lab04_Problem18: Number Counts",
    "prompt_md": "## Description\n\nWrite a program that generates 100000 random integers between 0 and 9 and displays the count for each number. (Hint: Use an array of\n\nten integers, say counts, to store the counts for the number of 0s, 1s, ..., 9s.)\n\n\\*\\*Note that the problem has already been started for you. Do _not_ change the provided code. If you do, your solution will not work.\n\nIncluded in the code that is already complete is a prompt for the user to enter a seed value for the random number generator. All numbers produced from the random number generator are \"sprouted\" from this seed. Thus, your answers should match those of the provided output even though the numbers are \"randomly\" generated.\n\n## Sample Run of the Program\n\n```plaintext\nEnter the seed value:651\n\nHere are the results:\n\nNumber of 0's: 9698\nNumber of 1's: 9962\nNumber of 2's: 10118\nNumber of 3's: 10121\nNumber of 4's: 9873\nNumber of 5's: 10100\nNumber of 6's: 10211\nNumber of 7's: 10068\nNumber of 8's: 10036\nNumber of 9's: 9813\n```\n\n## Another Sample Run of the Program\n\n```plaintext\nEnter the seed value: 7\n\nHere are the results:\n\nNumber of 0's: 10148\nNumber of 1's: 9863\nNumber of 2's: 10052\nNumber of 3's: 10091\nNumber of 4's: 9956\nNumber of 5's: 9985\nNumber of 6's: 9970\nNumber of 7's: 10035\nNumber of 8's: 9973\nNumber of 9's: 9927\n```",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"import java.util.*;\\n\\nclass Main {\\n  public static void main(String[] args) {\\n    Scanner in = new Scanner(System.in);\\n\\tSystem.out.print(\\\"Enter the seed value: \\\"); // Here you ENTER the seed value, such as 651 from the sample\\n\\tRandom rng = new Random(in.nextInt());\\n\\t\\n\\t// Do ***NOT*** change the code above.\\n\\t\\n\\t// YOUR CODE SHOULD GO BELOW.\\n\\t\\n\\t// Note: to get a random number between 0 and 9, you can type the following: rng.nextInt(10)\\n\\t// You can test that with the line below...Just make sure to DELETE this line below before submitting:\\n\\tSystem.out.println(rng.nextInt(10));\\n\\t\\n  }\\n}\",\"defaultFilePath\":\"Main.java\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"stdout\",\"title\":\"TC3\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"Enter the seed value: \\n\\nHere are the results:\\n\\nNumber of 0's: 9943\\nNumber of 1's: 9992\\nNumber of 2's: 9918\\nNumber of 3's: 9977\\nNumber of 4's: 10024\\nNumber of 5's: 10067\\nNumber of 6's: 10137\\nNumber of 7's: 9933\\nNumber of 8's: 9957\\nNumber of 9's: 10052\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"7777777\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"TC2\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"Enter the seed value: \\n\\nHere are the results:\\n\\nNumber of 0's: 10019\\nNumber of 1's: 10031\\nNumber of 2's: 9884\\nNumber of 3's: 9971\\nNumber of 4's: 9995\\nNumber of 5's: 10042\\nNumber of 6's: 9967\\nNumber of 7's: 10088\\nNumber of 8's: 10038\\nNumber of 9's: 9965\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"2651\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"TC1\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"Enter the seed value: \\n\\nHere are the results:\\n\\nNumber of 0's: 9981\\nNumber of 1's: 10004\\nNumber of 2's: 10043\\nNumber of 3's: 9943\\nNumber of 4's: 10030\\nNumber of 5's: 9918\\nNumber of 6's: 10034\\nNumber of 7's: 10089\\nNumber of 8's: 9949\\nNumber of 9's: 10009\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"1\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"import java.util.*;\\n\\nclass Main {\\n  public static void main(String[] args) {\\n    Scanner in = new Scanner(System.in);\\n\\tSystem.out.print(\\\"Enter the seed value: \\\"); // Here you ENTER the seed value, such as 651 from the sample\\n\\tRandom rng = new Random(in.nextInt());\\n\\t\\n\\t// Do ***NOT*** change the code above.\\n\\t\\n\\t// YOUR CODE SHOULD GO BELOW.\\n\\t\\n\\t// Note: to get a random number between 0 and 9, you can type the following: rng.nextInt(10)\\n\\t// You can test that with the line below...Just make sure to DELETE this line below before submitting:\\n\\t\\n\\t// Make array of counts:\\n\\t// We use this array to store the \\\"counts\\\" of each integer from 0 to 9.\\n\\t// So, for example, if 14 6's were randomly generated, at the end of this\\n\\t// program, the number 14 should be found at index 6.\\n\\tint[] counts = new int[10];\\n\\t\\n\\t// Generate 100 numbers between 0 and 9 (inclusive)\\n\\tint randomNumber;\\n\\t\\n\\tfor (int i = 0; i \\u003c 100000; i++) {\\n\\t\\trandomNumber = rng.nextInt(10);\\n\\t\\tcounts[randomNumber]++;\\n\\t}\\n\\t\\n\\t// Output the result\\n\\tSystem.out.println(\\\"\\\\nHere are the results:\\\\n\\\");\\n\\t\\n\\tfor (int i = 0; i \\u003c 10; i++) {\\n\\t\\tSystem.out.printf(\\\"Number of %d's: %d\\\\n\\\", i, counts[i]);\\n\\t}\\n\\t\\n  }\\n}\",\"defaultFilePath\":\"Main.java\",\"extraFiles\":{}}},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"import java.util.*;\\n\\nclass Main {\\n  public static void main(String[] args) {\\n    Scanner in = new Scanner(System.in);\\n\\tSystem.out.print(\\\"Enter the seed value: \\\"); // Here you ENTER the seed value, such as 651 from the sample\\n\\tRandom rng = new Random(in.nextInt());\\n\\t\\n\\t// Do ***NOT*** change the code above.\\n\\t\\n\\t// YOUR CODE SHOULD GO BELOW.\\n\\t\\n\\t// Note: to get a random number between 0 and 9, you can type the following: rng.nextInt(10)\\n\\t// You can test that with the line below...Just make sure to DELETE this line below before submitting:\\n\\tSystem.out.println(rng.nextInt(10));\\n\\t\\n  }\\n}\"],\"t\":1614276087000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16241,
    "title": "Lab03_Problem24: Password Checker",
    "prompt_md": "\n# Description:\n\nWrite a method that checks whether a string is a valid password. Suppose the password rules are as follows:\n\n* A password must have at least eight characters.\n* A password consists of only letters and digits.\n* A password must contain at least two digits.\n\n\n\nIf a password is not valid, an appropriate message should be returned from the method (see Samples below). If the password is valid, a message should also be returned (again, see Samples below).\n\n\n\n**Note that the rules should be applied in the above order. Thus, if a password has only one digit, has illegal characters, and only has a total of 6 characters, the message returned from the method will be\n\n```\n`\"The entered password is less than 8 characters.\"`\n```\n\n\n\nSo although the other rules were also invalid, the returned message is based on the first rule to be marked invalid. In this case, the very first rule failed (password length). As such, the other two checks were not performed.\n\n\n\n\n\n**Method Name:**\n\n```\ncheckPassword\n```\n\n\n\n**Parameter(s):**\n\n```\nString password\n```\n\n\n\n**Return Type:**\n\n```\nString message, the message returned from your method\n```\n\n\n\n**Samples:**\n\n```\ncheckPassword(\"1234\")  ---> returns \"The entered password is less than 8 characters.\"\ncheckPassword(\"!@#$%^&*\")  ---> returns \"The entered password contains illegal characters.\"\ncheckPassword(\"asdfasdf\")  ---> returns \"The entered password contains less than two digits.\"\ncheckPassword(\"1234asdf\")  ---> returns \"The entered password is a valid password.\"\n```\n\n\n\n\n\n\n\n",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main {\\n  // Write your method(s) below:\\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  public static void main(String[] args) {\\n    System.out.println(checkPassword(\\\"1234\\\"));\\n    System.out.println(checkPassword(\\\"!@#$%^\\u0026*\\\"));\\n    System.out.println(checkPassword(\\\"asdfasdf\\\"));\\n    System.out.println(checkPassword(\\\"1234asdf\\\"));\\n  }\\n}\",\"defaultFilePath\":\"Main.java\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"unit_test\",\"title\":\"testName\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void testName() {\\n    Main m = new Main();\\n    assertEquals(m.checkPassword(\\\"1234\\\"), \\\"The entered password is less than 8 characters.\\\");\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"unit_test\",\"title\":\"tc2\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void testName() {\\n    Main m = new Main();\\n    assertEquals(m.checkPassword(\\\"!@#$%^\\u0026*\\\"), \\\"The entered password contains illegal characters.\\\");\\n\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"unit_test\",\"title\":\"tc3\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void testName() {\\n    Main m = new Main();\\n    assertEquals(m.checkPassword(\\\"123ad*#a\\\"), \\\"The entered password contains illegal characters.\\\");\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"unit_test\",\"title\":\"tc4\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void testName() {\\n    Main m = new Main();\\n    assertEquals(m.checkPassword(\\\"asdfasdf\\\"), \\\"The entered password contains less than two digits.\\\");\\n\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"unit_test\",\"title\":\"tc5\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void testName() {\\n    Main m = new Main();\\n    assertEquals(m.checkPassword(\\\"2sdfasdf\\\"), \\\"The entered password contains less than two digits.\\\");\\n\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"unit_test\",\"title\":\"tc6\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void testName() {\\n    Main m = new Main();\\n    assertEquals(m.checkPassword(\\\"1234asdf\\\"), \\\"The entered password is a valid password.\\\");\\n\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"unit_test\",\"title\":\"tc7\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void testName() {\\n    Main m = new Main();\\n    assertEquals(m.checkPassword(\\\"12testing\\\"), \\\"The entered password is a valid password.\\\");\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"unit_test\",\"title\":\"tc8\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void testName() {\\n    Main m = new Main();\\n    assertEquals(m.checkPassword(\\\"testing12\\\"), \\\"The entered password is a valid password.\\\");\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main {\\n  // Write your method(s) below:\\n  public static String checkPassword(String pw) {\\n\\t\\tint numLetters = 0, numDigits = 0;\\n\\t\\tString message;\\n\\n\\t\\t// IF the length is less than 8, it's not valid!\\n\\t\\tif (pw.length() \\u003c 8) {\\n\\t\\t\\tmessage = \\\"The entered password is less than 8 characters.\\\";\\n\\t\\t\\treturn message;\\n\\t\\t}\\n\\t\\t// ELSE, so okay, the length is fine...let's keep digging\\n\\t\\telse {\\n\\t\\t\\t// Count the number of digits and letters in the password\\n\\t\\t\\tfor (int i = 0; i \\u003c pw.length(); i++) {\\n\\t\\t\\t\\tif (Character.isDigit(pw.charAt(i))) {\\n\\t\\t\\t\\t\\tnumDigits++;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (Character.isLetter(pw.charAt(i))) {\\n\\t\\t\\t\\t\\tnumLetters++;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Remember, the pw can ONLY contain letters and digits\\n\\t\\t\\t// IF the letters and digits don't add up to the length, then we have a problem...\\n\\t\\t\\tif (numLetters + numDigits != pw.length()) {\\n\\t\\t\\t\\tmessage = \\\"The entered password contains illegal characters.\\\";\\n\\t\\t\\t\\treturn message;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// IF the digits are less than 2, we have a problem...\\n\\t\\t\\telse if (numDigits \\u003c 2) {\\n\\t\\t\\t\\tmessage = \\\"The entered password contains less than two digits.\\\";\\n\\t\\t\\t\\treturn message;\\n\\t\\t\\t}\\n\\t\\t\\telse {\\n\\t\\t\\t\\tmessage = \\\"The entered password is a valid password.\\\";\\n\\t\\t\\t\\treturn message;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n  \\n  public static void main(String[] args) {\\n    System.out.println(checkPassword(\\\"1234\\\"));\\n    System.out.println(checkPassword(\\\"!@#$%^\\u0026*\\\"));\\n    System.out.println(checkPassword(\\\"asdfasdf\\\"));\\n    System.out.println(checkPassword(\\\"1234asdf\\\"));\\n  }\\n}\",\"defaultFilePath\":\"Main.java\",\"extraFiles\":{}}},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"class Main {\\n  // Write your method(s) below:\\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  public static void main(String[] args) {\\n    System.out.println(checkPassword(\\\"1234\\\"));\\n    System.out.println(checkPassword(\\\"!@#$%^\\u0026*\\\"));\\n    System.out.println(checkPassword(\\\"asdfasdf\\\"));\\n    System.out.println(checkPassword(\\\"1234asdf\\\"));\\n  }\\n}\"],\"t\":1613420144000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16242,
    "title": "Lab03_Problem23: Phone Number",
    "prompt_md": "\n# Description:\n\nWrite a method, `convertNumber()`, to convert an alphabetical phone number to its digit-based equivalent. See samples below for clarity.\n\n\n\n**Method Name:**\n\n```\nconvertNumber\n```\n\n\n\n**Parameter(s):**\n\n```\nString number\n```\n\n\n\n**Return Type:**\n\n```\nString phoneNumber, the actual number (digit-based) of the String parameter\n```\n\n\n\n**Samples:**\n\n```\nconvertNumber(\"1800flowers\")  ---> returns 18003569377\nconvertNumber(\"1800VirusNo\")  ---> returns 18008478766\nconvertNumber(\"1800905Geek\")  ---> returns 18009054335\n```\n\n\n\n\n\nHint:\n\n1. start your method by making a new String, phoneNumber, and setting it equal to the empty String\n2. next, just loop over the given parameter String\n3. If the character is a number, append it to phoneNumber\n4. If the character is not a number, you need to determine which number that character represents (a switch works nicely here), and then you append that newly identified number to phoneNumber.\n5. Finally, return this newly created String, phoneNumber\n\n\n\n",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main {\\n  // Write your method(s) below:\\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n\\t\\n  public static void main(String[] args) {\\n    System.out.println(convertNumber(\\\"1800flowers\\\"));\\n\\tSystem.out.println(convertNumber(\\\"1800VirusNo\\\"));\\n\\tSystem.out.println(convertNumber(\\\"1800905Geek\\\"));\\n\\tSystem.out.println(convertNumber(\\\"1800JunkUSA\\\"));\\n  }\\n}\",\"defaultFilePath\":\"Main.java\",\"defaultFileType\":\"\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"unit_test\",\"title\":\"testName\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void testName() {\\n    Main m = new Main();\\n    assertEquals(m.convertNumber(\\\"1800flowers\\\"), \\\"18003569377\\\");\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"unit_test\",\"title\":\"tc2\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void testName() {\\n    Main m = new Main();\\n    assertEquals(m.convertNumber(\\\"1800VirusNo\\\"), \\\"18008478766\\\");\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"unit_test\",\"title\":\"tc3\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void testName() {\\n    Main m = new Main();\\n    assertEquals(m.convertNumber(\\\"1800905Geek\\\"), \\\"18009054335\\\");\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"unit_test\",\"title\":\"tc4\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void testName() {\\n    Main m = new Main();\\n    assertEquals(m.convertNumber(\\\"1800COLLECT\\\"), \\\"18002655328\\\");\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main {\\n  // Write your method(s) below:\\n  public static String convertNumber(String number) {\\n\\t\\t// Make number uppercase before continuing\\n\\t\\tnumber = number.toUpperCase();\\n\\t\\t\\n\\t\\tString phoneNumber = \\\"\\\";\\n\\n\\t\\t// Loop over all characters in the number\\n\\t\\t// We will only print if the character is a digit or a letter\\n\\t\\tfor (int i = 0; i \\u003c number.length(); i++) {\\n\\t\\t\\t// IF the given character is a digit, just print it directly.\\n\\t\\t\\tif (Character.isDigit(number.charAt(i))) {\\n\\t\\t\\t\\tphoneNumber += number.charAt(i);\\n\\t\\t\\t}\\n\\t\\t\\t// IF the given character is a letter, print the appropriate\\n\\t\\t\\t// numerical equivalent by invoking the getNumber() method.\\n\\t\\t\\tif (Character.isLetter(number.charAt(i))) {\\n\\t\\t\\t\\tphoneNumber += getNumber(number.charAt(i));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn phoneNumber;\\n\\t}\\n\\n\\tpublic static int getNumber(char uppercaseLetter) {\\n\\t\\tint number = 0;\\n\\n\\t\\tswitch (uppercaseLetter) {\\n\\t\\t\\tcase 'A':\\n\\t\\t\\tcase 'B':\\n\\t\\t\\tcase 'C':\\n\\t\\t\\t\\tnumber = 2;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 'D':\\n\\t\\t\\tcase 'E':\\n\\t\\t\\tcase 'F':\\n\\t\\t\\t\\tnumber = 3;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 'G':\\n\\t\\t\\tcase 'H':\\n\\t\\t\\tcase 'I':\\n\\t\\t\\t\\tnumber = 4;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 'J':\\n\\t\\t\\tcase 'K':\\n\\t\\t\\tcase 'L':\\n\\t\\t\\t\\tnumber = 5;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 'M':\\n\\t\\t\\tcase 'N':\\n\\t\\t\\tcase 'O':\\n\\t\\t\\t\\tnumber = 6;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 'P':\\n\\t\\t\\tcase 'Q':\\n\\t\\t\\tcase 'R':\\n\\t\\t\\tcase 'S':\\n\\t\\t\\t\\tnumber = 7;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 'T':\\n\\t\\t\\tcase 'U':\\n\\t\\t\\tcase 'V':\\n\\t\\t\\t\\tnumber = 8;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 'W':\\n\\t\\t\\tcase 'X':\\n\\t\\t\\tcase 'Y':\\n\\t\\t\\tcase 'Z':\\n\\t\\t\\t\\tnumber = 9;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\t\\n\\t\\treturn number;\\n\\t}\\n\\n  public static void main(String[] args) {\\n    System.out.println(convertNumber(\\\"1800flowers\\\"));\\n\\tSystem.out.println(convertNumber(\\\"1800VirusNo\\\"));\\n\\tSystem.out.println(convertNumber(\\\"1800905Geek\\\"));\\n\\tSystem.out.println(convertNumber(\\\"1800JunkUSA\\\"));\\n  }\\n}\",\"defaultFilePath\":\"Main.java\",\"defaultFileType\":\"\",\"extraFiles\":{}}},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"class Main {\\n  // Write your method(s) below:\\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n\\t\\n  public static void main(String[] args) {\\n    System.out.println(convertNumber(\\\"1800flowers\\\"));\\n\\tSystem.out.println(convertNumber(\\\"1800VirusNo\\\"));\\n\\tSystem.out.println(convertNumber(\\\"1800905Geek\\\"));\\n\\tSystem.out.println(convertNumber(\\\"1800JunkUSA\\\"));\\n  }\\n}\"],\"t\":1613421436000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16243,
    "title": "Lab03_Problem22: Count Primes",
    "prompt_md": "\n# Description:\n\nWrite the following method to count the number of prime numbers less than, or equal, to the given parameter, `number`.\n\n\n**Method Name:**\n\n```\ncountPrimes\n```\n\n\n\n**Parameter(s):**\n\n```\nint number\n```\n\n\n\n**Return Type:**\n\n```\nint, the number of primes less than or equal to \"number\"\n```\n\n\n\n**Samples:**\n\n```\ncountPrimes(10)  ---> returns 4\ncountPrimes(100)  ---> returns 25\ncountPrimes(1000) ---> returns 168\n```\n\n\n\n\n\nHint: you should write TWO methods:\n\n1. the `isPrime()` method from the last problem...just copy/paste it\n2. the `countPrimes()` method from this problem...it's really just a loop with a counter!\n\n\n\n",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main {\\n  // Write your method(s) below\\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n\\t\\n\\t\\n  public static void main(String[] args) {\\n    System.out.println(countPrimes(10));\\n    System.out.println(countPrimes(100));\\n    System.out.println(countPrimes(1000));\\n  }\\n}\",\"defaultFilePath\":\"Main.java\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"unit_test\",\"title\":\"testName\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void testName() {\\n    Main m = new Main();\\n    assertEquals(m.countPrimes(10), 4);\\n  }\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"unit_test\",\"title\":\"tc2\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void testName() {\\n    Main m = new Main();\\n    assertEquals(m.countPrimes(50), 15);\\n\\n  }\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"unit_test\",\"title\":\"tc3\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void testName() {\\n    Main m = new Main();\\n    assertEquals(m.countPrimes(100), 25);\\n  }\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"unit_test\",\"title\":\"tc4\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void testName() {\\n    Main m = new Main();\\n    assertEquals(m.countPrimes(1000), 168);\\n  }\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"unit_test\",\"title\":\"tc5\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void testName() {\\n    Main m = new Main();\\n    assertEquals(m.countPrimes(250), 53);\\n  }\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"unit_test\",\"title\":\"tc6\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void testName() {\\n    Main m = new Main();\\n    assertEquals(m.countPrimes(197), 45);\\n  }\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main {\\n  // Write your method(s) below\\npublic static int countPrimes(int max) {\\n\\t\\tint count = 0;\\n\\n\\t\\tfor (int i = 2; i \\u003c= max; i++) {\\n\\t\\t\\tif (isPrime(i)) {\\n\\t\\t\\t\\t// Increment the numPrimesFound\\n\\t\\t\\t\\tcount++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t\\n\\t\\treturn count;\\n\\t}\\n\\n\\tpublic static boolean isPrime(int n) {\\n\\t\\t// Here, we say, \\\"yes, let's assume the number is prime\\\".\\n\\t\\tboolean prime = true;\\n\\n\\t\\tfor (int i = 2; i \\u003c= n / 2; i++) {\\n\\t\\t\\tif (n % i == 0) {\\n\\t\\t\\t\\t// But now, if we find that the given number, n, is divisible\\n\\t\\t\\t\\t// by some other number, i, we immediately set prime to false and break\\n\\t\\t\\t\\tprime = false;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Finally, we return the value of prime. If it's true, that means we never\\n\\t\\t// encountered a situation where it was divisible by another number.\\n\\t\\t// But if it's false, this means it was in fact divisible by some i.\\n\\t\\treturn prime;\\n\\t}\\n\\t\\n  public static void main(String[] args) {\\n    System.out.println(countPrimes(10));\\n    System.out.println(countPrimes(100));\\n    System.out.println(countPrimes(1000));\\n  }\\n}\",\"defaultFilePath\":\"Main.java\",\"extraFiles\":{}}},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"class Main {\\n  // Write your method(s) below\\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n\\t\\n\\t\\n  public static void main(String[] args) {\\n    System.out.println(countPrimes(10));\\n    System.out.println(countPrimes(100));\\n    System.out.println(countPrimes(1000));\\n  }\\n}\"],\"t\":1613420137000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16244,
    "title": "Lab03_Problem21: Is Prime",
    "prompt_md": "\n# Description:\n\nWrite the following method to determine if a given number is a prime number.\n\n\n\n**Method Name:**\n\n```\nisPrime\n```\n\n\n\n**Parameter(s):**\n\n```\nint number\n```\n\n\n\n**Return Type:**\n\n```\nboolean\n```\n\n\n\n**Samples:**\n\n```\nisPrime(11)  ---> returns true\nisPrime(19)  ---> returns true\nisPrime(120) ---> returns false\nisPrime(23)  ---> returns true\n```\n\n\n\n",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main {\\n  // Write your method below\\n  \\n  \\n  \\n  \\n\\t\\n  public static void main(String[] args) {\\n    System.out.println(isPrime(11));\\n    System.out.println(isPrime(19));\\n    System.out.println(isPrime(120));\\n    System.out.println(isPrime(23));\\n  }\\n}\",\"defaultFilePath\":\"Main.java\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"unit_test\",\"title\":\"testIsPrime\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void testIsPrime() {\\n    Main m = new Main();\\n    assertFalse(m.isPrime(1));\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"unit_test\",\"title\":\"tc2\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void testIsPrime() {\\n    Main m = new Main();\\n    assertTrue(m.isPrime(2));\\n\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"unit_test\",\"title\":\"tc3\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void testIsPrime() {\\n    Main m = new Main();\\n    assertFalse(m.isPrime(6));\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"unit_test\",\"title\":\"tc4\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void testIsPrime() {\\n    Main m = new Main();\\n    assertFalse(m.isPrime(99));\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"unit_test\",\"title\":\"tc5\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void testIsPrime() {\\n    Main m = new Main();\\n    assertTrue(m.isPrime(101));\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main {\\n  // Write your method below\\n  public static boolean isPrime(int n) {\\n\\t\\t// Here, we say, \\\"yes, let's assume the number is prime\\\".\\n\\t\\tboolean prime = true;\\n\\t\\t\\n\\t\\tfor (int i = 2; i \\u003c= n / 2; i++) {\\n\\t\\t\\tif (n % i == 0) {\\n\\t\\t\\t\\t// But now, if we find that the given number, n, is divisible\\n\\t\\t\\t\\t// by some other number, i, we immediately set prime to false and break\\n\\t\\t\\t\\tprime = false;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t\\n\\t\\t// Finally, we return the value of prime. If it's true, that means we never\\n\\t\\t// encountered a situation where it was divisible by another number.\\n\\t\\t// But if it's false, this means it was in fact divisible by some i.\\n\\t\\treturn prime;\\n\\t}\\n  \\n  \\n  \\n\\t\\n  public static void main(String[] args) {\\n    System.out.println(isPrime(11));\\n    System.out.println(isPrime(19));\\n    System.out.println(isPrime(120));\\n    System.out.println(isPrime(23));\\n  }\\n}\",\"defaultFilePath\":\"Main.java\",\"extraFiles\":{}}},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"class Main {\\n  // Write your method below\\n  \\n  \\n  \\n  \\n\\t\\n  public static void main(String[] args) {\\n    System.out.println(isPrime(11));\\n    System.out.println(isPrime(19));\\n    System.out.println(isPrime(120));\\n    System.out.println(isPrime(23));\\n  }\\n}\"],\"t\":1613420137000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16245,
    "title": "Lab02_Problem28: Nested Menu Practice",
    "prompt_md": "## Problem Statement\n\nThe purpose of this problem is to practice a menu-driven program that has menus nested within menus (by way of loops!).\n\nYou should study the sample execution of the program below and have your program flow work EXACTLY the same.\n\n## Sample Execution of Program\n\n```plaintext\nMain menu: Choose an option\n    1 - go to inner ABR menu\n    2 - go to inner XYR menu\n    3 - to exit\nEnter your choice (1, 2, or 3): hello\n\nInvalid selection --- Try again.\n(You must enter a digit.)\n\nMain menu: Choose an option\n    1 - go to inner ABR menu\n    2 - go to inner XYR menu\n    3 - to exit\nEnter your choice (1, 2, or 3): 4\n\nInvalid selection --- Try again.\n\nMain menu: Choose an option\n    1 - go to inner ABR menu\n    2 - go to inner XYR menu\n    3 - to exit\nEnter your choice (1, 2, or 3): 23424\n\nInvalid selection --- Try again.\n\nMain menu: Choose an option\n    1 - go to inner ABR menu\n    2 - go to inner XYR menu\n    3 - to exit\nEnter your choice (1, 2, or 3): will this work\n\nInvalid selection --- Try again.\n(You must enter a digit.)\n\nMain menu: Choose an option\n    1 - go to inner ABR menu\n    2 - go to inner XYR menu\n    3 - to exit\nEnter your choice (1, 2, or 3): 1\n\n    ABR Menu: Choose an option\n        A\n        B\n        R (return to previous menu)\n    Enter your choice: 1\n\n    Invalid selection --- Try again.\n\n    ABR Menu: Choose an option\n        A\n        B\n        R (return to previous menu)\n    Enter your choice: asdf\n\n    Invalid selection --- Try again.\n\n    ABR Menu: Choose an option\n        A\n        B\n        R (return to previous menu)\n    Enter your choice: a\n\n    You chose \"A\".\n\n    ABR Menu: Choose an option\n        A\n        B\n        R (return to previous menu)\n    Enter your choice: b\n\n    You chose \"B\".\n\n    ABR Menu: Choose an option\n        A\n        B\n        R (return to previous menu)\n    Enter your choice: c\n\n    Invalid selection --- Try again.\n\n    ABR Menu: Choose an option\n        A\n        B\n        R (return to previous menu)\n    Enter your choice: r\n\nMain menu: Choose an option\n    1 - go to inner ABR menu\n    2 - go to inner XYR menu\n    3 - to exit\nEnter your choice (1, 2, or 3): 2\n\n    XYR Menu: Choose an option\n        X\n        Y\n        R (return to previous menu)\n    Enter your choice: xray\n\n    Invalid selection --- Try again.\n\n    XYR Menu: Choose an option\n        X\n        Y\n        R (return to previous menu)\n    Enter your choice: z\n\n    Invalid selection --- Try again.\n\n    XYR Menu: Choose an option\n        X\n        Y\n        R (return to previous menu)\n    Enter your choice: x\n\n    You chose \"X\".\n\n    XYR Menu: Choose an option\n        X\n        Y\n        R (return to previous menu)\n    Enter your choice: y\n\n    You chose \"Y\".\n\n    XYR Menu: Choose an option\n        X\n        Y\n        R (return to previous menu)\n    Enter your choice: r\n\nMain menu: Choose an option\n    1 - go to inner ABR menu\n    2 - go to inner XYR menu\n    3 - to exit\nEnter your choice (1, 2, or 3): three\n\nInvalid selection --- Try again.\n(You must enter a digit.)\n\nMain menu: Choose an option\n    1 - go to inner ABR menu\n    2 - go to inner XYR menu\n    3 - to exit\nEnter your choice (1, 2, or 3): 3\n```",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"import java.util.*;\\n\\nclass Main {\\n    public static void main(String[] args) {\\n        Scanner in = new Scanner(System.in);\\n        String choiceMainMenu;\\n        String choiceXYRmenu;\\n        // Do NOT change the code above\\n\\n        // Your code should go below\\n\\n\\n    }\\n}\",\"defaultFilePath\":\"\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"stdout\",\"title\":\"TC1\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"Main menu: Choose an option\\n    1 - go to inner ABR menu\\n    2 - go to inner XYR menu\\n    3 - to exit\\nEnter your choice (1, 2, or 3): \\n\\nInvalid selection --- Try again.\\n(You must enter a digit.)\\n\\nMain menu: Choose an option\\n    1 - go to inner ABR menu\\n    2 - go to inner XYR menu\\n    3 - to exit\\nEnter your choice (1, 2, or 3): \\n\\nInvalid selection --- Try again.\\n(You must enter a digit.)\\n\\nMain menu: Choose an option\\n    1 - go to inner ABR menu\\n    2 - go to inner XYR menu\\n    3 - to exit\\nEnter your choice (1, 2, or 3): \\n\\nInvalid selection --- Try again.\\n\\nMain menu: Choose an option\\n    1 - go to inner ABR menu\\n    2 - go to inner XYR menu\\n    3 - to exit\\nEnter your choice (1, 2, or 3): \\n\\nInvalid selection --- Try again.\\n\\nMain menu: Choose an option\\n    1 - go to inner ABR menu\\n    2 - go to inner XYR menu\\n    3 - to exit\\nEnter your choice (1, 2, or 3): \\n\\n    ABR Menu: Choose an option\\n        A\\n        B\\n        R (return to previous menu)\\n    Enter your choice: \\n\\n    Invalid selection --- Try again.\\n\\n    ABR Menu: Choose an option\\n        A\\n        B\\n        R (return to previous menu)\\n    Enter your choice: \\n\\n    You chose \\\"A\\\".\\n\\n    ABR Menu: Choose an option\\n        A\\n        B\\n        R (return to previous menu)\\n    Enter your choice: \\n\\n    You chose \\\"B\\\".\\n\\n    ABR Menu: Choose an option\\n        A\\n        B\\n        R (return to previous menu)\\n    Enter your choice: \\n\\n    Invalid selection --- Try again.\\n\\n    ABR Menu: Choose an option\\n        A\\n        B\\n        R (return to previous menu)\\n    Enter your choice: \\n\\nMain menu: Choose an option\\n    1 - go to inner ABR menu\\n    2 - go to inner XYR menu\\n    3 - to exit\\nEnter your choice (1, 2, or 3): \\n\\n    XYR Menu: Choose an option\\n        X\\n        Y\\n        R (return to previous menu)\\n    Enter your choice: \\n\\n    Invalid selection --- Try again.\\n\\n    XYR Menu: Choose an option\\n        X\\n        Y\\n        R (return to previous menu)\\n    Enter your choice: \\n\\n    You chose \\\"X\\\".\\n\\n    XYR Menu: Choose an option\\n        X\\n        Y\\n        R (return to previous menu)\\n    Enter your choice: \\n\\n    You chose \\\"Y\\\".\\n\\n    XYR Menu: Choose an option\\n        X\\n        Y\\n        R (return to previous menu)\\n    Enter your choice: \\n\\n    Invalid selection --- Try again.\\n\\n    XYR Menu: Choose an option\\n        X\\n        Y\\n        R (return to previous menu)\\n    Enter your choice: \\n\\nMain menu: Choose an option\\n    1 - go to inner ABR menu\\n    2 - go to inner XYR menu\\n    3 - to exit\\nEnter your choice (1, 2, or 3): \\n\\nInvalid selection --- Try again.\\n(You must enter a digit.)\\n\\nMain menu: Choose an option\\n    1 - go to inner ABR menu\\n    2 - go to inner XYR menu\\n    3 - to exit\\nEnter your choice (1, 2, or 3): \",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"two\\none\\n4\\n0\\n1\\napple\\na\\nb\\nrobert\\nr\\n2\\nxray\\nx\\ny\\n1\\nr\\nexit\\n3\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"import java.util.Scanner;\\n\\nclass Main {\\n\\n    public static void main(String[] args) {\\n        Scanner in = new Scanner(System.in);\\n        String choiceMainMenu, choiceABRmenu, choiceXYRmenu;\\n        do {\\n            System.out.print(\\\"Main menu: Choose an option\\\\n\\\"\\n                    + \\\"    1 - go to inner ABR menu\\\\n\\\"\\n                    + \\\"    2 - go to inner XYR menu\\\\n\\\"\\n                    + \\\"    3 - to exit\\\\n\\\"\\n                    + \\\"Enter your choice (1, 2, or 3): \\\");\\n            choiceMainMenu = in.nextLine();\\n\\n            // IF choiceMainMenu is 1\\n            if (choiceMainMenu.equals(\\\"1\\\")) {\\n                // DO the ABR menu\\n                do {\\n                    System.out.print(\\\"\\\\n    ABR Menu: Choose an option\\\\n\\\"\\n                            + \\\"        A\\\\n\\\"\\n                            + \\\"        B\\\\n\\\"\\n                            + \\\"        R (return to previous menu)\\\\n\\\"\\n                            + \\\"    Enter your choice: \\\");\\n                    choiceABRmenu = in.nextLine();\\n\\n                    if (choiceABRmenu.equalsIgnoreCase(\\\"A\\\")) {\\n                        System.out.println(\\\"\\\\n    You chose \\\\\\\"A\\\\\\\".\\\");\\n                    }\\n                    else if (choiceABRmenu.equalsIgnoreCase(\\\"B\\\")) {\\n                        System.out.println(\\\"\\\\n    You chose \\\\\\\"B\\\\\\\".\\\");\\n                    }\\n                    else if (choiceABRmenu.equalsIgnoreCase(\\\"R\\\")) {\\n                        System.out.println();\\n                    }\\n                    else {\\n                        System.out.println(\\\"\\\\n    Invalid selection --- Try again.\\\");\\n                    }\\n                } while (!choiceABRmenu.equalsIgnoreCase(\\\"R\\\"));\\n            }\\n            // ELSE IF choiceMainMenu is 2\\n            else if (choiceMainMenu.equals(\\\"2\\\")) {\\n                // DO the XYR menu\\n                do {\\n                    System.out.print(\\\"\\\\n    XYR Menu: Choose an option\\\\n\\\"\\n                            + \\\"        X\\\\n\\\"\\n                            + \\\"        Y\\\\n\\\"\\n                            + \\\"        R (return to previous menu)\\\\n\\\"\\n                            + \\\"    Enter your choice: \\\");\\n                    choiceXYRmenu = in.nextLine();\\n\\n                    if (choiceXYRmenu.equalsIgnoreCase(\\\"X\\\")) {\\n                        System.out.println(\\\"\\\\n    You chose \\\\\\\"X\\\\\\\".\\\");\\n                    }\\n                    else if (choiceXYRmenu.equalsIgnoreCase(\\\"Y\\\")) {\\n                        System.out.println(\\\"\\\\n    You chose \\\\\\\"Y\\\\\\\".\\\");\\n                    }\\n                    else if (choiceXYRmenu.equalsIgnoreCase(\\\"R\\\")) {\\n                        System.out.println();\\n                    }\\n                    else {\\n                        System.out.println(\\\"\\\\n    Invalid selection --- Try again.\\\");\\n                    }\\n                } while (!choiceXYRmenu.equalsIgnoreCase(\\\"R\\\"));\\n            }\\n            else if (choiceMainMenu.equals(\\\"3\\\")) {\\n                break;\\n            }\\n            else {\\n                System.out.println(\\\"\\\\nInvalid selection --- Try again.\\\");\\n                if (!Character.isDigit(choiceMainMenu.charAt(0))) {\\n                    System.out.println(\\\"(You must enter a digit.)\\\\n\\\");\\n                }\\n                else {\\n                    System.out.println();\\n                }\\n            }\\n        } while (!choiceMainMenu.equals(\\\"3\\\"));\\n\\n    }\\n\\n}\\n\",\"defaultFilePath\":\"\",\"extraFiles\":{}}},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"import java.util.*;\\n\\nclass Main {\\n  public static void main(String[] args) {\\n    Scanner in = new Scanner(System.in);\\n    String choiceMainMenu;\\n    String choiceXYRmenu;\\n    // Do NOT change the code above\\n    \\n    // Your code should go below\\n    \\n    \\n  }\\n}\"],\"t\":1613077984000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16246,
    "title": "Lab02_Problem27: Nested For Loops 1",
    "prompt_md": "## Problem Statement\n\nYour job is to read an integer value, n, from the user (already done for you), and then print a triangle of size n as shown in the samples below.\n\n### Sample Input 1\n\n```plaintext\n4\n```\n\n### Sample Output 1\n\n```plaintext\n      1 \n    2 1 \n  3 2 1 \n4 3 2 1 \n```\n\n### Sample Input 2\n\n```plaintext\n6\n```\n\n### Sample Output 2\n\n```plaintext\n          1 \n        2 1 \n      3 2 1 \n    4 3 2 1 \n  5 4 3 2 1 \n6 5 4 3 2 1 \n```",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"import java.util.*;\\n\\nclass Main {\\n  public static void main(String[] args) {\\n    Scanner in = new Scanner(System.in);\\n    int n = in.nextInt();\\n    // Do NOT change the code above.\\n    \\n    // Your code should go below\\n    \\n    \\n  }\\n}\",\"defaultFilePath\":\"Main.java\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"stdout\",\"title\":\"TC3\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"            1 \\n          2 1 \\n        3 2 1 \\n      4 3 2 1 \\n    5 4 3 2 1 \\n  6 5 4 3 2 1 \\n7 6 5 4 3 2 1 \",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"7\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"TC2\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"                  1 \\n                2 1 \\n              3 2 1 \\n            4 3 2 1 \\n          5 4 3 2 1 \\n        6 5 4 3 2 1 \\n      7 6 5 4 3 2 1 \\n    8 7 6 5 4 3 2 1 \\n  9 8 7 6 5 4 3 2 1 \\n10 9 8 7 6 5 4 3 2 1 \",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"10\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"TC1\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"1 \",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"1\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"import java.util.*;\\n\\nclass Main {\\n\\n\\tpublic static void main(String[] args) {\\n\\t\\tScanner in = new Scanner(System.in);\\n\\t\\tint n = in.nextInt();\\n\\t\\t\\n\\t\\tfor (int i = 1; i \\u003c= n; i++) {\\n\\t\\t\\t// First, print spaces\\n\\t\\t\\tfor (int j = 1; j \\u003c= (n - i); j++) {\\n\\t\\t\\t\\tSystem.out.print(\\\"  \\\");\\n\\t\\t\\t}\\n\\t\\t\\tfor (int j = i; j \\u003e= 1; j--) {\\n\\t\\t\\t\\tSystem.out.print(j + \\\" \\\");\\n\\t\\t\\t}\\n\\t\\t\\tSystem.out.println();\\n\\t\\t}\\n\\t}\\n\\n}\",\"defaultFilePath\":\"Main.java\",\"extraFiles\":{}}},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"import java.util.*;\\n\\nclass Main {\\n  public static void main(String[] args) {\\n    Scanner in = new Scanner(System.in);\\n    int n = in.nextInt();\\n    // Do NOT change the code above.\\n    \\n    // Your code should go below\\n    \\n    \\n  }\\n}\"],\"t\":1613077981000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16247,
    "title": "Lab02_Problem26: Nested For Loops 1",
    "prompt_md": "## Problem Statement\n\nYour job is to read an integer value, n, from the user (already done for you), and then print a triangle of size n as shown in the samples below.\n\n### Sample Input 1\n\n```plaintext\n4\n```\n\n### Sample Output 1\n\n```plaintext\n4 3 2 1 \n3 2 1 \n2 1 \n1 \n```\n\n### Sample Input 2\n\n```plaintext\n6\n```\n\n### Sample Output 2\n\n```plaintext\n6 5 4 3 2 1 \n5 4 3 2 1 \n4 3 2 1 \n3 2 1 \n2 1 \n1 \n```",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"import java.util.*;\\n\\nclass Main {\\n  public static void main(String[] args) {\\n    Scanner in = new Scanner(System.in);\\n    int n = in.nextInt();\\n    // Do NOT change the code above.\\n    \\n    // Your code should go below\\n    \\n    \\n  }\\n}\",\"defaultFilePath\":\"Main.java\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"stdout\",\"title\":\"TC1\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"1 \",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"1\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"TC2\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"10 9 8 7 6 5 4 3 2 1 \\n9 8 7 6 5 4 3 2 1 \\n8 7 6 5 4 3 2 1 \\n7 6 5 4 3 2 1 \\n6 5 4 3 2 1 \\n5 4 3 2 1 \\n4 3 2 1 \\n3 2 1 \\n2 1 \\n1 \",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"10\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"TC3\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"7 6 5 4 3 2 1 \\n6 5 4 3 2 1 \\n5 4 3 2 1 \\n4 3 2 1 \\n3 2 1 \\n2 1 \\n1 \",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"7\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"import java.util.*;\\n\\nclass Main {\\n\\n\\tpublic static void main(String[] args) {\\n\\t\\tScanner in = new Scanner(System.in);\\n\\t\\tint n = in.nextInt();\\n\\t\\t\\n\\t\\tfor (int i = n; i \\u003e= 1; i--) {\\n\\t\\t\\tfor (int j = i; j \\u003e= 1; j--) {\\n\\t\\t\\t\\tSystem.out.print(j + \\\" \\\");\\n\\t\\t\\t}\\n\\t\\t\\tSystem.out.println();\\n\\t\\t}\\n\\t}\\n\\n}\",\"defaultFilePath\":\"Main.java\",\"extraFiles\":{}}},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"import java.util.*;\\n\\nclass Main {\\n  public static void main(String[] args) {\\n    Scanner in = new Scanner(System.in);\\n    int n = in.nextInt();\\n    // Do NOT change the code above.\\n    \\n    // Your code should go below\\n    \\n    \\n  }\\n}\"],\"t\":1613077980000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16248,
    "title": "Lab02_Problem25: Nested For Loops 1",
    "prompt_md": "## Problem Statement\n\nYour job is to read an integer value, n, from the user (already done for you), and then print a triangle of size n as shown in the samples below.\n\n### Sample Input 1\n\n```plaintext\n4\n```\n\n### Sample Output 1\n\n```plaintext\n1 2 3 4 \n1 2 3 \n1 2 \n1 \n```\n\n### Sample Input 2\n\n```plaintext\n6\n```\n\n### Sample Output 2\n\n```plaintext\n1 2 3 4 5 6 \n1 2 3 4 5 \n1 2 3 4 \n1 2 3 \n1 2 \n1 \n```",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"import java.util.*;\\n\\nclass Main {\\n  public static void main(String[] args) {\\n    Scanner in = new Scanner(System.in);\\n    int n = in.nextInt();\\n    // Do NOT change the code above.\\n    \\n    // Your code should go below\\n    \\n    \\n  }\\n}\",\"defaultFilePath\":\"Main.java\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"stdout\",\"title\":\"TC1\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"1 \",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"1\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"TC2\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"1 2 3 4 5 6 7 8 9 10 \\n1 2 3 4 5 6 7 8 9 \\n1 2 3 4 5 6 7 8 \\n1 2 3 4 5 6 7 \\n1 2 3 4 5 6 \\n1 2 3 4 5 \\n1 2 3 4 \\n1 2 3 \\n1 2 \\n1 \",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"10\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"TC3\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"1 2 3 4 5 6 7 \\n1 2 3 4 5 6 \\n1 2 3 4 5 \\n1 2 3 4 \\n1 2 3 \\n1 2 \\n1 \",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"7\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"import java.util.*;\\n\\nclass Main {\\n  public static void main(String[] args) {\\n    Scanner in = new Scanner(System.in);\\n    int n = in.nextInt();\\n    // Do NOT change the code above.\\n    \\n    // Your code should go below\\n    \\n    \\n  }\\n}\"],\"t\":1613077977000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16249,
    "title": "Lab02_Problem24: Nested For Loops 1",
    "prompt_md": "## Problem Statement\n\nYour job is to read an integer value, n, from the user (already done for you), and then print a triangle of size n as shown in the samples below.\n\n### Sample Input 1\n\n```plaintext\n4\n```\n\n### Sample Output 1\n\n```plaintext\n1 \n1 2 \n1 2 3 \n1 2 3 4 \n```\n\n### Sample Input 2\n\n```plaintext\n6\n```\n\n### Sample Output 2\n\n```plaintext\n1 \n1 2 \n1 2 3 \n1 2 3 4 \n1 2 3 4 5 \n1 2 3 4 5 6 \n```",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main {\\n    public static void main(String[] args) {\\n        \\n    }\\n}\",\"defaultFilePath\":\"\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"stdout\",\"title\":\"TC3\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"1 \\n1 2 \\n1 2 3 \\n1 2 3 4 \\n1 2 3 4 5 \\n1 2 3 4 5 6 \\n1 2 3 4 5 6 7 \",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"7\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"TC2\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"1 \\n1 2 \\n1 2 3 \\n1 2 3 4 \\n1 2 3 4 5 \\n1 2 3 4 5 6 \\n1 2 3 4 5 6 7 \\n1 2 3 4 5 6 7 8 \\n1 2 3 4 5 6 7 8 9 \\n1 2 3 4 5 6 7 8 9 10 \",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"10\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"TC1\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"1 \",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"1\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"import java.util.*;\\n\\nclass Main {\\n  public static void main(String[] args) {\\n    Scanner in = new Scanner(System.in);\\n    int n = in.nextInt();\\n    // Do NOT change the code above.\\n    \\n    // Your code should go below\\n    \\n    \\n  }\\n}\"],\"t\":1613077977000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16250,
    "title": "BMI Calculator",
    "prompt_md": "\n# Statement\n\nWrite a program that prompts the user to enter their weight in pounds and their height in feet and inches. Your program should then use the information given below to calculate the user’s Body Mass Index (BMI) and output an appropriate message. You will need the constants, the equation, and the BMI information given in the table below.\n\n![](https://storage.googleapis.com/replit/images/1569527284631_0e216812c20bc897c3b61469024d4e38.jpeg)\n\n# \n\n# Sample Run #1\n\n```\n------------------------------------------------\n|                BMI Calculator                |\n------------------------------------------------\nEnter your weight in pounds: **<u>92</u>**\nEnter your height in feet and inches...\n\tFeet:   **<u>5</u>**\n\tInches: **<u>6</u>**\n\n\nResults:\nYour BMI is 14.85.\n - You are Underweight.\n```\n\n***The user input is both bolded and underlined for easy viewing.\n\n# \n\n# Sample Run #2\n\n```\n------------------------------------------------\n|                BMI Calculator                |\n------------------------------------------------\nEnter your weight in pounds: **<u>210</u>**\nEnter your height in feet and inches...\n\tFeet:   **<u>5</u>**\n\tInches: **<u>11</u>**\n\n\nResults:\nYour BMI is 29.29.\n - You are Overweight.\n```\n\n# \n\n# Sample Run #3\n\n```\n------------------------------------------------\n|                BMI Calculator                |\n------------------------------------------------\nEnter your weight in pounds: **<u>170</u>**\nEnter your height in feet and inches...\n\tFeet:   **<u>6</u>**\n\tInches: **<u>2</u>**\n\n\nResults:\nYour BMI is 21.83.\n - You are Normal.\n```\n\n# \n\n# Sample Run #4\n\n```\n------------------------------------------------\n|                Heads or Tails                |\n------------------------------------------------\nCan you guess the computer's choice?\nGive it a shot!\n\n\nYou can enter 1 (for heads) or 2 (for tails).\nPlease enter your choice: **<u>2</u>**\nCorrect! The computer chose tails.\n```\n\n\n\n",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main {\\n  public static void main(String[] args) {\\n    System.out.println(\\\"Hello world!\\\");\\n  }\\n}\",\"defaultFilePath\":\"Main.java\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"stdout\",\"title\":\"TC5\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"------------------------------------------------\\n|                BMI Calculator                |\\n------------------------------------------------\\nEnter your weight in pounds: \\nEnter your height in feet and inches...\\n\\tFeet:   \\n\\tInches: \\n\\nResults:\\nYour BMI is 18.88.\\n - You are Normal.\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"110\\n5\\n4\\n\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"TC4\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"------------------------------------------------\\n|                BMI Calculator                |\\n------------------------------------------------\\nEnter your weight in pounds: \\nEnter your height in feet and inches...\\n\\tFeet:   \\n\\tInches: \\n\\nResults:\\nYour BMI is 21.83.\\n - You are Normal.\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"170\\n6\\n2\\n\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"TC3\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"------------------------------------------------\\n|                BMI Calculator                |\\n------------------------------------------------\\nEnter your weight in pounds: \\nEnter your height in feet and inches...\\n\\tFeet:   \\n\\tInches: \\n\\nResults:\\nYour BMI is 29.29.\\n - You are Overweight.\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"210\\n5\\n11\\n\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"TC2\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"------------------------------------------------\\n|                BMI Calculator                |\\n------------------------------------------------\\nEnter your weight in pounds: \\nEnter your height in feet and inches...\\n\\tFeet:   \\n\\tInches: \\n\\nResults:\\nYour BMI is 31.01.\\n - You are Obese.\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"210\\n5\\n9\\n\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"TC1\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"------------------------------------------------\\n|                BMI Calculator                |\\n------------------------------------------------\\nEnter your weight in pounds: \\nEnter your height in feet and inches...\\n\\tFeet:   \\n\\tInches: \\n\\nResults:\\nYour BMI is 14.85.\\n - You are Underweight.\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"92\\n5\\n6\\n\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"class Main {\\n  public static void main(String[] args) {\\n    System.out.println(\\\"Hello world!\\\");\\n  }\\n}\"],\"t\":1612558075000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16251,
    "title": "Lab01_Problem27: Sort Three Numbers",
    "prompt_md": "\n \n\n# Statement\n\nGiven three integers, print them in ascending order. You should do this using many, and nested, if/else statements.\n\n\n\n# Example input\n\n```\n5\n3\n7\n```\n\n# Example output\n\n```\n3\n5\n7\n```\n\n\n\n",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main {\\n    public static void main(String[] args) {\\n    \\n    }\\n}\",\"defaultFilePath\":\"\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"stdout\",\"title\":\"TC1\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"20\\n40\\n50\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"50\\n40\\n20\\n\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"TC4\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"1\\n23\\n92\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"92\\n1\\n23\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"TC3\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"29\\n100\\n320\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"29\\n320\\n100\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"TC2\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"400\\n550\\n700\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"400\\n700\\n550\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"class Main {\\n  public static void main(String[] args) {\\n    System.out.println(\\\"Hello world!\\\");\\n  }\\n}\"],\"t\":1612454729000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16252,
    "title": "Diapers or Coffee",
    "prompt_md": "\n# Statement\n\nThe struggle is real! Your friend just had a baby and is now realizing these little suckers cost a lot of money! Each box of diapers is, unfortunately, cutting into the coffee budget, which means the Starbucks ritual may have to soon stop! The positive is that those venti caramel Frappuccinos weren’t exactly ideal for the waistline either (490 calories each!).\n\n\nHelp your friend realize this is a good thing by writing them a program. Your program should ask how many diapers are being used, the cost of a dozen diapers, and the cost of a venti caramel Frappuccino. From this, you will calculate how many fewer caramel Frappuccino will be consumed, along with a calculated estimated weight loss.\n\n\nNote that 1 lb = 3500 calories.\n\n\n# Sample run of program:\n\n```\nWhat is the cost of a dozen diapers:  **<u>3.25</u>**\nHow many diapers does the baby go through a day:  **<u>6</u>**\nWhat is the cost of a single caramel frappuccino:  **<u>4.95</u>**\nYou will spend $48.75 on diapers in a month.\nYou will drink 10 fewer caramel frappuccino in a month.\nAs a result, you will lose 1.40 pounds in a month.\n```\n\n\n\n",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main {\\n  public static void main(String[] args) {\\n    System.out.println(\\\"Hello world!\\\");\\n  }\\n}\",\"defaultFilePath\":\"Main.java\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"stdout\",\"title\":\"TC3\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"What is the cost of a dozen diapers:  \\nHow many diapers does the baby go through a day:  \\nWhat is the cost of a single caramel frappuccino:  \\nYou will spend $99.00 on diapers in a month.\\nYou will drink 18 fewer caramel frappuccino in a month.\\nAs a result, you will lose 2.52 pounds in a month.\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"4.95\\n8\\n5.50\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"TC2\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"What is the cost of a dozen diapers:  \\nHow many diapers does the baby go through a day:  \\nWhat is the cost of a single caramel frappuccino:  \\nYou will spend $87.50 on diapers in a month.\\nYou will drink 16 fewer caramel frappuccino in a month.\\nAs a result, you will lose 2.24 pounds in a month.\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"3.50\\n10\\n5.79\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"TC1\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"What is the cost of a dozen diapers:  \\nHow many diapers does the baby go through a day:  \\nWhat is the cost of a single caramel frappuccino:  \\nYou will spend $48.75 on diapers in a month.\\nYou will drink 10 fewer caramel frappuccino in a month.\\nAs a result, you will lose 1.40 pounds in a month.\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"3.25\\n6\\n4.95\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null}}"
  },
  {
    "id": 16253,
    "title": "Lab01_Problem09: Koolaid",
    "prompt_md": "## Statement\n\nA family friend has two small children who are dreaming of making it big, and they have high hopes for their current business venture: the greatest Kool-Aid stand to ever see the light of day! And while they have lofty goals of supercars, yachts, and other toys, their current dream is a bit smaller: they each want twenty bucks to purchase a new Build-A-Bear!\n\nThey’ve come to you for help in determining how many cups of Kool-Aid they must sell in order to get a profit of $40.\n\nYour job: write a program to determine the number of cups of Kool-Aid that must be sold in order to meet a specified goal, all while taking into account the rental cost for their stand, the materials cost per cup, and the price per cup.\n\nSee output below for a full run of the program.\n\n## Sample run of program:\n\n```plaintext\nHow many dollars is the rent for your stand?  5\nHow many cents do the materials cost, per glass?  8\nHow many cents do you charge per glass?  25\nWhat is your profit goal, in dollars?  40\nYou must sell 265 cups of Kool-Aid to meet your goal.\n```\n\n\\***The output in the sample above is both \\*\\*bolded** and underlined for your convenience, so you can quickly see what the user is expected to enter.\n\n## Another sample run of program:\n\n```plaintext\nHow many dollars is the rent for your stand?  1\nHow many cents do the materials cost, per glass?  3\nHow many cents do you charge per glass?  25\nWhat is your profit goal, in dollars?  40\nYou must sell 187 cups of Kool-Aid to meet your goal.\n```",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main {\\n    public static void main(String[] args) {\\n\\n    }\\n}\",\"defaultFilePath\":\"\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"stdout\",\"title\":\"TC3\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"How many dollars is the rent for your stand?  \\nHow many cents do the materials cost, per glass?  \\nHow many cents do you charge per glass?  \\nWhat is your profit goal, in dollars?  \\nYou must sell 240 cups of Kool-Aid to meet your goal.\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"20\\n15\\n40\\n40\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"TC2\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"How many dollars is the rent for your stand?  \\nHow many cents do the materials cost, per glass?  \\nHow many cents do you charge per glass?  \\nWhat is your profit goal, in dollars?  \\nYou must sell 250 cups of Kool-Aid to meet your goal.\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"10\\n5\\n25\\n40\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"TC1\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"How many dollars is the rent for your stand?  \\nHow many cents do the materials cost, per glass?  \\nHow many cents do you charge per glass?  \\nWhat is your profit goal, in dollars?  \\nYou must sell 265 cups of Kool-Aid to meet your goal.\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"5\\n8\\n25\\n40\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"class Main {\\n  public static void main(String[] args) {\\n    System.out.println(\\\"Hello world!\\\");\\n  }\\n}\"],\"t\":1612454405000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16254,
    "title": "Lab01_Problem08: School Desks",
    "prompt_md": "### Statement\n\nA school decided to replace the desks in three classrooms. Each desk sits two students. Given the number of students in each class, print the smallest possible number of desks that can be purchased. The program should read three integers: the number of students in each of the three classes, a, b and c respectively. In the first test, there are three groups. The first group has 20 students and thus needs 10 desks. The second group has 21 students, so they can get by with no fewer than 11 desks. 11 desks are also enough for the third group of 22 students. So we need 32 desks in total.\n\n### Example input\n\n```plaintext\n20\n21\n22\n```\n\n###  Example output\n\n```plaintext\n32\n```",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main {\\n  public static void main(String[] args) {\\n    \\n  }\\n}\",\"defaultFilePath\":\"\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"stdout\",\"title\":\"TC3\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"28\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"17\\n19\\n18\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"TC2\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"36\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"25\\n21\\n23\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"TC1\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"31\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"26\\n20\\n16\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"class Main {\\n  public static void main(String[] args) {\\n    System.out.println(\\\"Hello world!\\\");\\n  }\\n}\"],\"t\":1612454290000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16255,
    "title": "052 - Accumulator Method Challenge 2 (optional)",
    "prompt_md": "\nWrite a method header on line two with the following specs:    \n\n\n\nReturns:\n\n```\na String\n```\n\nName:\n\n```\nalphabetical\n```\n\nParameters:\n\n```\na String called str\n```\n\nPurpose:\n\n```\nReturn a string that is composed of each letter as long as the letter is later on in the alphabet\nthan its previous one.  You can assume actual parameters are lowercase.\nSee below examples.\n```\n\n\n\nAdditional Info:\n\nYou can use < and > to compare characters (not Strings), where characters later on in the alphabet are \"greater\".  Examples:\n\n```\n'a' < 'b' ==> True\n'a' < 'a' ==> False\n'a' > 'b' ==> False\n```\n\n\n\nExamples:\n\n```\nalphabetical(\"abczef\") ==> \"abcz\"\nalphabetical(\"adatplqzh\") ==> \"adtz\"\nalphabetical(\"dbeuptvwmy\") ==> \"deuvwy\"\n```\n\n\n\n",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main {\\n\\t\\n\\t{\\n\\t\\t\\n\\t}\\n\\t\\n\\t//test case below (dont change):\\n\\tpublic static void main(String[] args){\\n\\t\\tSystem.out.println(alphabetical(\\\"adatplqzh\\\")); //\\\"adtz\\\"\\n\\t}\\n}\",\"defaultFilePath\":\"Main.java\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"unit_test\",\"title\":\"tests\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void tests() {\\n    Main a = new Main();\\n    assertEquals(\\\"abcz\\\",a.alphabetical(\\\"abczef\\\"));\\n    assertEquals(\\\"adtz\\\",a.alphabetical(\\\"adatplqzh\\\"));\\n    assertEquals(\\\"deuvwy\\\",a.alphabetical(\\\"dbeuptvwmy\\\"));\\n    assertEquals(\\\"ae\\\",a.alphabetical(\\\"aee\\\"));\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null}}"
  },
  {
    "id": 16256,
    "title": "Lab04_Problem01: Looping Arrays Practice 1",
    "prompt_md": "\nOn line 5, declare an integer array of size 5 and assign the values 10, 20, 30, 40, and 50 to it.\n\n\n\nThen use a for loop to print out all the elements of the array, one per line.\n\n\n\n",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main\\n{\\n\\tpublic static void main(String[] args)\\n\\t{\\n\\t\\t\\n\\t\\t\\n\\t\\t\\n\\t}\\n}\",\"defaultFilePath\":\"Main.java\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"stdout\",\"title\":\"tests\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"10\\n20\\n30\\n40\\n50\\n\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"class Main\\n{\\n\\tpublic static void main(String[] args)\\n\\t{\\n\\t\\t\\n\\t\\t\\n\\t\\t\\n\\t}\\n}\"],\"t\":1614274998000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16257,
    "title": "Lab08_Problem01: ArrayList Exercise 1",
    "prompt_md": "Create a static method that:\n\n*   is called combineAL\n*   returns an ArrayList of Strings\n*   takes two parameters: an ArrayList of Strings called wordList1, and an ArrayList of Strings called wordList2\n\nThis method should create a new ArrayList of Strings, add all the words (in order) from wordList1, **then** add all the words (in order) from wordList2. In other words, it is combining all the elements from the two parameters.",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"import java.util.ArrayList;\\n\\nclass Main {\\n\\tpublic static void Main(String[] args) {\\n\\t\\t// You needn't code anything here unless you want to test your method\\n\\t}\\n\\t\\n\\tpublic static ArrayList\\u003cString\\u003e combineAL(ArrayList\\u003cString\\u003e wordList1, ArrayList\\u003cString\\u003e wordList2) {\\n\\t\\t// Here make a NEW ArrayList and then add all the\\n\\t\\t// words (in order) from wordList1 and then wordList2\\n\\n\\t}\\n\\t\\n}\\n\",\"defaultFilePath\":\"Main.java\",\"defaultFileType\":\"text/plain\",\"defaultFileSyntaxLanguage\":\"java\",\"runType\":\"file\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"unit_test\",\"title\":\"tests\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\nimport java.util.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void tests() {\\n    ArrayList\\u003cString\\u003e a = new ArrayList\\u003cString\\u003e(Arrays.asList(\\\"1\\\",\\\"2\\\",\\\"3\\\",\\\"4\\\"));\\n    ArrayList\\u003cString\\u003e b = new ArrayList\\u003cString\\u003e(Arrays.asList(\\\"3\\\",\\\"4\\\"));\\n    ArrayList\\u003cString\\u003e c = new ArrayList\\u003cString\\u003e(Arrays.asList(\\\"1\\\",\\\"2\\\",\\\"3\\\",\\\"4\\\",\\\"3\\\",\\\"4\\\"));\\n    assertEquals(c,Main.combineAL(a,b));\\n    \\n    ArrayList\\u003cString\\u003e d = new ArrayList\\u003cString\\u003e(Arrays.asList(\\\"a\\\",\\\"z\\\",\\\"b\\\"));\\n    ArrayList\\u003cString\\u003e e = new ArrayList\\u003cString\\u003e(Arrays.asList(\\\"wow\\\",\\\"very\\\",\\\"doge\\\",\\\"such\\\",\\\"meme\\\"));\\n    ArrayList\\u003cString\\u003e f = new ArrayList\\u003cString\\u003e(Arrays.asList(\\\"a\\\",\\\"z\\\",\\\"b\\\",\\\"wow\\\",\\\"very\\\",\\\"doge\\\",\\\"such\\\",\\\"meme\\\"));\\n    assertEquals(f,Main.combineAL(d,e));\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"import java.util.ArrayList;\\n\\nclass Main\\n{\\n\\tpublic static void Main(String[] args)\\n\\t{\\n\\t\\t// You needn't code anything here unless you want to test your method\\n\\t}\\n\\t\\n\\tpublic static ArrayList\\u003cString\\u003e combineAL(ArrayList\\u003cString\\u003e wordList1, ArrayList\\u003cString\\u003e wordList2)\\n\\t{\\n\\t\\t// Here make a NEW ArrayList and then add all the\\n\\t\\t// words (in order) from wordList1 and then wordList2\\n\\t}\\n\\t\\n}\"],\"t\":1617932112000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16258,
    "title": "Lab03_Problem11: Accumulator Method Practice 1",
    "prompt_md": "\nWrite a method header on line two with the following specs:  \n\n\n\nReturns:\n\n```\nan integer\n```\n\nName:\n\n```\nsumToX\n```\n\nParameters:\n\n```\nan integer called \"x\"\n```\n\nPurpose:\n\n```\ncalculate the sum of the integers from 1 to x (including x)\n```\n\n\n\nExamples:\n\n```\nsumToX(5) ==> 15\nsumToX(7) ==> 28\n```\n\n \n\n\n\n",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main {\\n\\t\\n\\t{\\n\\t\\t\\n\\t}\\n\\t\\n\\t//test case below (dont change):\\n\\tpublic static void main(String[] args){\\n\\t\\tSystem.out.println(sumToX(5)); //15\\n\\t\\tSystem.out.println(sumToX(7)); //28\\n\\t}\\n}\",\"defaultFilePath\":\"Main.java\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"unit_test\",\"title\":\"tests\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void tests() {\\n    Main a = new Main();\\n    \\n    assertEquals(15,a.sumToX(5));\\n    assertEquals(28,a.sumToX(7));\\n    \\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"class Main {\\n\\t\\n\\t{\\n\\t\\t\\n\\t}\\n\\t\\n\\t//test case below (dont change):\\n\\tpublic static void main(String[] args){\\n\\t\\tSystem.out.println(sumToX(5)); //15\\n\\t\\tSystem.out.println(sumToX(7)); //28\\n\\t}\\n}\"],\"t\":1613419079000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16259,
    "title": "Lab06_Problem05: Stock class",
    "prompt_md": "## IMPORTANT: Read the instructions carefully, so as to not miss any steps.\n\n### Instructions:\n\n1.  For this problem, do NOT include _**static**_ in any of your method headers!\n2.  Do not put code in the file Main.java\n3.  You should only put code in Student.java\n4.  You can use Main.java to make Stock objects and test your class if you like. Just make sure no errors are present within your testing code.\n\nWithin Stock.java, do the following:\n\n### Declare the following six **private** data members (and do not assign any values to them):\n\n1.  a String called _tickerSymbol_\n2.  a String called _companyName_\n3.  an int called _price_\n4.  an int called _totalShares_\n5.  a **long** called _marketCap_\n6.  a double called _percentChange_\n\n*   NOTE: the variable names, AND the capitalization, should be **exactly** as shown above\n\n### Write only the one following constructor:\n\n*   a constructor that receives tickerSymbol, companyName, price, and totalShares (it does not receive marketCap and percentChange)\n*   percentChange should default to 0.0\n*   marketCap should be calculated by you within this constructor, and it is the total shares multiplied by the price\n*   NOTE: totalShares x price can result in a VERY LARGE int value, much larger than can be held inside an integer. Thus, marketCap is a long data type. However, even when performing the multiplication, you must cast the result into a long before saving it into marketCap as follows:\n*   marketCap = (long) totalShares \\* price;\n\n_**\\*Important: make sure the values in your constructor are given in the SAME order as shown in the original list of data members above. While not important in theory, this is the only way to confirm your program works and have it tested by the system. So if you want a constructor with make, model, and price, you need to list them in that order exactly...not model, make, and price.**_\n\n### In addition to the accessor and mutator methods, the StoreProduct class should also include the following **two** methods:\n\n1.  public void adjustPrice(int change)\n    *   Parameters: int, change, which represents the increase (or decrease) in the price of the given Stock\n    *   Returns: void\n    *   Description: this method will change the price of the stock by the value in “change” (and change can be positive or negative, thus increase, or decreasing, the price of the stock).\n    *   This method should also recalculate percentChange and marketCap. (percentChange represents the percentage that the price changed)\n    *   Need help at the Math? Here's a link:\n    *   https://www.mathsisfun.com/numbers/percentage-change.html\n2.  public String returnStockToDisplay()\n    *   Paramters: none\n    *   Returns: String\n    *   Description: this method returns a String representation of this object.\n    *   For clarity, imagine if this method were called “printStock”. If you were asked to print out the company name, the ticker sympol, the price and market cap, you would find that task very easy to do! In fact, it's just printing the values of those respective data members.\n    *   Well, this method does basically the same thing. However, instead of printing that data, are you saving all of it into a single String, which you will then return to the caller.\n    *   Want a hint on how to start? Make a String variable, called result, for example, and set that variable equal to the empty String (\"\"). Then, for each line of output below, concatenate to that result String the appropriate data needed for each line. Oh, and be sure to use String.format() to make your life a bit easier!\n    *   WARNING: the returned String must have the EXACT format/look as shown in the samples. (space for space, colon for colon…everything must be identical in order for it to pass the test case).\n\n### Sample Main.java #1\n\n```plaintext\npublic class Main {\n    public static void main(String[] args) {        \n        Stock s = new Stock(\"abc\", \"CarParts.com\", 15, 48090000); // Here we call the one constructor we have\n        System.out.println(s.returnStockToDisplay());             // Here we print the returned String from the returnStockToDisplay() method\n        s.adjustPrice(4);                                         // Here we adjust the price by showing that the stock price increased by 4 dollars\n        System.out.println(s.returnStockToDisplay());             // Here we print the returned String from the returnStockToDisplay() method\n    }\n}\n```\n\n### Corresponding Output #1\n\n```plaintext\nTicker Symbol: abc\nCompany Name:  CarParts.com\nCurrent Price: $15 (0.0%)\nMarket Cap:    $721350000\n\nTicker Symbol: abc\nCompany Name:  CarParts.com\nCurrent Price: $19 (+26.7%)\nMarket Cap:    $913710000\n```\n\n### Sample Main.java #2\n\n```plaintext\npublic class Main {\n    public static void main(String[] args) {\n        Stock s = new Stock(\"NFLX\", \"Netflix Inc\", 504, 4680000);\n        System.out.println(s.returnStockToDisplay());\n        s.adjustPrice(-27);\n        System.out.println(s.returnStockToDisplay());\n    }\n}\n```\n\n### Corresponding Output #2\n\n```plaintext\nTicker Symbol: NFLX\nCompany Name:  Netflix Inc\nCurrent Price: $504 (0.0%)\nMarket Cap:    $235872000000\n\nTicker Symbol: NFLX\nCompany Name:  Netflix Inc\nCurrent Price: $477 (-5.4%)\nMarket Cap:    $223236000000\n```\n\n### Sample Main.java #3\n\n```plaintext\npublic class Main {\n    public static void main(String[] args) {        \n        Stock s = new Stock(\"GME\", \"GameStop Corp.\", 45, 44630000);\n        System.out.println(s.returnStockToDisplay());\n        s.adjustPrice(220);\n        System.out.println(s.returnStockToDisplay());\n    }\n}\n```\n\n### Corresponding Output #3\n\n```plaintext\nTicker Symbol: GME\nCompany Name:  GameStop Corp.\nCurrent Price: $45 (0.0%)\nMarket Cap:    $2008350000\n\nTicker Symbol: GME\nCompany Name:  GameStop Corp.\nCurrent Price: $265 (+488.9%)\nMarket Cap:    $11826950000\n```",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main {\\n    public static void main(String[] args) {\\n\\n        // You *CAN* include code here in your main if you want to test the Dog.java class.\\n        // You can make new Stock objects. You can print things.\\n\\n        // The code here in main will NOT be graded.\\n\\n        // HOWEVER, if any code here in main has an error, that could cause your\\n        // program to fail. So be careful.\\n        \\n    }\\n}\\n\",\"defaultFilePath\":\"\",\"defaultFileType\":\"\",\"extraFiles\":{\"U3RvY2suamF2YQ==\":{\"contents\":\"class Stock {\\n\\t// Data Members:\\n\\t\\n\\t\\n\\t\\n\\t// Constructors:\\n\\n    \\n\\n    // Accessor and Mutator Methods:\\n\\n\\n\\t\\n    // Other Methods:\\n\\n\\n\\n}\",\"language\":\"java\",\"type\":\"\"}}}},\"grading\":{\"testCases\":[{\"type\":\"unit_test\",\"title\":\"Constructor \\u0026 Getters\",\"headline\":\"\",\"points\":15,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n    @Before\\n    public void setUp() {\\n        // Setup code here (if required)\\n    }\\n\\n    @After\\n    public void tearDown() {\\n        // Teardown code here (if required)\\n    }\\n\\n    @Test\\n    public void testDefaultCase() {\\n        Stock s = new Stock(\\\"ABC\\\", \\\"Alphabet\\\", 10, 100);\\n        \\n        assertEquals(\\\"ABC\\\", s.getTickerSymbol());\\n        assertEquals(\\\"Alphabet\\\", s.getCompanyName());\\n        assertEquals(10, s.getPrice());\\n        assertEquals(100, s.getTotalShares());\\n        assertEquals(0, s.getPercentChange(), 0.0001);\\n        assertEquals(1000, s.getMarketCap());\\n    }\\n}\\n\\n\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"This test case tests your constructor and all the getter methods.\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"unit_test\",\"title\":\"Adjust Price\",\"headline\":\"\",\"points\":15,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n    @Before\\n    public void setUp() {\\n        // Setup code here (if required)\\n    }\\n\\n    @After\\n    public void tearDown() {\\n        // Teardown code here (if required)\\n    }\\n\\n    @Test\\n    public void testDefaultCase() {\\n        Stock s = new Stock(\\\"abc\\\",\\\"Alphabet\\\",10,100);\\n\\n        s.adjustPrice(-5);\\n        assertEquals(-50.0, s.getPercentChange(), 0.00001);\\n        assertEquals(500, s.getMarketCap());\\n    }\\n}\\n\\n\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"This test cases tests the adjustPrice() method and confirms that the price, percentChange, and marketCap have all changed accordingly.\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"unit_test\",\"title\":\"Adjust Price 2\",\"headline\":\"\",\"points\":15,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n    @Before\\n    public void setUp() {\\n        // Setup code here (if required)\\n    }\\n\\n    @After\\n    public void tearDown() {\\n        // Teardown code here (if required)\\n    }\\n\\n    @Test\\n    public void testDefaultCase() {\\n        Stock s = new Stock(\\\"abc\\\",\\\"Alphabet\\\",10,100);\\n\\n        s.adjustPrice(-5);\\n        assertEquals(-50.0, s.getPercentChange(), 0.00001);\\n        assertEquals(500, s.getMarketCap());\\n\\n        s.adjustPrice(3);\\n        assertEquals(60.0, s.getPercentChange(), 0.00001);\\n        assertEquals(800, s.getMarketCap());\\n    }\\n}\\n\\n\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"This test cases tests the adjustPrice() method and confirms that the price, percentChange, and marketCap have all changed accordingly.\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"unit_test\",\"title\":\"Test for LONG\",\"headline\":\"\",\"points\":15,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n    @Before\\n    public void setUp() {\\n        // Setup code here (if required)\\n    }\\n\\n    @After\\n    public void tearDown() {\\n        // Teardown code here (if required)\\n    }\\n\\n    @Test\\n    public void testDefaultCase() {\\n        Stock s = new Stock(\\\"NFLX\\\", \\\"Netflix Inc\\\", 515, 4680000);\\n\\n        s.adjustPrice(-21);\\n        assertEquals(-4.0776699, s.getPercentChange(), 0.0001);\\n        assertEquals(2311920000L, (long)s.getMarketCap());\\n    }\\n}\\n\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"This test case makes sure that you have the data type of long working correctly. If you use int instead of long, the marketCap values will print as negative.\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"unit_test\",\"title\":\"returnStockToDisplay\",\"headline\":\"\",\"points\":40,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n    @Before\\n    public void setUp() {\\n        // Setup code here (if required)\\n    }\\n\\n    @After\\n    public void tearDown() {\\n        // Teardown code here (if required)\\n    }\\n\\n    @Test\\n    public void testDefaultCase() {\\n        Stock s = new Stock(\\\"abc\\\",\\\"Alphabet\\\",10,100);\\n\\n        String result = \\\"\\\";\\n        result += \\\"Ticker Symbol: abc\\\\n\\\";\\n        result += \\\"Company Name:  Alphabet\\\\n\\\";\\n        result += \\\"Current Price: $10 (0.0%)\\\\n\\\";\\n        result += \\\"Market Cap:    $1000\\\\n\\\";\\n\\n        assertEquals(result, s.returnStockToDisplay());\\n    }\\n}\\n\\n\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main {\\n    public static void main(String[] args) {\\n\\n        // You *CAN* include code here in your main if you want to test the Dog.java class.\\n        // You can make new Stock objects. You can print things.\\n\\n        // The code here in main will NOT be graded.\\n\\n        // HOWEVER, if any code here in main has an error, that could cause your\\n        // program to fail. So be careful.\\n        \\n    }\\n}\\n\",\"defaultFilePath\":\"\",\"defaultFileType\":\"\",\"extraFiles\":{\"U3RvY2suamF2YQ==\":{\"contents\":\"class Stock {\\n\\t// Data Members\\n\\tprivate String tickerSymbol;\\n\\tprivate String companyName;\\n\\tprivate int price;\\n\\tprivate int totalShares;\\n\\tprivate long marketCap;\\n\\tprivate double percentChange;\\n\\n\\t// Constructors\\n\\tpublic Stock(String tickerSymbol, String companyName, int price, int totalShares) {\\n\\t\\tthis.tickerSymbol = tickerSymbol;\\n\\t\\tthis.companyName = companyName;\\n\\t\\tthis.price = price;\\n\\t\\tthis.totalShares = totalShares;\\n\\t\\tthis.percentChange = 0;\\n\\t\\tthis.marketCap = (long) totalShares * price;\\n\\t}\\n\\n\\t// Accessor \\u0026 Mutator Methods not needed for this class\\n\\tpublic String getTickerSymbol() {\\n\\t\\treturn tickerSymbol;\\n\\t}\\n\\n\\tpublic void setTickerSymbol(String tickerSymbol) {\\n\\t\\tthis.tickerSymbol = tickerSymbol;\\n\\t}\\n\\n\\tpublic String getCompanyName() {\\n\\t\\treturn companyName;\\n\\t}\\n\\n\\tpublic void setCompanyName(String companyName) {\\n\\t\\tthis.companyName = companyName;\\n\\t}\\n\\n\\tpublic int getPrice() {\\n\\t\\treturn price;\\n\\t}\\n\\n\\tpublic void setPrice(int price) {\\n\\t\\tthis.price = price;\\n\\t}\\n\\n\\tpublic int getTotalShares() {\\n\\t\\treturn totalShares;\\n\\t}\\n\\n\\tpublic void setTotalShares(int totalShares) {\\n\\t\\tthis.totalShares = totalShares;\\n\\t}\\n\\n\\tpublic long getMarketCap() {\\n\\t\\treturn marketCap;\\n\\t}\\n\\n\\tpublic void setMarketCap(long marketCap) {\\n\\t\\tthis.marketCap = marketCap;\\n\\t}\\n\\n\\tpublic double getPercentChange() {\\n\\t\\treturn percentChange;\\n\\t}\\n\\n\\tpublic void setPercentChange(double percentChange) {\\n\\t\\tthis.percentChange = percentChange;\\n\\t}\\n\\n\\t// Other Methods\\n\\tpublic void adjustPrice(int change) {\\n\\t\\tint diff = (price + change) - price; //price - change;\\n\\n\\t\\tpercentChange = (1.0 * diff / price) * 100;\\n\\t\\tprice += change;\\n\\n\\t\\tmarketCap = (long) totalShares * price;\\n\\t}\\n\\n\\tpublic String returnStockToDisplay() {\\n\\t\\tString result = \\\"\\\";\\n\\t\\tString plusminus = \\\"\\\";\\n\\n\\t\\tif (percentChange \\u003e 0) {\\n\\t\\t\\tplusminus = \\\"+\\\";\\n\\t\\t}\\n\\n\\t\\tresult += String.format(\\\"Ticker Symbol: %s\\\\n\\\", tickerSymbol);\\n\\t\\tresult += String.format(\\\"Company Name:  %s\\\\n\\\", companyName);\\n\\t\\tresult += String.format(\\\"Current Price: $%d (%s%.1f%%)\\\\n\\\", price, plusminus, percentChange);\\n\\t\\tresult += String.format(\\\"Market Cap:    $%d\\\\n\\\", marketCap);\\n\\n\\t\\treturn result;\\n\\t}\\n}\\n\",\"language\":\"java\",\"type\":\"\"}}}},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{\"mirhvcciphtykpkm\":{\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"\"],\"t\":1616118590000}},\"language\":\"java\",\"path\":\"Stock.java\",\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"class Main \\n{\\n\\tpublic static void main(String[] args) \\n\\t{\\n\\t\\t\\n\\t}\\n}\"],\"t\":1616118590000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16260,
    "title": "Lab01_Problem15: String Methods Practice 2",
    "prompt_md": "Given three variables:\n\n```plaintext\nString str\nint start\nint end\n```\n\nPrint out the following string:\n\nThe substring of (str) from (start) to (end) is (substring from start to end, inclusive)\n\n### Sample Input:\n\n```plaintext\nlolwut\n2\n4 \n```\n\n### Sample output:\n\n```plaintext\nThe substring of lolwut from 2 to 4 inclusive is lwu\n```\n\nPLEASE NOTE that we are counting the end index in our output!\n\n```plaintext\nlolwut\n012345\n```",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"import java.util.Scanner;\\n\\nclass Main {\\n  public static void main(String[] args) {\\n  \\tScanner in = new Scanner(System.in);\\n\\n  \\tString str = in.nextLine();\\n  \\tint start = in.nextInt();\\n  \\tint end = in.nextInt();\\n\\n    // Don't change the code above! Write your code below\\n\\n    \\n    \\n    \\n  }\\n}\",\"defaultFilePath\":\"\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"stdout\",\"title\":\"memelord\",\"headline\":\"\",\"points\":33,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"The substring of memelord from 3 to 6 inclusive is elor\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"memelord\\n3\\n6\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"i like to eat cheese\",\"headline\":\"\",\"points\":33,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"The substring of i like to eat cheese from 10 to 19 inclusive is eat cheese\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"i like to eat cheese\\n10\\n19\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"lolwut\",\"headline\":\"\",\"points\":34,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"The substring of lolwut from 2 to 4 inclusive is lwu\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"lolwut\\n2\\n4\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"import java.util.Scanner;\\n\\nclass Main {\\n  public static void main(String[] args) {\\n  \\tScanner inp = new Scanner(System.in);\\n  \\tSystem.out.print(\\\"In:\\\");\\n  \\tString str = inp.nextLine();\\n  \\tSystem.out.print(\\\"Start:\\\");\\n  \\tint start = inp.nextInt();\\n  \\tSystem.out.print(\\\"End:\\\");\\n  \\tint end = inp.nextInt();\\n    // Don't change the code above! Write your code below\\n    \\n    \\n  }\\n}\"],\"t\":1612370100000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16261,
    "title": "Lab01_Problem28: Pluralizer Program",
    "prompt_md": "Two horses. Five monkeys. Twenty flies. One cat. Nine lives. Despite the English language being one of the most commonly used languages around the world, it is also quite complicated to learn if you are not a native speaker. Taking a noun and converting it to its plural form has a dozen rules and even more special cases.\n\nIn this project, you will be creating a program that takes a given non-negative integer and a given singular noun as a String. You will have to print out the number, followed by the string in its plural form (unless the number is 1).\n\nThe given inputs are:\n\n```plaintext\nint qty;\nString word;\n```\n\nFor example, let's say your inputs are as follows:\n\n```plaintext\n4\napple\n```\n\nYour program should print out \"4 apples\"\n\n```plaintext\n0\napple\n```\n\nYour program should print out \"0 apples\"\n\n```plaintext\n1\napple\n```\n\nYour program should print out \"1 apple\" Be prepared to handle the following rules:\n\n![](http://i.imgur.com/YMmuunE.png)\n\nNote that in order to handle cases where the word ends in “y” correctly, you will need to take some care. It is important that you order your conditions so that your code will check for the special case endings of “ay”, “oy”, “ey”, and “uy” before simply checking whether a word ends in “y”.",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"import java.util.Scanner;\\n\\nclass Main {\\n  public static void main(String[] args) {\\n    Scanner in = new Scanner(System.in);\\n\\n    int qty = in.nextInt(); // Here we read the quantity\\n    in.nextLine();         // this line is necessary to CONSUME the hanging newline character\\n\\n    String word = in.nextLine(); // Here we read the entire line (becasue some lines include multiple words)\\n\\n    // DO NOT touch the code above, write your code below:\\n    \\n    \\n  }\\n}\",\"defaultFilePath\":\"\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"stdout\",\"title\":\"9001 power levels\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"9001 power levels\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"9001\\npower level\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"9 dishes\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"9 dishes\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"9\\ndish\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"5 guys\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"5 guys\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"5\\nguy\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"6 trays\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"6 trays\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"6\\ntray\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"9 hippopotami\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"9 hippopotami\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"9\\nhippopotamus\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"1 pizza\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"1 pizza\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"1\\npizza\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"3 toys\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"3 toys\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"3\\ntoy\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"8 buoys\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"8 buoys\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"8\\nbuoy\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"99 knives\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"99 knives\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"99\\nknife\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"0 tries\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"0 tries\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"0\\ntry\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"10 grapes\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"10 grapes\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"10\\ngrape\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"2 apples\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"2 apples\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"2\\napple\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"5 churches\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"5 churches\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"5\\nchurch\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"import java.util.Scanner;\\n\\nclass Main {\\n  public static void main(String[] args) {\\n    Scanner inp = new Scanner(System.in);\\n    System.out.print(\\\"# in:\\\");\\n    int amt = inp.nextInt();\\n    inp.nextLine(); //this line is necessary\\n    System.out.print(\\\"word:\\\");\\n    String word = inp.nextLine();\\n    //leave the above unedited, write your code below:\\n    \\n    \\n  }\\n}\"],\"t\":1612455730000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16262,
    "title": "Lab01_Problem14: String Methods Practice 1",
    "prompt_md": "\nGiven a String (already declared for you as str), do the following:\n\n* Print out the following: \"The first 3 letters of ___ is ___\"\n\n\n\nFor example, if the input is \"banana\", your output should be \"The first 3 letters of banana is ban\"\n\n\n\n\n\n",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"import java.util.Scanner;\\n\\nclass Main {\\n  public static void main(String[] args) {\\n  \\tScanner in = new Scanner(System.in);\\n\\n  \\tString str = in.nextLine();\\n      \\n    // Don't change the code above! Write your code below\\n    \\n  }\\n}\",\"defaultFilePath\":\"\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"stdout\",\"title\":\"dog\",\"headline\":\"\",\"points\":33,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"the first 3 letters of dog is dog\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"dog\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"blueberry\",\"headline\":\"\",\"points\":34,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"the first 3 letters of blueberry is blu\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"blueberry\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"banana\",\"headline\":\"\",\"points\":33,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"the first 3 letters of banana is ban\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"banana\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"import java.util.Scanner;\\n\\nclass Main {\\n  public static void main(String[] args) {\\n  \\tScanner inp = new Scanner(System.in);\\n  \\tSystem.out.print(\\\"In:\\\");\\n  \\tString str = inp.nextLine();\\n    // Don't change the code above! Write your code below\\n    \\n  }\\n}\"],\"t\":1612369975000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16263,
    "title": "Lab02_Problem02: For Loops 2",
    "prompt_md": "Write a for loop that will print out the numbers starting at 0 and ending at twice the end number exclusive. Each number should be on the same line, separated by a space.\n\n### Sample Input #1\n\n```plaintext\n5\n```\n\n### Sample Output #1\n\n```plaintext\n0 1 2 3 4 5 6 7 8 9\n```\n\n###  Sample Input #2\n\n```plaintext\n10\n```\n\n### Sample Output #2\n\n```plaintext\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\n```\n\n###  Sample Input #3\n\n```plaintext\n-5\n```\n\n### Sample Output #3\n\n(no output)",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"import java.util.Scanner;\\n\\nclass Main {\\n    public static void main(String[] args) {\\n        Scanner in = new Scanner(System.in);\\n\\n        int end = in.nextInt();\\n        //write your code below\\n\\n\\n    }\\n}\",\"defaultFilePath\":\"\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"stdout\",\"title\":\"-4\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"-4\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"8\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"8\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"5\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"0 1 2 3 4 5 6 7 8 9\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"5\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"3\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"0 1 2 3 4 5\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"3\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"import java.util.Scanner;\\n\\nclass Main {\\n  public static void main(String[] args) {\\n    Scanner inp = new Scanner(System.in);\\n    System.out.print(\\\"In: \\\");\\n    int end = inp.nextInt();\\n    //write your code below\\n    \\n    \\n  }\\n}\"],\"t\":1612811809000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16264,
    "title": "Lab04_Problem06: Alter Arrays",
    "prompt_md": "\nComplete the mystery method so that it takes in an integer array as a parameter, and then modifies each element based on whether it's even or odd.  If the number is even, divide it by 2.  If it's odd, multiply it by 10.\n\n\n\n",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main\\n{\\n\\tpublic static void main(String[] args)\\n\\t{\\n\\t\\tint[] a = {1,2,3,4,5};\\n\\t\\tmystery(a);\\n\\t\\tfor(int e : a)\\n\\t\\t{\\n\\t\\t\\tSystem.out.print(e + \\\" \\\");\\n\\t\\t}\\n\\t\\t// should print out 10 1 30 2 50\\n\\t}\\n\\tpublic static void mystery(int[] array)\\n\\t{\\n\\t\\t\\n\\t}\\n}\",\"defaultFilePath\":\"Main.java\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"unit_test\",\"title\":\"tests\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\nimport org.junit.Assert;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void tests() {\\n    int[] a = {1,2,3,4,5};\\n    int[] b = {6,2,73,5,1,6};\\n    Main.mystery(a);\\n    Main.mystery(b);\\n    Assert.assertArrayEquals(new int[] {10,1,30,2,50},a);\\n    Assert.assertArrayEquals(new int[] {3,1,730,50,10,3},b);\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"class Main\\n{\\n\\tpublic static void main(String[] args)\\n\\t{\\n\\t\\tint[] a = {1,2,3,4,5};\\n\\t\\tmystery(a);\\n\\t\\tfor(int e : a)\\n\\t\\t{\\n\\t\\t\\tSystem.out.print(e + \\\" \\\");\\n\\t\\t}\\n\\t\\t// should print out 10 1 30 2 50\\n\\t}\\n\\tpublic static void mystery(int[] array)\\n\\t{\\n\\t\\t\\n\\t}\\n}\"],\"t\":1614275012000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16265,
    "title": "104 - AL2 - ArrayList Methods - Add",
    "prompt_md": "\nWe will be manipulating elements of an ArrayList by using List methods.\n\n\n\nThe first List method we will learn is .add()\n\n\n\nThe following code will take an ArrayList of Strings called strs and add \"Hello\" to it.\n\n```\nstr.add(\"Hello\");\n```\n\n\n\nThe syntax follows something like:\n\n```\narraylistvariable.add(data to add);\n```\n\n\n\nIn the space to the left, add three names (any names) to the ArrayList called names.\n\n\n\n",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"import java.util.ArrayList;\\n\\nclass Main\\n{\\n\\tpublic static ArrayList\\u003cString\\u003e test()\\n\\t{\\n\\t\\tArrayList\\u003cString\\u003e names = new ArrayList\\u003cString\\u003e();\\n\\t\\t//write code below\\n\\t\\t\\n\\t\\t\\n\\t\\t//leave below code alone\\n\\t\\treturn names;\\n\\t}\\n}\",\"defaultFilePath\":\"Main.java\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"unit_test\",\"title\":\"tests\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\nimport java.util.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void tests() {\\n    ArrayList\\u003cString\\u003e x = Main.test();\\n    assertEquals(3,x.size());\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null}}"
  },
  {
    "id": 16266,
    "title": "Lab06_Problem02: Dog class",
    "prompt_md": "## IMPORTANT: Read the instructions carefully, so as to not miss any steps.\n\nInstructions:\n\n1.  For this problem, do NOT include _**static**_ in any of your method headers!\n2.  Do not put code in the file Main.java\n3.  You should only put code in Student.java\n4.  You can use Main.java to make Dog objects and test your class if you like. Just make sure no errors are present within your testing code.\n\nWithin Dog.java, do the following:\n\nDeclare the following **private** data members (and do not assign any values to them):\n\n*   a String called _name_\n*   a String called _breed_\n*   an int called _weight_\n\nWrite the **three accessor** (getter) methods and the **three mutator** (setter) methods.\n\n*   Be very careful that you use the EXACT naming conventions shown in class\n*   For example, if a data member variable is called _**grade**_\n*   The accessor (getter) method should be called _**getGrade**_\n*   The mutator (setter) method should be called _**setGrade**_\n*   Pay attention to the style of the capitalization\n*   Your program will not pass the test cases if your style is different than the above example.\n\nWrite **three constructors**:\n\n1.  the default, no-argument constructor (the one with no parameters)\n2.  a second constructor that takes in only _name_ and _weight_ (Breed defaults to \"**Mutt**\")\n3.  a third constructor that takes in all three parameters\n\nTest your code with the Main.java class by creating a Dog object using all three Constructors and print their fields/states to make sure it's correct.",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main {\\n    public static void main(String[] args) {\\n\\n        // You *CAN* include code here in your main if you want to test the Dog.java class.\\n        // You can make new Dog objects. You can print things.\\n\\n        // The code here in main will NOT be graded.\\n\\n        // HOWEVER, if any code here in main has an error, that could cause your\\n        // program to fail. So be careful.\\n        \\n    }\\n}\\n\",\"defaultFilePath\":\"\",\"defaultFileType\":\"\",\"extraFiles\":{\"RG9nLmphdmE=\":{\"contents\":\"class Dog {\\n\\t// Data Members:\\n\\t\\n\\t\\n\\n\\t\\n\\t// Constructors:\\n\\t\\n    \\n\\n\\n    // Accessor and Mutator Methods:\\n\\n\\n\\t\\n}\",\"language\":\"java\",\"type\":\"\"}}}},\"grading\":{\"testCases\":[{\"type\":\"unit_test\",\"title\":\"default constructor\",\"headline\":\"\",\"points\":33,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n    @Before\\n    public void setUp() {\\n        // Setup code here (if required)\\n    }\\n\\n    @After\\n    public void tearDown() {\\n        // Teardown code here (if required)\\n    }\\n\\n    @Test\\n    public void testDefaultCase() {\\n        // You may rename this method to better suit the purpose of your test case\\n        // Your test case logic here\\n        Dog d1 = new Dog();\\n\\n        d1.setName(\\\"Shelby\\\");\\n        d1.setBreed(\\\"Mutt\\\");\\n        d1.setWeight(35);\\n\\n        assertEquals(\\\"Shelby\\\", d1.getName());\\n        assertEquals(\\\"mutt\\\", d1.getBreed().toLowerCase());\\n        assertEquals(35, d1.getWeight());        \\n    }\\n}\\n\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"unit_test\",\"title\":\"3 param constructor\",\"headline\":\"\",\"points\":33,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n    @Before\\n    public void setUp() {\\n        // Setup code here (if required)\\n    }\\n\\n    @After\\n    public void tearDown() {\\n        // Teardown code here (if required)\\n    }\\n\\n    @Test\\n    public void testDefaultCase() {\\n        // You may rename this method to better suit the purpose of your test case\\n        // Your test case logic here\\n        Dog d1 = new Dog(\\\"Charlie\\\",\\\"Laborador\\\",60);\\n        \\n        assertEquals(\\\"Charlie\\\",d1.getName());\\n        assertEquals(\\\"Laborador\\\",d1.getBreed());\\n        assertEquals(60, d1.getWeight());\\n    }\\n}\\n\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"unit_test\",\"title\":\"2 param constructor\",\"headline\":\"\",\"points\":34,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n    @Before\\n    public void setUp() {\\n        // Setup code here (if required)\\n    }\\n\\n    @After\\n    public void tearDown() {\\n        // Teardown code here (if required)\\n    }\\n\\n    @Test\\n    public void testDefaultCase() {\\n        // You may rename this method to better suit the purpose of your test case\\n        // Your test case logic here\\n        Dog d1 = new Dog(\\\"Doggo\\\", 30);\\n\\n        assertEquals(\\\"Doggo\\\", d1.getName());\\n        assertEquals(\\\"mutt\\\", d1.getBreed().toLowerCase());\\n        assertEquals(30, d1.getWeight());        \\n    }\\n}\\n\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main {\\n  public static void main(String[] args) {\\n\\n      // You *CAN* include code here in your main if you want to test the Dog.java class.\\n      // You can make new Dog objects. You can print things.\\n\\n      // The code here in main will NOT be graded.\\n\\n      // HOWEVER, if any code here in main has an error, that could cause your\\n      // program to fail. So be careful.\\n    \\n  }\\n}\\n\",\"defaultFilePath\":\"\",\"defaultFileType\":\"\",\"extraFiles\":{\"RG9nLmphdmE=\":{\"contents\":\"class Dog {\\n\\t// Data Members:\\n\\tprivate String name;\\n    private String breed;\\n\\tprivate int weight;\\n\\t\\n\\t// Constructors:\\n\\tpublic Dog() {\\n    }\\n    public Dog(String name, int weight) {\\n        this.name = name;\\n        this.breed = \\\"Mutt\\\";\\n        this.weight = weight;\\n    }\\n    public Dog(String name, String breed, int weight) {\\n        this.name = name;\\n        this.breed = breed;\\n        this.weight = weight;\\n    }\\n\\n    // Accessor and Mutator Methods:\\n    public String getName() {\\n        return name;\\n    }\\n    public String getBreed() {\\n        return breed;\\n    }\\n    public int getWeight() {\\n        return weight;\\n    }\\n    public void setName(String name) {\\n        this.name = name;\\n    }\\n    public void setBreed(String breed) {\\n        this.breed = breed;\\n    }\\n    public void setWeigt(int weight) {\\n        this.weight = weight;\\n    }\\n\\t\\n}\\n\",\"language\":\"java\",\"type\":\"\"}}}},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{\"mvkapvvcpfysgfmi\":{\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"class Dog {\\n\\t// Variables Here\\n\\t\\n\\t\\n\\t\\n\\t// Constructors Here\\n\\t\\n\\t\\n}\"],\"t\":1616094128000}},\"language\":\"java\",\"path\":\"Dog.java\",\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"class Main {\\n  public static void main(String[] args) {\\n    \\n  }\\n}\\n\"],\"t\":1616094128000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16267,
    "title": "Lab01_Problem16: Conditional Statement Practice 1",
    "prompt_md": "The variable \"num\" holds an integer user input  \nWrite a conditional statement starting on line 9 that does the following:\n\n*   If num is positive, print \"\\_\\_ is positive\"\n*   If num is negative, print \"\\_\\_ is negative\"\n*   if num is zero, print “\\_\\_ is zero”\n\n### Sample Input #1\n\n```plaintext\n5\n```\n\n### Sample Output #1\n\n```plaintext\n5 is positive\n```\n\n### Sample Input #2\n\n```plaintext\n-2\n```\n\n### Sample Output #2\n\n```plaintext\n-2 is negative\n```",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"import java.util.Scanner;\\n\\nclass Main {\\n  public static void main(String[] args) {\\n  \\tScanner in = new Scanner(System.in);\\n  \\tint num = in.nextInt();\\n      \\n  \\t//DO NOT CHANGE ABOVE CODE!  Write your code below\\n  \\t\\n  \\t\\n  }\\n}\",\"defaultFilePath\":\"\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"stdout\",\"title\":\"zero\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"0 is zero\\r\\n\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"0\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"pos\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"5 is positive\\n\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"5\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"neg\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"-102 is negative\\n\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"-102\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"import java.util.Scanner;\\n\\nclass Main {\\n  public static void main(String[] args) {\\n  \\tScanner in = new Scanner(System.in);\\n  \\tint num = in.nextInt();\\n      \\n  \\t//DO NOT CHANGE ABOVE CODE!  Write your code below\\n    if (num \\u003e 0) {\\n        System.out.println(num + \\\" is positive\\\");\\n    }\\n    else if (num \\u003c 0) {\\n        System.out.println(num + \\\" is negative\\\");\\n    }\\n    else {\\n        System.out.println(num + \\\" is zero\\\");\\n    }\\n  \\t\\n  \\t\\n  }\\n}\",\"defaultFilePath\":\"\",\"extraFiles\":{}}},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"import java.util.Scanner;\\n\\nclass Main {\\n  public static void main(String[] args) {\\n  \\tScanner inp = new Scanner(System.in);\\n  \\tSystem.out.print(\\\"In:\\\");\\n  \\tint num = inp.nextInt();\\n  \\t//DO NOT CHANGE ABOVE CODE!  Write your code below\\n  \\t\\n  \\t\\n  }\\n}\"],\"t\":1612408089000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16268,
    "title": "Lab04_Problem12: Printing Arrays Practice 4",
    "prompt_md": "\nThe code provided in your main method will take in five integers and save them into an array called arr.  Print out the contents of arr in REVERSE order, one per line.\n\n\n\nHint: You'll need a traditional for loop.  What index do you want to start printing at?  Which index do you want to end at?\n\n\n\n",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"import java.util.Scanner;\\nclass Main\\n{\\n\\tpublic static void main(String[] args)\\n\\t{\\n\\t\\tScanner input = new Scanner(System.in);\\n\\t\\tint[] arr = new int[5];\\n\\t\\tfor (int i=0;i\\u003c5;i++)\\n\\t\\t{\\n\\t\\t\\tarr[i] = input.nextInt();\\n\\t\\t}\\n\\t\\t//leave above alone!  write your code below\\n\\t\\t\\n\\t\\t\\n\\t}\\n}\",\"defaultFilePath\":\"Main.java\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"stdout\",\"title\":\"test 2\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"13\\n73\\n1\\n943\\n9\",\"stdoutCompareMethod\":\"equals\",\"stdin\":\"9 943 1 73 13\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"test 1\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"2\\n2\\n8\\n4\\n6\",\"stdoutCompareMethod\":\"equals\",\"stdin\":\"6 4 8 2 2\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"import java.util.Scanner;\\nclass Main\\n{\\n\\tpublic static void main(String[] args)\\n\\t{\\n\\t\\tScanner input = new Scanner(System.in);\\n\\t\\tint[] arr = new int[5];\\n\\t\\tfor (int i=0;i\\u003c5;i++)\\n\\t\\t{\\n\\t\\t\\tarr[i] = input.nextInt();\\n\\t\\t}\\n\\t\\t//leave above alone!  write your code below\\n\\t\\t\\n\\t\\t\\n\\t}\\n}\"],\"t\":1614276075000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16269,
    "title": "Lab07_Problem04: Deck of Cards",
    "prompt_md": "## IMPORTANT: Read the instructions carefully, so as to not miss any steps.\n\nInstructions:\n\n1.  You should only put code in Card.java and Deck.java\n2.  For this problem, Main.java is once again NOT being graded. Thus, you can use it to test your objects.\n3.  As always, if you put code in Main.java, do make sure it is free from errors, because even though Main.java is not being graded, it can cause you to fail test cases if it has compile or runtime errors in the code.\n\n## Within Card.java, do the following:\n\n### Declare the following three private data members:\n\n1.  a String called name\n2.  a String called suit\n3.  an int called value\n    *   NOTE: the variable names, AND the capitalization, should be **exactly** as shown above\n\n### Write one constructor:\n\n1.  a constructor that receives all data members values as parameters\n    *   within this constructor, you should simply save the three parameters into their respective data members\n\n### Write **all accessor** (getter) methods and ONLY ONE **mutator** (setter) methods.\n\n*   Write the three getter methods\n*   Write one setter method, setValue(). There is no need to make a setter method for name/suit\n*   Be very careful that you use the EXACT naming conventions shown in class\n*   Your program will not pass the test cases if your style is different than the styles shown in class.\n\n### Your class should also include the following method:\n\n1.  **public String toString()**\n    *   Parameters: none\n    *   Returns: String\n    *   Description: this is a toString() method, which should return a String representation of the given Card.\n    *   Assume the name of a given card was 7 and also assume the card was also from the suit of Hearts. The toString() method should return:\n    *   “7 of Hearts”\n    *   Assume the name of a given card was Queen and also assume the card was also from the suit of Diamonds. The toString() method should return:\n    *   “Queen of Diamonds”\n\n## Within Deck.java, do the following:\n\n### Declare the following **private** data member:\n\n1.  an array of Card object reference variables called _cards_\n\n*   Card\\[\\] cards;\n*   NOTE: the variable names, AND the capitalization, should be **exactly** as shown above\n\n### Write one **constructor**:\n\n1.  this singular constructor receives no parameters\n    *   In summary, this constructor will make the deck of 52 cards\n    *   How?\n    *   Firstly, you should actually create the array of size 52:\n    *   cards = new Card\\[52\\];\n    *   Now you have an array, of size 52, of REFERENCES that all currently point to null.\n    *   You need to populate this array with the cards, thus making each of those 52 individual references point to a new Card object\n    *   There are 13 cards for each suit:\n    *   The first 13 cards in the array MUST be Clubs (from index 0 to 12), followed by 13 Diamonds (from index 13 to 25), followed by 13 Hearts (from index 26 to 38), and then followed by 13 Spades (from index 39 to 51)\n    *   Within each suit, the 2 through 10 must be made and added to the array first, followed by the Jack, Queen, King, and Ace (see example of toString() method below to see exact order of the cards when printing before being shuffled).\n    *   How you make this happen is up to you. You could choose to write 52 individual lines of code, where each line is explicitly making a new Card object with the exact name and suit you need, and saving that Card object into the appropriate index of the cards\\[\\] array.\n    *   That obviously gets unwieldy!\n    *   Suggestion: have a for loop that loops from 2 to 10 (inclusive) and creates those cards. Then after that loop, you still need to create the Jack, Queen, King, and Ace. Once done, you have created 13 Card objects of one suit. So now do that three more times!\n    *   FINAL NOTE: when making the 52 Card objects, remember that you will invoke the three-parameter constructor, which expects a String name, a String suit, and then the value. **You should send over a zero for the initial value of each new Card you create.**\n\n### Do NOT write any accessor or mutator methods\n\n### Your class should also include the following methods:\n\n1.  **public Card draw()**\n    *   Parameters: none\n    *   Returns: a reference to a Card object\n    *   Description: this method simply returns a reference to the Card object at index 0 of the deck\n    *   This is really a one-liner!\n    *   you simply return the value at index 0 of the cards\\[\\] array\n2.  **public void shuffle()**\n    *   Parameters: none\n    *   Returns: void\n    *   Description: this method simulates one “shuffle” of the deck of cards\n    *   Details:\n        *   The first two lines of code within this method should be as follows:\n        *   Random rng = new Random();\n        *   rng.setSeed(2290);\n        *   The purpose of the seed is to make sure your shuffle works exactly as the expected shuffle/output\n        *   How does this shuffle work?\n        *   Remember, the deck is an array of “Cards”, which each index of the array stores an ADDRESS to a Card object\n        *   You should have a for loop that iterates exactly 52 times…over the deck of 52 Card addresses/references\n        *   For EACH iteration of this loop you do the following:\n            *   you should generate two random index numbers (from 0 to 51, inclusive)\n            *   you then SWAP the contents at those two indices\n            *   Let us assume the two generated indices are 43 and 19.\n            *   Thus, you need to SWAP the address stored at index 43 of the cards\\[\\] array with the address stored at index 19 of the cards\\[\\] array.\n            *   This swap is the famous 3 lines of code we've used several times over the semester.\n            *   The DIFFERENCE here is to recognize what the data type is of the contents you are swapping, as this data type is needed to make the “temp” variable used for swapping.\n3.  **public String toString()**\n    *   Parameters: none\n    *   Returns: String\n    *   Description: this is a toString() method, which should return a String representation of the given deck.\n    *   Please see examples below to see EXACTLY how this returned String should look.\n    *   This singular String will contain 53 lines of text: one header line, followed by one line of text for each Card, where the line of text for that specific card is the toString() of the Card class.\n    *   For this, yes, you can in fact make a loop that iterates 52 times, over the length of the cards\\[\\] array.\n    *   For each iteration, you simply concatenate the toString() of that particular Card object.\n    *   WARNING: the returned String must have the EXACT format/look as shown in the samples. (space for space, colon for colon…everything must be identical in order for it to pass the test case).\n\n_**\\*Important: make sure the values in your constructor are given in the SAME order as shown in the original list of data members above. While not important in theory, this is the only way to confirm your program works and have it tested by the system. So if you want a constructor with make, model, and price, you need to list them in that order exactly...not model, make, and price.**_\n\n### Sample Main.java #1\n\n```plaintext\npublic class Main {\n    public static void main(String[] args) {\n        Deck d = new Deck();\n        System.out.println(d);\n    }\n}\n```\n\n### Corresponding Output #1\n\n```plaintext\nThe Deck of Cards:\n2 of Clubs\n3 of Clubs\n4 of Clubs\n5 of Clubs\n6 of Clubs\n7 of Clubs\n8 of Clubs\n9 of Clubs\n10 of Clubs\nJack of Clubs\nQueen of Clubs\nKing of Clubs\nAce of Clubs\n2 of Diamonds\n3 of Diamonds\n4 of Diamonds\n5 of Diamonds\n6 of Diamonds\n7 of Diamonds\n8 of Diamonds\n9 of Diamonds\n10 of Diamonds\nJack of Diamonds\nQueen of Diamonds\nKing of Diamonds\nAce of Diamonds\n2 of Hearts\n3 of Hearts\n4 of Hearts\n5 of Hearts\n6 of Hearts\n7 of Hearts\n8 of Hearts\n9 of Hearts\n10 of Hearts\nJack of Hearts\nQueen of Hearts\nKing of Hearts\nAce of Hearts\n2 of Spades\n3 of Spades\n4 of Spades\n5 of Spades\n6 of Spades\n7 of Spades\n8 of Spades\n9 of Spades\n10 of Spades\nJack of Spades\nQueen of Spades\nKing of Spades\nAce of Spades\n```\n\n### Sample Main.java #2\n\n```plaintext\npublic class Main {\n    public static void main(String[] args) {\n        Deck d = new Deck();\n        System.out.println(d.draw().toString());\n    }\n}\n```\n\n### Corresponding Output #2\n\n```plaintext\n2 of Clubs\n```\n\n### Sample Main.java #3\n\n```plaintext\npublic class Main {\n    public static void main(String[] args) {\n        Deck d = new Deck();;\n        d.shuffle();\n\n        System.out.println(d);\n        System.out.println(d.draw().toString());\n    }\n}\n```\n\n### Corresponding Output #3\n\n```plaintext\nThe Deck of Cards:\n8 of Spades\n4 of Spades\n2 of Spades\n10 of Clubs\nQueen of Spades\n7 of Spades\n2 of Diamonds\n10 of Diamonds\n5 of Clubs\n5 of Diamonds\nQueen of Clubs\n10 of Spades\nAce of Clubs\nKing of Spades\nJack of Spades\n9 of Hearts\n3 of Spades\n6 of Diamonds\nJack of Diamonds\nQueen of Hearts\n5 of Hearts\n6 of Clubs\nAce of Hearts\n7 of Clubs\n3 of Diamonds\n4 of Diamonds\n8 of Diamonds\n9 of Clubs\n10 of Hearts\n6 of Hearts\n2 of Clubs\n8 of Hearts\n4 of Clubs\n8 of Clubs\n3 of Clubs\nJack of Hearts\nJack of Clubs\n9 of Diamonds\n7 of Diamonds\nKing of Diamonds\nKing of Clubs\n5 of Spades\nQueen of Diamonds\nAce of Diamonds\n6 of Spades\n4 of Hearts\n2 of Hearts\n7 of Hearts\n9 of Spades\nKing of Hearts\n3 of Hearts\nAce of Spades\n\n8 of Spades\n```",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main {\\n    public static void main(String[] args) {\\n\\n        // You *CAN* include code here in your main if you want to test the Dog.java class.\\n        // You can make new Dog objects. You can print things.\\n\\n        // The code here in main will NOT be graded.\\n\\n        // HOWEVER, if any code here in main has an error, that could cause your\\n        // program to fail. So be careful.\\n        \\n    }\\n}\\n\",\"defaultFilePath\":\"\",\"defaultFileType\":\"\",\"extraFiles\":{\"Q2FyZC5qYXZh\":{\"contents\":\"class Card {\\n\\t// Data Members:\\n\\t\\n\\n\\t\\n\\t// Constructors:\\n\\t\\n\\n\\n    // Accessor and Mutator Methods:\\n\\n\\n\\n    // Other Methods\\n\\n    \\n\\t\\n}\",\"language\":\"java\",\"type\":\"\"},\"RGVjay5qYXZh\":{\"contents\":\"class Deck {\\n\\t// Data Members:\\n\\t\\n\\n\\t\\n\\t// Constructor:\\n\\n\\n\\n    // Other Methods\\n\\n    \\n\\t\\n}\",\"language\":\"java\",\"type\":\"\"}}}},\"grading\":{\"testCases\":[{\"type\":\"unit_test\",\"title\":\"Deck Constructor\",\"headline\":\"\",\"points\":1,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n    @Before\\n    public void setUp() {\\n        // Setup code here (if required)\\n    }\\n\\n    @After\\n    public void tearDown() {\\n        // Teardown code here (if required)\\n    }\\n\\n    @Test\\n    public void testDefaultCase() {\\n        Deck d = new Deck();\\n        String s = \\\"The Deck of Cards:\\\\n2 of Clubs\\\\n3 of Clubs\\\\n4 of Clubs\\\\n5 of Clubs\\\\n6 of Clubs\\\\n7 of Clubs\\\\n8 of Clubs\\\\n9 of Clubs\\\\n10 of Clubs\\\\nJack of Clubs\\\\nQueen of Clubs\\\\nKing of Clubs\\\\nAce of Clubs\\\\n2 of Diamonds\\\\n3 of Diamonds\\\\n4 of Diamonds\\\\n5 of Diamonds\\\\n6 of Diamonds\\\\n7 of Diamonds\\\\n8 of Diamonds\\\\n9 of Diamonds\\\\n10 of Diamonds\\\\nJack of Diamonds\\\\nQueen of Diamonds\\\\nKing of Diamonds\\\\nAce of Diamonds\\\\n2 of Hearts\\\\n3 of Hearts\\\\n4 of Hearts\\\\n5 of Hearts\\\\n6 of Hearts\\\\n7 of Hearts\\\\n8 of Hearts\\\\n9 of Hearts\\\\n10 of Hearts\\\\nJack of Hearts\\\\nQueen of Hearts\\\\nKing of Hearts\\\\nAce of Hearts\\\\n2 of Spades\\\\n3 of Spades\\\\n4 of Spades\\\\n5 of Spades\\\\n6 of Spades\\\\n7 of Spades\\\\n8 of Spades\\\\n9 of Spades\\\\n10 of Spades\\\\nJack of Spades\\\\nQueen of Spades\\\\nKing of Spades\\\\nAce of Spades\\\\n\\\";\\n        assertEquals(s, d.toString());\\n    }\\n}\\n\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"unit_test\",\"title\":\"Deck Shuffle\",\"headline\":\"\",\"points\":1,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n    @Before\\n    public void setUp() {\\n        // Setup code here (if required)\\n    }\\n\\n    @After\\n    public void tearDown() {\\n        // Teardown code here (if required)\\n    }\\n\\n    @Test\\n    public void testDefaultCase() {\\n        Deck d = new Deck();\\n        d.shuffle();\\n        String s = \\\"The Deck of Cards:\\\\n8 of Spades\\\\n4 of Spades\\\\n2 of Spades\\\\n10 of Clubs\\\\nQueen of Spades\\\\n7 of Spades\\\\n2 of Diamonds\\\\n10 of Diamonds\\\\n5 of Clubs\\\\n5 of Diamonds\\\\nQueen of Clubs\\\\n10 of Spades\\\\nAce of Clubs\\\\nKing of Spades\\\\nJack of Spades\\\\n9 of Hearts\\\\n3 of Spades\\\\n6 of Diamonds\\\\nJack of Diamonds\\\\nQueen of Hearts\\\\n5 of Hearts\\\\n6 of Clubs\\\\nAce of Hearts\\\\n7 of Clubs\\\\n3 of Diamonds\\\\n4 of Diamonds\\\\n8 of Diamonds\\\\n9 of Clubs\\\\n10 of Hearts\\\\n6 of Hearts\\\\n2 of Clubs\\\\n8 of Hearts\\\\n4 of Clubs\\\\n8 of Clubs\\\\n3 of Clubs\\\\nJack of Hearts\\\\nJack of Clubs\\\\n9 of Diamonds\\\\n7 of Diamonds\\\\nKing of Diamonds\\\\nKing of Clubs\\\\n5 of Spades\\\\nQueen of Diamonds\\\\nAce of Diamonds\\\\n6 of Spades\\\\n4 of Hearts\\\\n2 of Hearts\\\\n7 of Hearts\\\\n9 of Spades\\\\nKing of Hearts\\\\n3 of Hearts\\\\nAce of Spades\\\\n\\\";\\n        assertEquals(s, d.toString());\\n    }\\n}\\n\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"unit_test\",\"title\":\"Deck draw 1\",\"headline\":\"\",\"points\":1,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n    @Before\\n    public void setUp() {\\n        // Setup code here (if required)\\n    }\\n\\n    @After\\n    public void tearDown() {\\n        // Teardown code here (if required)\\n    }\\n\\n    @Test\\n    public void testDefaultCase() {\\n        Deck d = new Deck();\\n        assertEquals(\\\"2 of Clubs\\\", d.draw().toString());\\n    }\\n}\\n\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"unit_test\",\"title\":\"Deck draw 2\",\"headline\":\"\",\"points\":1,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n    @Before\\n    public void setUp() {\\n        // Setup code here (if required)\\n    }\\n\\n    @After\\n    public void tearDown() {\\n        // Teardown code here (if required)\\n    }\\n\\n    @Test\\n    public void testDefaultCase() {\\n        Deck d = new Deck();\\n        d.shuffle();\\n        assertEquals(\\\"8 of Spades\\\", d.draw().toString());\\n    }\\n}\\n\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{\"ucqgnvmivrqhmctr\":{\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"public class Card\\n{\"],\"t\":1616727586000}},\"language\":\"java\",\"path\":\"Card.java\",\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}},\"ziabxtzzeogdnfuk\":{\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"public class Deck\\n{\\n\\t\\n}\"],\"t\":1616727586000}},\"language\":\"java\",\"path\":\"Deck.java\",\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"class Main\\n{\\n\\tpublic static void main(String[] args)\\n\\t{\\n\\t\\tarraysDemo();\\n\\t}\\n\\t\\n\\tpublic static void arraysDemo()\\n\\t{\\n\\t\\t//syntax for creating arrays:\\n\\t\\t//\\t\\ttype[] varname = new type[size];\\n\\t\\t//or \\ttype[] varname = {element1, element2, e};\\n\\t\\t\\n\\t\\t//creates an integer array of length 5 with default values\\n  \\t\\tint[] intArr = new int[5];\\n  \\t\\tSystem.out.println(intArr.length + \\\"\\\\n\\\"); //get length of intArr, note no parentheses\\n  \\t\\t\\n  \\t\\t//creates an double array of length 5 with given values\\n  \\t\\tdouble[] doubArr = {0.1, 0.2, 0.3, 0.4, 0.5};\\n  \\t\\t//print out specific positions using Array indexing\\n  \\t\\tSystem.out.println(doubArr[0]);\\n  \\t\\tSystem.out.println(doubArr[1]);\\n  \\t\\tSystem.out.println(doubArr[2] + \\\"\\\\n\\\");\\n  \\t\\t\\n  \\t\\t//loop through an array using its index (allows changes)\\n  \\t\\tfor(int x=0; x\\u003cdoubArr.length; x++)\\n  \\t\\t{\\n  \\t\\t\\tSystem.out.println(doubArr[x]);\\n  \\t\\t}\\n  \\t\\tSystem.out.println(\\\"\\\\n\\\");\\n  \\t\\t\\n  \\t\\t//loop through an array using a for-each loop\\n  \\t\\tString[] scrubs = {\\\"Noah\\\",\\\"Rafael\\\",\\\"James\\\"};\\n  \\t\\tfor(String scrub : scrubs)\\n  \\t\\t{\\n  \\t\\t\\tSystem.out.println(scrub + \\\" is a scrub\\\");\\n  \\t\\t} \\t//this works similarly to python's \\\"for element in array:\\\"\\n  \\t\\t\\t//where 'scrub' above can be any value, this will loop through\\n  \\t\\t\\t// every value of scrubs, assigning each one to scrub\\n  \\t\\t\\n\\t}\\n}\"],\"t\":1616727586000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16270,
    "title": "Lab01_Problem05: Creating Variables and Printing 5",
    "prompt_md": "Creating Variables and Printing 5\n\nFor you to do:\n\n*   Create a String variable called \"name\" and set it to \"Kalen\"\n*   Create an integer variable called \"age\" and set it to 50\n*   Create an integer variable called \"iq\" and set it to the value of age (do NOT use ' = 50')\n*   Print the value of name\n*   Print the value of age without skipping a new line\n*   Print the value of iq",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main {\\n  public static void main(String[] args) {\\n    System.out.println(\\\"hello world\\\");\\n  }\\n}\",\"defaultFilePath\":\"Main.java\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"stdout\",\"title\":\"correct\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"Kalen\\n5050\",\"stdoutCompareMethod\":\"equals\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"class Main {\\n  public static void main(String[] args) {\\n    System.out.println(\\\"hello world\\\");\\n  }\\n}\"],\"t\":1612369274000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16271,
    "title": "Lab01_Problem12: String Methods - indexOf",
    "prompt_md": "\nFor you to do:\n\n\n\n(the output should be one per line)\n\n\n\n* Print out the position of the first occurrence of \"c\"\n* Print out the position of the first occurrence of \" \"\n* Print out the position of the first occurrence of the variable target1\n* Print out the position of the first occurrence of the variable target2\n\n\n\n",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main {\\n  public static void main(String[] args) {\\n    String str = \\\"abracadabra alakazam\\\";\\n    String target1 = \\\"dab\\\";\\n    String target2 = \\\"ABRA\\\";\\n    \\n    //write code here\\n    \\n    \\n  }\\n}\",\"defaultFilePath\":\"Main.java\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"stdout\",\"title\":\"correct\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"4\\n11\\n6\\n-1\",\"stdoutCompareMethod\":\"equals\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"class Main {\\n  public static void main(String[] args) {\\n    String str = \\\"abracadabra alakazam\\\";\\n    String target1 = \\\"dab\\\";\\n    String target2 = \\\"ABRA\\\";\\n    \\n    //write code here\\n    \\n    \\n  }\\n}\"],\"t\":1612457851000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16272,
    "title": "Lab02_Problem01: For Loops 1",
    "prompt_md": "### Write a for loop that will print out the numbers starting at 1 and ending at the input inclusive. The numbers printed should all be on the same line separated by a space.\n\n### Sample Input #1\n\n```plaintext\n5\n```\n\n### Sample Output #1\n\n```plaintext\n1 2 3 4 5\n```\n\n###  Sample Input #2\n\n```plaintext\n10\n```\n\n### Sample Output #2\n\n```plaintext\n1 2 3 4 5 6 7 8 9 10\n```\n\n###  Sample Input #3\n\n```plaintext\n-5\n```\n\n### Sample Output #3\n\n(no output since the number is negative)",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"import java.util.Scanner;\\n\\nclass Main {\\n    public static void main(String[] args) {\\n    Scanner in = new Scanner(System.in);\\n\\n    int end = in.nextInt();\\n    //write your code below\\n\\n\\n    }\\n}\",\"defaultFilePath\":\"\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"stdout\",\"title\":\"3\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"1 2 3\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"3\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"-1\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"-1\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"11\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"1 2 3 4 5 6 7 8 9 10 11\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"11\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"8\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"1 2 3 4 5 6 7 8\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"8\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"import java.util.Scanner;\\n\\nclass Main {\\n  public static void main(String[] args) {\\n    Scanner inp = new Scanner(System.in);\\n    System.out.print(\\\"In: \\\");\\n    int end = inp.nextInt();\\n    //write your code below\\n    \\n    \\n  }\\n}\"],\"t\":1612756400000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16273,
    "title": "Lab01_Problem02: Creating Variables and Printing 2",
    "prompt_md": "## Creating Variables and Printing 2\n\nFor you to do:\n\n1.  Create an integer variable on line 4 and set it to the value 21.\n2.  Print that variable on a single line of output.",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main {\\n  public static void main(String[] args) {\\n    //write your code here!\\n    \\n    System.out.println(age);\\n  }\\n}\",\"defaultFilePath\":\"Main.java\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"stdout\",\"title\":\"correct\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"21\",\"stdoutCompareMethod\":\"equals\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"class Main {\\n  public static void main(String[] args) {\\n    //write your code here!\\n    \\n    System.out.println(age);\\n  }\\n}\"],\"t\":1612368921000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16274,
    "title": "Lab03_Problem10: Method Header Practice 9",
    "prompt_md": "Write a method header on line two with the following specs:\n\n```plaintext\nReturns: a String\nName: mixString\nParameters:\n   a String called s1\n   a String called s2\n```\n\nThen, starting on line 4, write code that will return the strings combined, one letter at a time, starting with s1. See example below for an example. You can assume that s1 and s2 are equal lengths:\n\n```plaintext\ns1 ==> \"12345\"\ns2 ==> \"abcde\"\nmixString(s1,s2) ==> \"1a2b3c4d5e\"\n```",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main {\\n\\t\\n\\t{\\n\\t\\t\\n\\t}\\n\\t\\n\\t//test case below (dont change):\\n\\tpublic static void main(String[] args){\\n\\t\\tSystem.out.println(mixString(\\\"12345\\\",\\\"abcde\\\")); //should be 1a2b3c4d5e\\n\\t\\tSystem.out.println(mixString(\\\"howdy\\\",\\\"hello\\\")); //should be hhoewldlyo\\n\\t}\\n}\",\"defaultFilePath\":\"Main.java\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"unit_test\",\"title\":\"tests\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void tests() {\\n    Main a = new Main();\\n    assertEquals(a.mixString(\\\"12345\\\",\\\"abcde\\\"),\\\"1a2b3c4d5e\\\");\\n    assertEquals(a.mixString(\\\"howdy\\\",\\\"hello\\\"),\\\"hhoewldlyo\\\");\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"class Main {\\n\\t\\n\\t{\\n\\t\\t\\n\\t}\\n\\t\\n\\t//test case below (dont change):\\n\\tpublic static void main(String[] args){\\n\\t\\tSystem.out.println(mixString(\\\"12345\\\",\\\"abcde\\\")); //should be 1a2b3c4d5e\\n\\t\\tSystem.out.println(mixString(\\\"howdy\\\",\\\"hello\\\")); //should be hhoewldlyo\\n\\t}\\n}\"],\"t\":1613415991000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16275,
    "title": "Lab02_Problem12: Further For Loop Practice 7 (mIxEd CaSe)",
    "prompt_md": "Write a for loop that will print out the string in alternating cases, with the first letter being lowercase.\n\n### Sample Input #1\n\n```plaintext\npowerful\n```\n\n### Sample Output #1\n\n```plaintext\npOwErFuL\n```\n\n###  Sample Input #2\n\n```plaintext\nCOMEDIC\n```\n\n### Sample Output #2\n\n```plaintext\ncOmEdIc\n```\n\n###  Sample Input #3\n\n```plaintext\nacroBATics\n```\n\n### Sample Output #3\n\n```plaintext\naCrObAtIcS\n```\n\nHINT: You will need to use an IF statement inside your for loop!",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"import java.util.Scanner;\\n\\nclass Main {\\n    public static void main(String[] args) {\\n        Scanner in = new Scanner(System.in);\\n\\n        String s = in.nextLine();\\n        //write your code below\\n\\n\\n    }\\n}\",\"defaultFilePath\":\"\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"stdout\",\"title\":\"proGRAMming\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"pRoGrAmMiNg\",\"stdoutCompareMethod\":\"equals\",\"stdin\":\"proGRAMming\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"environment\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"eNvIrOnMeNt\",\"stdoutCompareMethod\":\"equals\",\"stdin\":\"environment\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"ALLCAPS\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"aLlCaPs\",\"stdoutCompareMethod\":\"equals\",\"stdin\":\"ALLCAPS\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"import java.util.Scanner;\\n\\nclass Main {\\n  public static void main(String[] args) {\\n    Scanner inp = new Scanner(System.in);\\n    System.out.print(\\\"In:\\\");\\n    String s = inp.nextLine();\\n    //write your code below\\n    \\n    \\n  }\\n}\"],\"t\":1612874096000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16276,
    "title": "Lab05_Problem08: 2D Array Practice 6",
    "prompt_md": "Complete the sumEvenIndex method so that it takes in a 2-dimensional integer array and sums all numbers that are in an even column index or an even row.\n\nFor example, in the following array, the numbers with parentheses would be summed:\n\n```plaintext\n     0  1  2  3\n\n0   (4)(6)(3)(2)\n1   (4) 1 (2) 3\n2   (1)(2)(6)(9)\n```\n\nExplanation:\n\n*   All values in row index 0 and 2 will be added to the sum because those row indices are even.\n*   All values in column index 0 and 2 will be added to the sum because those column indices are even.",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main\\n{\\n\\tpublic static void main(String[] args)\\n\\t{\\n\\t\\t// Here's a small, 10x10 matrix\\n        int[][] matrix = {{1, 1, 1, 0, 0, 0, 0, 0, 0, 0},\\n        {1, 1, 0, 0, 0, 0, 0, 0, 0, 0},\\n        {1, 1, 1, 1, 1, 0, 0, 0, 0, 0},\\n        {1, 1, 1, 1, 0, 0, 0, 0, 0, 0},\\n        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},\\n        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0},\\n        {1, 1, 1, 1, 1, 1, 0, 0, 0, 0},\\n        {1, 1, 1, 1, 1, 1, 1, 1, 0, 0},\\n        {1, 1, 1, 0, 0, 0, 0, 0, 0, 0},\\n        {1, 1, 1, 1, 1, 1, 1, 0, 0, 0}};\\n\\t\\t\\n\\t\\tint sum = sumEvenIndex(matrix);\\n        System.out.println(\\\"Sum: \\\" + sum);\\n\\t}\\n\\n    // you should complete the method below\\n\\tpublic static int sumEvenIndex(int[][] array)\\n\\t{\\n\\t\\t\\n\\t}\\n}\",\"defaultFilePath\":\"\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"unit_test\",\"title\":\"tests\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void tests() {\\n    int[][] c = {\\n        {1,2},\\n        {3,4}\\n    };\\n    assertEquals(6,Main.sumEvenIndex(c));\\n    \\n    int[][] d = {\\n        {1,1},\\n        {1,1}\\n    };\\n    assertEquals(3,Main.sumEvenIndex(d));\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"class Main\\n{\\n\\tpublic static void main(String[] args)\\n\\t{\\n\\t\\t// Here's a small, 10x10 matrix\\n        int[][] matrix = {{1, 1, 1, 0, 0, 0, 0, 0, 0, 0},\\n        {1, 1, 0, 0, 0, 0, 0, 0, 0, 0},\\n        {1, 1, 1, 1, 1, 0, 0, 0, 0, 0},\\n        {1, 1, 1, 1, 0, 0, 0, 0, 0, 0},\\n        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},\\n        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0},\\n        {1, 1, 1, 1, 1, 1, 0, 0, 0, 0},\\n        {1, 1, 1, 1, 1, 1, 1, 1, 0, 0},\\n        {1, 1, 1, 0, 0, 0, 0, 0, 0, 0},\\n        {1, 1, 1, 1, 1, 1, 1, 0, 0, 0}};\\n\\t\\t\\n\\t\\tint maxNumOnes = maxOnes(matrix);\\n\\t}\\n\\tpublic static int sumEvenIndex(int[][] array)\\n\\t{\\n\\t\\t\\n\\t}\\n}\"],\"t\":1614276991000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16277,
    "title": "Lab05_Problem04: 2D Array Practice 2",
    "prompt_md": "\nComplete the sumRow method.  The method should take in an 2D integer array and a row number.  The method should return the sum of the elements in a given row.\n\n\n\nFor example, if row = 0, you should return the sum of all the elements in the topmost row.\n\n\n\n",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main\\n{\\n\\tpublic static void main(String[] args)\\n\\t{\\n\\t\\tint[][] a = {\\n\\t\\t\\t{5,2,3,7},\\n\\t\\t\\t{1,5,2,2},\\n\\t\\t\\t{1,2,3,4}\\n\\t\\t};\\n\\t\\tSystem.out.println(sumRow(a,2)); //should print 10\\n\\t\\tSystem.out.println(sumRow(a,0)); //should print 17\\n\\t}\\n\\n    // you should complete the method below\\n\\tpublic static int sumRow(int[][] array, int row)\\n\\t{\\n\\t\\t\\n\\t}\\n}\",\"defaultFilePath\":\"\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"unit_test\",\"title\":\"tests\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void tests() {\\n    int[][] a = {\\n        {3,1},\\n        {5,1},\\n        {2,1},\\n        {1,3}\\n    };\\n    assertEquals(4,Main.sumRow(a,0));\\n    assertEquals(6,Main.sumRow(a,1));\\n    assertEquals(3,Main.sumRow(a,2));\\n    assertEquals(4,Main.sumRow(a,3));\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"class Main\\n{\\n\\tpublic static void main(String[] args)\\n\\t{\\n\\t\\tint[][] a = {\\n\\t\\t\\t{5,2,3,7},\\n\\t\\t\\t{1,5,2,2},\\n\\t\\t\\t{1,2,3,4}\\n\\t\\t};\\n\\t\\tSystem.out.println(sumRow(a,2)); //should print 10\\n\\t\\tSystem.out.println(sumRow(a,0)); //should print 17\\n\\t}\\n\\tpublic static int sumRow(int[][] array, int row)\\n\\t{\\n\\t\\t\\n\\t}\\n}\"],\"t\":1614890573000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16278,
    "title": "061 - Creating the Student Class",
    "prompt_md": "\n# This is a manually graded assignment - do not submit until actually complete with everything.  You will have to check everything yourself to make sure all the requirements are done.\n\n\n\nReminder: write your methods **without using static**!\n\n\n\nIn the Student Class (in Student.java):\n\n\n\n**1. Add at least three more class variables**\n\n**2. Add your three class variables to the constructor**\n\n\n\n**3. Then create the following methods:**\n\n\n\n(this one has been completed for you)\n\nName: changeName\n\nReturns: nothing\n\nParameters: new_name as a String\n\nPurpose: sets the student's name to the new_name provided\n\n\n\nName: graduate\n\nReturns: nothing\n\nParameters: none\n\nPurpose: Increases the student's grade by 1\n\n\n\nName: checkUniform\n\nReturns: nothing\n\nParameters: isWearingUniform as a boolean\n\nPurpose: if the student is wearing uniform, set daysWithoutUniform to 0.  Otherwise, increase it by 1.\n\n\n\n**4. Then create at least two more methods that has something to do with your class variables.**\n\n\n\nExtension:\n\n1. Try printing the Student variable by itself, without any fields/methods.  What do you see / what do you think it represents?\n2. Add a toString() method to the Student class that has no parameters and returns a String.  Then try printing the object by itself.  What are your observations?\n\n\n\n",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main\\n{\\n  \\tpublic static void main(String[] args)\\n  \\t{\\n    \\tStudent hector = new Student(\\\"Hector\\\",11,3.0);\\n    \\tSystem.out.println(\\\"Student Name: \\\" + hector.name);\\n    \\tSystem.out.println(\\\"Student Grade: \\\" + hector.grade);\\n    \\tSystem.out.println(\\\"Student GPA: \\\" + hector.gpa);\\n    \\t\\n    \\tSystem.out.println(\\\"Changing GPA...\\\");\\n    \\thector.changeGPA(3.5);\\n    \\t\\n    \\tSystem.out.println(\\\"Student's New GPA: \\\" + hector.gpa);\\n    \\t\\n    \\t//uncomment the following when you've written the other tests\\n    \\t//you can uncomment by highlighting text and hitting CMD+/\\n    \\t\\n    \\t// System.out.println(\\\"Student graduated!\\\");\\n    \\t// hector.graduate();\\n    \\t// System.out.println(\\\"Currently in grade: \\\" + hector.grade);\\n    \\t\\n    \\t// hector.checkUniform(false);\\n    \\t// hector.checkUniform(false);\\n    \\t// hector.checkUniform(false);\\n    \\t// hector.checkUniform(false);\\n    \\t// System.out.println(hector.name + \\\" went a few days without uniform..\\\");\\n    \\t// System.out.println(hector.daysWithoutUniform + \\\" days, to be exact.\\\");\\n    \\t\\n    \\t// System.out.println(\\\"He/she is wearing his/her uniform today!\\\");\\n    \\t// hector.checkUniform(true);\\n    \\t// System.out.println(\\\"Current days without uniform for \\\" + hector.name + \\\": \\\" + hector.daysWithoutUniform);\\n  \\t}\\n}\",\"defaultFilePath\":\"Main.java\",\"extraFiles\":{\"U3R1ZGVudC5qYXZh\":{\"contents\":\"public class Student\\n{\\n\\t//class variables/states\\n\\tpublic String name;\\n\\tpublic int grade;\\n\\tpublic double gpa;\\n\\tpublic int daysWithoutUniform;\\n\\t\\n\\t//constructor\\n\\tpublic Student(String aname, int agrade, double agpa)\\n\\t{\\n\\t\\tthis.name = aname;\\n\\t\\tthis.grade = agrade;\\n\\t\\tthis.gpa = agpa;\\n\\t\\tthis.daysWithoutUniform = 0;\\n\\t}\\n\\t\\n\\t//methods/behaviors\\n\\tpublic void changeGPA(double new_gpa)\\n\\t{\\n\\t\\tthis.gpa = new_gpa;\\n\\t}\\n}\",\"language\":\"java\",\"type\":\"\"}}}},\"grading\":{\"testCases\":[{\"type\":\"manual\",\"title\":\"Manual Grading\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null}}"
  },
  {
    "id": 16279,
    "title": "Lab05_Problem05: 2D Array Practice 3",
    "prompt_md": "\nComplete the max2Delement method.  The method should take in a 2D array as a parameter and return the highest value in the array.\n\n\n\n",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main\\n{\\n\\tpublic static void main(String[] args)\\n\\t{\\n\\t\\tint[][] a = {\\n\\t\\t\\t{5,2,3,7},\\n\\t\\t\\t{1,5,1,1},\\n\\t\\t\\t{8,3,1,2}\\n\\t\\t};\\n\\t\\tSystem.out.println(max2Delement(a)); //should be 8\\n\\t}\\n\\tpublic static int max2Delement(int[][] nums)\\n\\t{\\n\\t\\t\\n\\t}\\n}\",\"defaultFilePath\":\"Main.java\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"unit_test\",\"title\":\"tests\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void tests() {\\n    int[][] a = {\\n        {1,10},\\n        {-10,1}\\n    };\\n    assertEquals(10,Main.max2Delement(a));\\n    int[][] b = {\\n        {1,2,3,4,1,1},\\n        {5,6,7,8,9,15},\\n    };\\n    assertEquals(15,Main.max2Delement(b));\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"class Main\\n{\\n\\tpublic static void main(String[] args)\\n\\t{\\n\\t\\tint[][] a = {\\n\\t\\t\\t{5,2,3,7},\\n\\t\\t\\t{1,5,1,1},\\n\\t\\t\\t{8,3,1,2}\\n\\t\\t};\\n\\t\\tSystem.out.println(max2Delement(a)); //should be 8\\n\\t}\\n\\tpublic static int max2Delement(int[][] nums)\\n\\t{\\n\\t\\t\\n\\t}\\n}\"],\"t\":1614890315000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16280,
    "title": "Lab08_Problem02: ArrayList Exercise 2",
    "prompt_md": "\nCreate a static method that:\n\n* is called appendPosSum\n* returns an ArrayList\n* takes one parameter: an ArrayList of Integers\n\n \n\nThis method should:\n\n* Create a new ArrayList of Integers\n* Add only the positive Integers to the new ArrayList\n* Sum the positive Integers in the new ArrayList and add the Sum as the last element\n\n\n\nFor example, if the incoming ArrayList contains the Integers (4,-6,3,-8,0,4,3), the ArrayList that gets returned should be (4,3,4,3,14), with 14 being the sum of (4,3,4,3).  The original ArrayList should remain unchanged.\n\n\n\n",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"import java.util.*;\\n\\nclass Main {\\n\\tpublic static void Main(String[] args) {\\n\\t\\t// You needn't code anything here unless you want to test your method\\n\\t}\\n\\n\\n\\t//create your method below\\n\\t\\n}\\n\",\"defaultFilePath\":\"Main.java\",\"defaultFileType\":\"text/plain\",\"defaultFileSyntaxLanguage\":\"java\",\"runType\":\"file\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"unit_test\",\"title\":\"tests\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\nimport java.util.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void tests() {\\n    ArrayList\\u003cInteger\\u003e a = new ArrayList\\u003cInteger\\u003e(Arrays.asList(1,4,-2,6,-3,7,-9));\\n    ArrayList\\u003cInteger\\u003e b = new ArrayList\\u003cInteger\\u003e(Arrays.asList(1,4,6,7,18));\\n    assertEquals(a,a);\\n    assertEquals(b,Main.appendPosSum(a));\\n    \\n    ArrayList\\u003cInteger\\u003e c = new ArrayList\\u003cInteger\\u003e(Arrays.asList(-4,-7,-3,-4));\\n    ArrayList\\u003cInteger\\u003e d = new ArrayList\\u003cInteger\\u003e(Arrays.asList(0));\\n    assertEquals(c,c);\\n    assertEquals(d,Main.appendPosSum(c));\\n    \\n    \\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"import java.util.ArrayList;\\n\\nclass Main\\n{\\n\\tpublic static void Main(String[] args)\\n\\t{\\n\\t\\t\\n\\t}\\n\\t//create your method below\\n\\t\\n}\"],\"t\":1617931890000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16281,
    "title": "Lab01_Problem04: Creating Variables and Printing 4",
    "prompt_md": "## Creating Variables and Printing 4\n\nPrint out the following pattern:\n\n```plaintext\n*\n**\n***\n##\n#\n```",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main {\\n  public static void main(String[] args) {\\n    //write your code here!\\n    \\n    \\n  }\\n}\",\"defaultFilePath\":\"Main.java\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"stdout\",\"title\":\"correct\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"*\\n**\\n***\\n##\\n#\",\"stdoutCompareMethod\":\"equals\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"class Main {\\n  public static void main(String[] args) {\\n    //write your code here!\\n    \\n    \\n  }\\n}\"],\"t\":1612369107000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16282,
    "title": "Lab01_Problem13: String Methods - substring",
    "prompt_md": "\nFor you to do:\n\n\n\n(all output should be one per line)\n\n\n\n* On line 6, write a print statement that prints out a substring of str starting at index 5 and going to the end\n* On line 7, write a print statement that prints out a substring of str starting at index 7 and ending at index 10\n* On line 10, fill in the () in substring so that it prints \"harambe\"\n* On line 11, fill in the () in substring so that it prints \"t f\"\n\n\n\n",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main {\\n  public static void main(String[] args) {\\n    String str = \\\"laptops out for harambe\\\";\\n    \\n    //write code below\\n    \\n    \\n    \\n    //fill in the blanks below:\\n    System.out.println(str.substring()); //fill in substring so it prints \\\"harambe\\\"\\n    System.out.println(str.substring()); //fill in substring so it prints \\\"t f\\\"\\n  }\\n}\",\"defaultFilePath\":\"Main.java\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"stdout\",\"title\":\"correct\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"ps out for harambe\\n ou\\nharambe\\nt f\",\"stdoutCompareMethod\":\"equals\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"class Main {\\n  public static void main(String[] args) {\\n    String str = \\\"laptops out for harambe\\\";\\n    \\n    //write code below\\n    \\n    \\n    \\n    //fill in the blanks below:\\n    System.out.println(str.substring()); //fill in substring so it prints \\\"harambe\\\"\\n    System.out.println(str.substring()); //fill in substring so it prints \\\"t f\\\"\\n  }\\n}\"],\"t\":1612457850000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16283,
    "title": "Lab02_Problem15: Printing Odd Inclusive",
    "prompt_md": "You are to write a program that will print out all the **ODD** numbers in between num1 and num2 inclusive. Your output should all be on one line, separated by spaces. You can assume that the following:\n\n```plaintext\nnum2 > num1\n```\n\n### Sample Input #1\n\n```plaintext\n3\n11\n```\n\n### Sample Output #1\n\n```plaintext\n3 5 7 9 11\n```\n\n###  Sample Input #2\n\n```plaintext\n4\n20\n```\n\n### Sample Output #2\n\n```plaintext\n5 7 9 11 13 15 17 19\n```\n\n###  Sample Input #3\n\n```plaintext\n-2\n6\n```\n\n### Sample Output #3\n\n```plaintext\n-1 1 3 5\n```",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"import java.util.Scanner;\\n\\nclass Main {\\n    public static void main(String[] args) {\\n        Scanner s = new Scanner(System.in);\\n\\n        int num1 = s.nextInt();\\n        int num2 = s.nextInt();\\n        //start on line 11\\n\\n\\n    }\\n}\",\"defaultFilePath\":\"\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"stdout\",\"title\":\"10 25\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"11 13 15 17 19 21 23 25\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"10 25\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"-2 6\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"-1 1 3 5\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"-2\\n6\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"4 20\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"5 7 9 11 13 15 17 19\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"4\\n20\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"3 11\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"3 5 7 9 11\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"3\\n11\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"import java.util.Scanner;\\n\\nclass Main {\\n  public static void main(String[] args) {\\n    Scanner s = new Scanner(System.in);\\n    System.out.print(\\\"#1: \\\");\\n    int num1 = s.nextInt();\\n    System.out.print(\\\"#2: \\\");\\n    int num2 = s.nextInt();\\n    //start on line 11\\n    \\n    \\n  }\\n}\"],\"t\":1612876246000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16284,
    "title": "106 - AL4 - ArrayList Methods - size,get",
    "prompt_md": "\nThe next two methods are .size() and .get().\n\n\n\nIf we have an ArrayList called someList and an Array called arr, these two pretty much do the same thing:\n\n```\nsomeList.size()\narr.length\n```\n\n\n\nIn other words, .size() returns the length (size) of the list.\n\n\n\nThe method .get(i) will return the element found at index i.  The following two expressions also do the same thing:\n\n```\nsomeList.get(4)\narr[4]\n```\n\n\n\nOn the left, given an ArrayList of Integers called ints, find and return the sum of all values in the ArrayList. You can use a for loop that loops over the length/size of the ArrayList, and you can use the get() method shown above.\n\n\n\n",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"import java.util.ArrayList;\\n\\nclass Main\\n{\\n\\tpublic static int test(ArrayList\\u003cInteger\\u003e ints)\\n\\t{\\n\\t\\t//write code here\\n\\t\\t\\n\\t}\\n}\",\"defaultFilePath\":\"Main.java\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"unit_test\",\"title\":\"tests\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\nimport java.util.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void tests() {\\n    ArrayList\\u003cInteger\\u003e a = new ArrayList\\u003cInteger\\u003e();\\n    a.add(4);\\n    a.add(2);\\n    a.add(3);\\n    a.add(4);\\n    assertEquals(13,Main.test(a));\\n    \\n    ArrayList\\u003cInteger\\u003e b = new ArrayList\\u003cInteger\\u003e();\\n    b.add(2);\\n    b.add(2);\\n    b.add(1);\\n    b.add(5);\\n    b.add(7);\\n    b.add(-3);\\n    assertEquals(14,Main.test(b));\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null}}"
  },
  {
    "id": 16285,
    "title": "Lab03_Problem12: Accumulator Method Practice 2",
    "prompt_md": "\n Write a method header on line two with the following specs:  \n\n\nReturns:\n\n```\nan integer\n```\n\nName:\n\n```\nsumEvenToX\n```\n\nParameters:\n\n```\nan integer called \"x\"\n```\n\nPurpose:\n\n```\ncalculate the sum of the EVEN integers from 1 to x (including x)\n```\n\n\n\nExamples:\n\n```\nsumEvenToX(5) ==> 6\nsumEvenToX(8) ==> 20\n```\n\n\n\n",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main {\\n\\t\\n\\t{\\n\\t\\t\\n\\t}\\n\\t\\n\\t//test case below (dont change):\\n\\tpublic static void main(String[] args){\\n\\t\\tSystem.out.println(sumEvenToX(5)); //6\\n\\t\\tSystem.out.println(sumEvenToX(8)); //20\\n\\t}\\n}\",\"defaultFilePath\":\"Main.java\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"unit_test\",\"title\":\"tests\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void tests() {\\n    Main a = new Main();\\n    \\n    assertEquals(6,a.sumEvenToX(5));\\n    assertEquals(20,a.sumEvenToX(8));\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"class Main {\\n\\t\\n\\t{\\n\\t\\t\\n\\t}\\n\\t\\n\\t//test case below (dont change):\\n\\tpublic static void main(String[] args){\\n\\t\\tSystem.out.println(sumEvenToX(5)); //6\\n\\t\\tSystem.out.println(sumEvenToX(8)); //20\\n\\t}\\n}\"],\"t\":1613416156000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16286,
    "title": "Lab04_Problem02: Looping Arrays Practice 2",
    "prompt_md": "Complete the timesTen method to take each element of arr and multiplies its value by 10. It should **return the reference variable** of the array when finished.",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main\\n{\\n\\tpublic static double[] timesTen(double[] arr)\\n\\t{\\n\\t\\t// Notice the return type in the method header above...\\n\\n\\n        \\n\\t}\\n\\t\\n\\tpublic static void main(String[] args)\\n\\t{\\n\\t\\t//feel free to test code here\\n\\t\\t// this means you can make an array, HERE, within main\\n\\t\\t// You can then send the array to the timesTen method, get the return value\\n\\t\\t// and then try to print it, again, ALL here within main.\\n\\t\\t//\\n\\t\\t// Also, if you like, you needn't do anything here in main.\\n\\t\\t// The only thing you need to complete is the method above.\\n\\t}\\n}\",\"defaultFilePath\":\"\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"unit_test\",\"title\":\"tests\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\nimport java.util.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void tests() {\\n    assertTrue(Arrays.equals(new double[] {10.0,20.0,30.0}, Main.timesTen(new double[] {1,2,3})));\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"class Main\\n{\\n\\tpublic static double[] timesTen(double[] arr)\\n\\t{\\n\\t\\t\\n\\t}\\n\\t\\n\\tpublic static void main(String[] args)\\n\\t{\\n\\t\\t//feel free to test code here\\n\\t\\t// this means you can make an array, HERE, within main\\n\\t\\t// You can then send the array to the timesTen method, get the return value\\n\\t\\t// and then try to print it, again, ALL here within main.\\n\\t\\t//\\n\\t\\t// Also, if you like, you needn't do anything here in main.\\n\\t\\t// The only thing you need to complete is the method above.\\n\\t}\\n}\"],\"t\":1614274999000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16287,
    "title": "Lab05_Problem07: 2D Array Practice 5",
    "prompt_md": "Complete the diffHiLo method. The method takes in a 2-D integer array and returns the difference between the highest element in the array and the lowest. The result should always be a positive number.\n\nUse the following to find absolute value:\n\n```plaintext\nMath.abs(-1) ==> 1\nMath.abs(6) ==> 6\nMath.abs(-5) ==> 5\n```\n\n\\*\\*For clarity, if the highest number was 10, and the lowest number was -50, the difference would be 60.",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main\\n{\\n\\tpublic static void main(String[] args)\\n\\t{\\n\\t\\tint[][] a = {\\n\\t\\t\\t{-5,-2,-3,7},\\n\\t\\t\\t{1,-5,-2,2},\\n\\t\\t\\t{1,-2,3,-4}\\n\\t\\t};\\n\\t\\tSystem.out.println(diffHiLo(a)); //should print 12\\n\\t}\\n\\n    // you should complete the method below\\n\\tpublic static int diffHiLo(int[][] array)\\n\\t{\\n\\t\\t\\n\\t}\\n}\",\"defaultFilePath\":\"\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"unit_test\",\"title\":\"tests\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void tests() {\\n    int[][] a = {\\n        {-5,-2,-3,7},\\n        {1,-5,-2,2},\\n        {1,-2,3,-4}\\n    };\\n    assertEquals(12,Main.diffHiLo(a));\\n    int[][] b = {\\n        {1,2,3,4,4,7,1,6,3,7,10},\\n        {7,2,3,4,5,2,-3,-6,4,7,11}\\n    };\\n    assertEquals(17,Main.diffHiLo(b));\\n    int[][] c = {\\n        {-1,-2},\\n        {-3,-4}\\n    };\\n    assertEquals(3,Main.diffHiLo(c));\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"class Main\\n{\\n\\tpublic static void main(String[] args)\\n\\t{\\n\\t\\tint[][] a = {\\n\\t\\t\\t{-5,-2,-3,7},\\n\\t\\t\\t{1,-5,-2,2},\\n\\t\\t\\t{1,-2,3,-4}\\n\\t\\t};\\n\\t\\tSystem.out.println(diffHiLo(a)); //should print 12\\n\\t}\\n\\tpublic static int diffHiLo(int[][] array)\\n\\t{\\n\\t\\t\\n\\t}\\n}\"],\"t\":1614890317000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16288,
    "title": "Lab03_Problem05: Method Header Practice 4",
    "prompt_md": "Write a method header on line two with the following specs:\n\n```plaintext\nReturns: an integer\nName: addTwo\nParameters:\n   An integer called \"x\"\n   An integer called \"y\"\n```\n\nYou should not be writing code on any line other than #2",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main {\\n\\t\\n\\t{\\n\\t\\treturn x+y;\\n\\t}\\n\\t\\n\\t//test case below (dont change):\\n\\tpublic static void main(String[] args){\\n\\t\\tSystem.out.println(addTwo(3,4)); //should be 7\\n\\t}\\n}\",\"defaultFilePath\":\"Main.java\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"unit_test\",\"title\":\"test56\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void test56() {\\n    Main a = new Main();\\n    assertEquals(11,a.addTwo(5,6));\\n    assertEquals(14,a.addTwo(7,7));\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"class Main {\\n\\t\\n\\t{\\n\\t\\treturn x+y;\\n\\t}\\n\\t\\n\\t//test case below (dont change):\\n\\tpublic static void main(String[] args){\\n\\t\\tSystem.out.println(addTwo(3,4)); //should be 7\\n\\t}\\n}\"],\"t\":1613415104000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16289,
    "title": "Lab06_Problem03: Car class",
    "prompt_md": "## IMPORTANT: Read the instructions carefully, so as to not miss any steps.\n\nInstructions:\n\n1.  For this problem, do NOT include _**static**_ in any of your method headers!\n2.  Do not put code in the file Main.java\n3.  You should only put code in Student.java\n4.  You can use Main.java to make Car objects and test your class if you like. Just make sure no errors are present within your testing code.\n\nWithin Car.java, do the following:\n\nDeclare the following five **private** data members (and do not assign any values to them):\n\n1.  a String called _make_\n2.  a String called _model_\n3.  an int called _numberOfDoors_\n4.  an int called _topSpeed_\n5.  an int called _price_\n\n*   NOTE: the variable names, AND the capitalization, should be **exactly** as shown above\n\nWrite the **five accessor** (getter) methods and the **five mutator** (setter) methods.\n\n*   Be very careful that you use the EXACT naming conventions shown in class\n*   For example, if a data member variable is called _**finalGrade**_\n*   The accessor (getter) method should be called _**getFinalGrade**_\n*   The mutator (setter) method should be called _**setFinalGrade**_\n*   Pay attention to the style of the capitalization and how the “f” was lowercase in the variable name but is now **Uppercase** in the getter and setter method name\n*   Your program will not pass the test cases if your style is different than the above example.\n\nWrite **five constructors**:\n\n1.  a constructor that receives all data members values as parameters\n2.  a second constructor that receives all data members as parameters EXCEPT the data member numberOfDoors, which should default to 4\n3.  a third constructor receives numberOfDoors, topSpeed, and price, but does not receive make or model; both default to \"unknown\"\n4.  a fourth constructor that receives make, model, and numberOfDoors, but does not receive topSpeed or price; those two default to 90 and 0 respectively\n\n_**\\*Important: make sure the values in your constructor are given in the SAME order as shown in the original list of data members above. While not important in theory, this is the only way to confirm your program works and have it tested by the system. So if you want a constructor with make, model, and price, you need to list them in that order exactly...not model, make, and price.**_\n\nTest your code with the Main.java class by creating several Car objects using all four Constructors and print their fields/states to make sure it's correct.",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main {\\n    public static void main(String[] args) {\\n\\n        // You *CAN* include code here in your main if you want to test the Dog.java class.\\n        // You can make new Dog objects. You can print things.\\n\\n        // The code here in main will NOT be graded.\\n\\n        // HOWEVER, if any code here in main has an error, that could cause your\\n        // program to fail. So be careful.\\n        \\n    }\\n}\\n\",\"defaultFilePath\":\"\",\"defaultFileType\":\"\",\"extraFiles\":{\"Q2FyLmphdmE=\":{\"contents\":\"class Car {\\n\\t// Data Members:\\n\\t\\n\\t\\n\\n\\t\\n\\t// Constructors:\\n\\t\\n    \\n\\n\\n    // Accessor and Mutator Methods:\\n\\n\\n\\t\\n}\",\"language\":\"java\",\"type\":\"\"}}}},\"grading\":{\"testCases\":[{\"type\":\"unit_test\",\"title\":\"constructor 1\",\"headline\":\"\",\"points\":25,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n    @Before\\n    public void setUp() {\\n        // Setup code here (if required)\\n    }\\n\\n    @After\\n    public void tearDown() {\\n        // Teardown code here (if required)\\n    }\\n\\n    @Test\\n    public void testDefaultCase() {\\n        Car c1 = new Car(\\\"Audi\\\", \\\"A6\\\", 4, 155, 54900);\\n    \\n        assertEquals(\\\"Audi\\\", c1.getMake());\\n        assertEquals(\\\"A6\\\", c1.getModel());\\n        assertEquals(4, c1.getNumberOfDoors());\\n        assertEquals(155, c1.getTopSpeed());\\n        assertEquals(54900, c1.getPrice());\\n    }\\n}\\n\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"unit_test\",\"title\":\"constructor 2\",\"headline\":\"\",\"points\":25,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n    @Before\\n    public void setUp() {\\n        // Setup code here (if required)\\n    }\\n\\n    @After\\n    public void tearDown() {\\n        // Teardown code here (if required)\\n    }\\n\\n    @Test\\n    public void testDefaultCase() {\\n        // You may rename this method to better suit the purpose of your test case\\n        // Your test case logic here\\n        Car c = new Car(\\\"Toyota\\\", \\\"Prius\\\", 120, 30000);\\n\\n        assertEquals(\\\"Toyota\\\", c.getMake());\\n        assertEquals(\\\"Prius\\\", c.getModel());\\n        assertEquals(120, c.getTopSpeed());\\n        assertEquals(30000, c.getPrice());\\n        assertEquals(4, c.getNumberOfDoors());\\n    }\\n}\\n\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"unit_test\",\"title\":\"constructor 3\",\"headline\":\"\",\"points\":25,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n    @Before\\n    public void setUp() {\\n        // Setup code here (if required)\\n    }\\n\\n    @After\\n    public void tearDown() {\\n        // Teardown code here (if required)\\n    }\\n\\n    @Test\\n    public void testDefaultCase() {\\n        Car c = new Car(4,105,18000);\\n\\n        assertEquals(\\\"unknown\\\", c.getMake().toLowerCase());\\n        assertEquals(\\\"unknown\\\",c.getModel().toLowerCase());\\n        assertEquals(4, c.getNumberOfDoors());\\n        assertEquals(105, c.getTopSpeed());\\n        assertEquals(18000, c.getPrice());\\n    }\\n}\\n\\n\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"unit_test\",\"title\":\"constructor 4\",\"headline\":\"\",\"points\":25,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n    @Before\\n    public void setUp() {\\n        // Setup code here (if required)\\n    }\\n\\n    @After\\n    public void tearDown() {\\n        // Teardown code here (if required)\\n    }\\n\\n    @Test\\n    public void testDefaultCase() {\\n        Car c = new Car(\\\"Toyota\\\", \\\"Prius\\\", 4);\\n\\n        assertEquals(\\\"Toyota\\\", c.getMake());\\n        assertEquals(\\\"Prius\\\", c.getModel());\\n        assertEquals(4, c.getNumberOfDoors());\\n        assertEquals(90, c.getTopSpeed());\\n        assertEquals(0, c.getPrice());\\n    }\\n}\\n\\n\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main {\\n    public static void main(String[] args) {\\n\\n        // You *CAN* include code here in your main if you want to test the Dog.java class.\\n        // You can make new Dog objects. You can print things.\\n\\n        // The code here in main will NOT be graded.\\n\\n        // HOWEVER, if any code here in main has an error, that could cause your\\n        // program to fail. So be careful.\\n        \\n    }\\n}\\n\",\"defaultFilePath\":\"\",\"defaultFileType\":\"\",\"extraFiles\":{\"Q2FyLmphdmE=\":{\"contents\":\"\\nclass Car {\\n\\n\\t// Data Members\\n\\tprivate String make;\\n\\tprivate String model;\\n\\tprivate int numberOfDoors;\\n\\tprivate int topSpeed;\\n\\tprivate int price;\\n\\n\\t// Constructors:\\n\\n\\tpublic Car(String make, String model, int numberOfDoors, int topSpeed, int price) {\\n\\t\\tthis.make = make;\\n\\t\\tthis.model = model;\\n\\t\\tthis.numberOfDoors = numberOfDoors;\\n\\t\\tthis.topSpeed = topSpeed;\\n\\t\\tthis.price = price;\\n\\t}\\n\\n\\tpublic Car(String make, String model, int topSpeed, int price) {\\n\\t\\tthis.make = make;\\n\\t\\tthis.model = model;\\n\\t\\tthis.topSpeed = topSpeed;\\n\\t\\tthis.price = price;\\n\\t\\tthis.numberOfDoors = 4;\\n\\t}\\n\\n\\tpublic Car(int numberOfDoors, int topSpeed, int price) {\\n\\t\\tthis.numberOfDoors = numberOfDoors;\\n\\t\\tthis.topSpeed = topSpeed;\\n\\t\\tthis.price = price;\\n\\t\\tthis.make = \\\"unknown\\\";\\n\\t\\tthis.model = \\\"unknown\\\";\\n\\t}\\n\\n\\tpublic Car(String make, String model, int numberOfDoors) {\\n\\t\\tthis.make = make;\\n\\t\\tthis.model = model;\\n\\t\\tthis.numberOfDoors = numberOfDoors;\\n\\t\\tthis.topSpeed = 90;\\n\\t\\tthis.price = 0;\\n\\t}\\n\\n\\t// Accessor and Mutator Methods:\\n\\tpublic String getMake() {\\n\\t\\treturn make;\\n\\t}\\n\\n\\tpublic void setMake(String make) {\\n\\t\\tthis.make = make;\\n\\t}\\n\\n\\tpublic String getModel() {\\n\\t\\treturn model;\\n\\t}\\n\\n\\tpublic void setModel(String model) {\\n\\t\\tthis.model = model;\\n\\t}\\n\\n\\tpublic int getNumberOfDoors() {\\n\\t\\treturn numberOfDoors;\\n\\t}\\n\\n\\tpublic void setNumberOfDoors(int numberOfDoors) {\\n\\t\\tthis.numberOfDoors = numberOfDoors;\\n\\t}\\n\\n\\tpublic int getTopSpeed() {\\n\\t\\treturn topSpeed;\\n\\t}\\n\\n\\tpublic void setTopSpeed(int topSpeed) {\\n\\t\\tthis.topSpeed = topSpeed;\\n\\t}\\n\\n\\tpublic int getPrice() {\\n\\t\\treturn price;\\n\\t}\\n\\n\\tpublic void setPrice(int price) {\\n\\t\\tthis.price = price;\\n\\t}\\n\\n}\\n\",\"language\":\"java\",\"type\":\"\"}}}},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{\"krrgkamfgfftjzem\":{\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"\"],\"t\":1616092247000}},\"language\":\"java\",\"path\":\"Car.java\",\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"\\nclass Main\\n{\\n\\tpublic static void main(String[] args) \\n\\t{\\n\\t\\t\\n\\t}\\n}\"],\"t\":1616092247000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16290,
    "title": "Lab03_Problem20: Accumulator Method String Practice 4",
    "prompt_md": "\nWrite a method header on line two with the following specs:    \n\n\nReturns:\n\n```\na String\n```\n\nName:\n\n```\nsurround\n```\n\nParameters:\n\n```\na String called s\na char called search_term\n```\n\n\n\nThen complete the method by programming the following behavior\n\n```\nReturn a new String built from s that has every instance of the search term surrounded by parentheses\nSee below examples.\n```\n\n\n\nExamples:\n\n```\nsurround(\"abcabcabc\",'c') ==> \"ab(c)ab(c)ab(c)\"\nsurround(\"technology\",'o') ==> \"techn(o)l(o)gy\"\n```\n\n \n\n\n\n",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main {\\n\\t\\n\\t{\\n\\t\\t\\n\\t}\\n\\t\\n\\t//test case below (dont change):\\n\\tpublic static void main(String[] args){\\n\\t\\tSystem.out.println(surround(\\\"abcabcabc\\\",'c')); //\\\"ab(c)ab(c)ab(c)\\\"\\n\\t\\tSystem.out.println(surround(\\\"technology\\\",'o')); //\\\"techn(o)l(o)gy\\\"\\n\\t}\\n}\",\"defaultFilePath\":\"Main.java\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"unit_test\",\"title\":\"tests\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void tests() {\\n    Main a = new Main();\\n    \\n    assertEquals(\\\"ab(c)ab(c)ab(c)\\\",a.surround(\\\"abcabcabc\\\",'c'));\\n    assertEquals(\\\"techn(o)l(o)gy\\\",a.surround(\\\"technology\\\",'o'));\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"class Main {\\n\\t\\n\\t{\\n\\t\\t\\n\\t}\\n\\t\\n\\t//test case below (dont change):\\n\\tpublic static void main(String[] args){\\n\\t\\tSystem.out.println(surround(\\\"abcabcabc\\\",'c')); //\\\"ab(c)ab(c)ab(c)\\\"\\n\\t\\tSystem.out.println(surround(\\\"technology\\\",'o')); //\\\"techn(o)l(o)gy\\\"\\n\\t}\\n}\"],\"t\":1613416332000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16291,
    "title": "Lab01_Problem11: String Methods - charAt",
    "prompt_md": "For you to do:\n\nALL print statements in this exercise should be on one line, no newlines.\n\n*   a variable, str, is already given to you.\n*   Print out the character in the 5th index of the String str\n*   Print out the character in the 8th index of the String str\n*   Print out the character in the 1st index of the String str\n*   Print out the index in the i-th index of the String str (i is a variable already declared for you)",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main {\\n  public static void main(String[] args) {\\n    String str = \\\"boopity bop\\\";\\n    int i = 10;\\n    \\n    // write code here\\n    \\n  }\\n}\",\"defaultFilePath\":\"Main.java\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"stdout\",\"title\":\"correct\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"tbop\",\"stdoutCompareMethod\":\"equals\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"class Main {\\n  public static void main(String[] args) {\\n    String str = \\\"boopity bop\\\";\\n    int i = 10;\\n    \\n    // write code here\\n    \\n  }\\n}\"],\"t\":1612369859000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16292,
    "title": "Lab04_Problem09: Printing Arrays Practice 2",
    "prompt_md": "\nThe code provided in your main method will take in five integers and save them into an array called arr.  Print out each element of the array multiplied by ten, one element per line.\n\n\n\n\n\n\n\n",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"import java.util.Scanner;\\nclass Main\\n{\\n\\tpublic static void main(String[] args)\\n\\t{\\n\\t\\tScanner input = new Scanner(System.in);\\n\\t\\tint[] arr = new int[5];\\n\\t\\tfor (int i=0;i\\u003c5;i++)\\n\\t\\t{\\n\\t\\t\\tarr[i] = input.nextInt();\\n\\t\\t}\\n\\t\\t//leave above alone!  write your code below\\n\\t\\t\\n\\t\\t\\n\\t}\\n}\",\"defaultFilePath\":\"Main.java\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"stdout\",\"title\":\"test 2\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"60\\n50\\n30\\n80\\n50\",\"stdoutCompareMethod\":\"equals\",\"stdin\":\"6 5 3 8 5\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"test 1\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"10\\n20\\n30\\n40\\n50\",\"stdoutCompareMethod\":\"equals\",\"stdin\":\"1 2 3 4 5\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"import java.util.Scanner;\\nclass Main\\n{\\n\\tpublic static void main(String[] args)\\n\\t{\\n\\t\\tScanner input = new Scanner(System.in);\\n\\t\\tint[] arr = new int[5];\\n\\t\\tfor (int i=0;i\\u003c5;i++)\\n\\t\\t{\\n\\t\\t\\tarr[i] = input.nextInt();\\n\\t\\t}\\n\\t\\t//leave above alone!  write your code below\\n\\t\\t\\n\\t\\t\\n\\t}\\n}\"],\"t\":1614276069000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16293,
    "title": "Lab02_Problem10: Further For Loop Practice 5 (printing characters)",
    "prompt_md": "Write a for loop that will print out each letter of the string s, separated by spaces, on the same line.\n\n### Sample Input #1\n\n```plaintext\nhello\n```\n\n### Sample Output #1\n\n```plaintext\nh e l l o\n```\n\n###  Sample Input #2\n\n```plaintext\ncovert\n```\n\n### Sample Output #2\n\n```plaintext\nc o v e r t\n```",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"import java.util.Scanner;\\n\\nclass Main {\\n    public static void main(String[] args) {\\n        Scanner in = new Scanner(System.in);\\n\\n        String s = in.nextLine();\\n        //write your code below\\n\\n\\n    }\\n}\",\"defaultFilePath\":\"\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"stdout\",\"title\":\"covert\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"c o v e r t\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"covert\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"blasphemy\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"b l a s p h e m y\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"blasphemy\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"import java.util.Scanner;\\n\\nclass Main {\\n  public static void main(String[] args) {\\n    Scanner inp = new Scanner(System.in);\\n    System.out.print(\\\"In:\\\");\\n    String s = inp.nextLine();\\n    //write your code below\\n    \\n    \\n  }\\n}\"],\"t\":1612874089000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16294,
    "title": "Lab04_Problem03: Looping Arrays Practice 3",
    "prompt_md": "Complete the **combineNames** method to **return a new String array** that is composed of the first name and last name of each of the parameters.\n\nThis may be confusing so look at the example:\n\nfirst\\_names = {\"bob\",\"joe\"}\n\nlast\\_names = {\"jones\",\"smith\"}\n\n**returns a new String array** with {\"bob jones\", \"joe smith\"}",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main\\n{\\n\\tpublic static String[] combineNames(String[] first_names, String[] last_names)\\n\\t{\\n\\t\\t// (1): Make a new array of Strings \\n\\t\\t// (2): This new array should be created to be the SAME length as first_names (or last_names)\\n\\t\\t// (3): make a loop and add to this array the concatenation of each first and last name \\n\\t\\t//      Of course, DO keep a space between the names!!\\n\\t\\t// (4): return the reference variable of this new array\\n\\t\\t\\n\\t}\\n\\t\\n\\tpublic static void main(String[] args)\\n\\t{\\n\\t\\t//feel free to test code here\\n\\t}\\n}\",\"defaultFilePath\":\"Main.java\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"unit_test\",\"title\":\"tests\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\nimport java.util.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void tests() {\\n    assertTrue(Arrays.equals(new String[] {\\\"firstone lastone\\\",\\\"firsttwo lasttwo\\\"}, Main.combineNames(new String[] {\\\"firstone\\\",\\\"firsttwo\\\"}, new String[] {\\\"lastone\\\", \\\"lasttwo\\\"})));\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"class Main\\n{\\n\\tpublic static String[] combineNames(String[] first_names, String[] last_names)\\n\\t{\\n\\t\\t// (1): Make a new array of Strings \\n\\t\\t// (2): This new array should be created to be the SAME length as first_names (or last_names)\\n\\t\\t// (3): make a loop and add to this array the concatenation of each first and last name \\n\\t\\t//      Of course, DO keep a space between the names!!\\n\\t\\t// (4): return the reference variable of this new array\\n\\t\\t\\n\\t}\\n\\t\\n\\tpublic static void main(String[] args)\\n\\t{\\n\\t\\t//feel free to test code here\\n\\t}\\n}\"],\"t\":1614275002000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16295,
    "title": "Lab03_Problem19: Accumulator Method String Practice 3",
    "prompt_md": "\nWrite a method header on line two with the following specs:    \n\n\nReturns:\n\n```\na String\n```\n\nName:\n\n```\ncensorLetter\n```\n\nParameters:\n\n```\na String called s\na char called ch\n```\n\n\n\nThen complete the method by programming the following behavior\n\n```\nReplace all instances of ch with a \"*\" within the String s.\nSee below examples.\n```\n\n\n\nExamples:\n\n```\ncensorLetter(\"computer science\",'e') ==> \"comput*r sci*nc*\"\ncensorLetter(\"trick or treat\",'t') ==> \"*rick or *rea*\"\n```\n\n \n\nHint: new String...\n\n\n\n",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main {\\n\\t\\n\\t{\\n\\t\\t\\n\\t}\\n\\t\\n\\t//test case below (dont change):\\n\\tpublic static void main(String[] args){\\n\\t\\tSystem.out.println(censorLetter(\\\"computer science\\\",'e')); //\\\"comput*r sci*nc*\\\"\\n\\t\\tSystem.out.println(censorLetter(\\\"trick or treat\\\",'t')); //\\\"*rick or *rea*\\\"\\n\\t}\\n}\",\"defaultFilePath\":\"Main.java\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"unit_test\",\"title\":\"tests\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void tests() {\\n    Main a = new Main();\\n    \\n    assertEquals(\\\"comput*r sci*nc*\\\",a.censorLetter(\\\"computer science\\\",'e'));\\n    assertEquals(\\\"*rick or *rea*\\\",a.censorLetter(\\\"trick or treat\\\",'t'));\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"class Main {\\n\\t\\n\\t{\\n\\t\\t\\n\\t}\\n\\t\\n\\t//test case below (dont change):\\n\\tpublic static void main(String[] args){\\n\\t\\tSystem.out.println(censorLetter(\\\"computer science\\\",'e')); //\\\"comput*r sci*nc*\\\"\\n\\t\\tSystem.out.println(censorLetter(\\\"trick or treat\\\",'t')); //\\\"*rick or *rea*\\\"\\n\\t}\\n}\"],\"t\":1613416329000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16296,
    "title": "Lab04_Problem05: Average Elements",
    "prompt_md": "\nComplete the avgElements method so that it will average all the elements in an integer array (passed to the method as a parameter) and return the average. \n\n\n\n",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main\\n{\\n\\tpublic static void main(String[] args)\\n\\t{\\n\\t\\tint[] a = {2,7,3,8,4};\\n\\t\\tSystem.out.println(avgElements(a)); //should print 4.8\\n\\t}\\n\\tpublic static double avgElements(int[] array)\\n\\t{\\n\\t\\t\\n\\t}\\n}\",\"defaultFilePath\":\"Main.java\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"unit_test\",\"title\":\"tests\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void tests() {\\n    int[] a = {5,3,7,2,1,5};\\n    int[] b = {5,3,-2,6,-9,5,2};\\n    assertEquals(3.833333,Main.avgElements(a),0.001);\\n    assertEquals(1.4285714,Main.avgElements(b),0.001);\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"class Main\\n{\\n\\tpublic static void main(String[] args)\\n\\t{\\n\\t\\tint[] a = {2,7,3,8,4};\\n\\t\\tSystem.out.println(avgElements(a)); //should print 4.8\\n\\t}\\n\\tpublic static double avgElements(int[] array)\\n\\t{\\n\\t\\t\\n\\t}\\n}\"],\"t\":1614275008000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16297,
    "title": "Lab03_Problem17: Accumulator Method String Practice 1",
    "prompt_md": "\nWrite a method header on line two with the following specs:    \n\n\n\nReturns:\n\n```\na String\n```\n\nName:\n\n```\nspaceOut\n```\n\nParameters:\n\n```\na String called s\n```\n\n\n\nThen complete the method by programming the following behavior\n\n```\nInsert spaces after every character in the String s, then return the new string.\nSee below examples (note the space at the end as well).\n```\n\n\n\nExamples:\n\n```\nspaceOut(\"hello\") ==> \"h e l l o \"\nspaceOut(\"technology\") ==> \"t e c h n o l o g y \"\n```\n\n\n\nHint: make a new String, `spaceOut`, initialize it to the empty String as done on the last example, and then loop over the given String, `s`. For each letter, append to the new String, `spaceOut`, that letter *and* a space.\n\n\n\n",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main {\\n\\t\\n\\t{\\n\\t\\t\\n\\t}\\n\\t\\n\\t//test case below (dont change):\\n\\tpublic static void main(String[] args){\\n\\t\\tSystem.out.println(spaceOut(\\\"hello\\\")); //\\\"h e l l o \\\"\\n\\t\\tSystem.out.println(spaceOut(\\\"technology\\\")); //\\\"t e c h n o l o g y \\\"\\n\\t}\\n}\",\"defaultFilePath\":\"Main.java\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"unit_test\",\"title\":\"tests\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void tests() {\\n    Main a = new Main();\\n    \\n    assertEquals(\\\"h e l l o \\\",a.spaceOut(\\\"hello\\\"));\\n    assertEquals(\\\"t e c h n o l o g y \\\",a.spaceOut(\\\"technology\\\"));\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"class Main {\\n\\t\\n\\t{\\n\\t\\t\\n\\t}\\n\\t\\n\\t//test case below (dont change):\\n\\tpublic static void main(String[] args){\\n\\t\\tSystem.out.println(spaceOut(\\\"hello\\\")); //\\\"h e l l o \\\"\\n\\t\\tSystem.out.println(spaceOut(\\\"technology\\\")); //\\\"t e c h n o l o g y \\\"\\n\\t}\\n}\"],\"t\":1613416326000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16298,
    "title": "Lab01_Problem18: Conditional Statement Practice 3",
    "prompt_md": "The variable \"name\" holds a String user input\n\nWrite a conditional statement starting on line 9 that does the following:\n\n*   If name is equal to \"Charles\", print \"teacher\"\n*   For any other input, print \"student\"\n\n### Sample Input #1\n\n```plaintext\nCharles\n```\n\n### Sample Output #1\n\n```plaintext\nteacher\n```\n\n### Sample Input #2\n\n```plaintext\nFaa\n```\n\n### Sample Output #2\n\n```plaintext\nstudent\n```",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"import java.util.Scanner;\\n\\nclass Main {\\n  public static void main(String[] args) {\\n  \\tScanner inp = new Scanner(System.in);\\n\\n  \\tString name = inp.nextLine();\\n  \\t\\n      //DO NOT CHANGE ABOVE CODE!  Write your code below\\n  \\t\\n  \\t\\n  }\\n}\",\"defaultFilePath\":\"\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"stdout\",\"title\":\"Charles\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"teacher\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"Charles\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"Jeremiah\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"student\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"Jeremiah\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"Mekhi\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"student\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"Mekhi\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"sidney\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"student\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"Sidney\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"charles\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"student\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"charles\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"Sophie\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"student\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"Sophie\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"import java.util.Scanner;\\n\\nclass Main {\\n  public static void main(String[] args) {\\n  \\tScanner inp = new Scanner(System.in);\\n  \\tSystem.out.print(\\\"In:\\\");\\n  \\tString name = inp.nextLine();\\n  \\t//DO NOT CHANGE ABOVE CODE!  Write your code below\\n  \\t\\n  \\t\\n  }\\n}\"],\"t\":1612453934000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16299,
    "title": "Lab08_Problem07: ArrayList Exercise 7",
    "prompt_md": "\n Create a method that:\n\n* is called removeEveryOther\n* returns nothing\n* takes in a single parameter - an ArrayList of Strings called words\n\n\n\nThis method should take the ArrayList parameter and modify it by removing every other element in the list, starting with removing the 0th element.\n\n\n\nFor example, if the parameter is:\n\n```\n(\"hi\",\"yo\",\"sup\",\"yolo\",\"boop\")\n```\n\nThe modified ArrayList should be:\n\n```\n(\"yo\",\"yolo\")\n```\n\n\n\n",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"import java.util.*;\\n\\nclass Main {\\n\\tpublic static void Main(String[] args) {\\n\\t\\t// You needn't code anything here unless you want to test your method\\n\\t}\\n\\n\\n\\t//create your method below\\n\\t\\n}\\n\",\"defaultFilePath\":\"Main.java\",\"defaultFileType\":\"text/plain\",\"defaultFileSyntaxLanguage\":\"java\",\"runType\":\"file\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"unit_test\",\"title\":\"tests\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\nimport java.util.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void tests() {\\n    ArrayList\\u003cString\\u003e a = new ArrayList\\u003cString\\u003e(Arrays.asList(\\\"a\\\",\\\"b\\\",\\\"c\\\",\\\"d\\\",\\\"e\\\",\\\"f\\\"));\\n    ArrayList\\u003cString\\u003e b = new ArrayList\\u003cString\\u003e(Arrays.asList(\\\"b\\\",\\\"d\\\",\\\"f\\\"));\\n    Main.removeEveryOther(a);\\n    assertEquals(b,a);\\n    \\n    ArrayList\\u003cString\\u003e c = new ArrayList\\u003cString\\u003e(Arrays.asList(\\\"h\\\",\\\"i\\\",\\\"j\\\",\\\"k\\\",\\\"l\\\"));\\n    ArrayList\\u003cString\\u003e d = new ArrayList\\u003cString\\u003e(Arrays.asList(\\\"i\\\",\\\"k\\\"));\\n    Main.removeEveryOther(c);\\n    assertEquals(d,c);\\n    \\n    \\n    \\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"import java.util.ArrayList;\\n\\nclass Main\\n{\\n\\tpublic static void main(String[] args)\\n\\t{\\n\\t\\t\\n\\t}\\n\\t//create your method below\\n\\t\\n}\"],\"t\":1617932465000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16300,
    "title": "Lab01_Problem17: Conditional Statement Practice 2",
    "prompt_md": "The variable \"num\" holds an integer user input\n\nWrite a conditional statement starting on line 9 that does the following:\n\n*   If num is even (divisible by 2), print \"\\_\\_ is even\"\n*   If num is odd, print \"\\_\\_ is odd\"\n\n### Example Input #1\n\n```plaintext\n23\n```\n\n### Example Output #1\n\n```plaintext\n23 is odd\n```\n\n### Example Input #2\n\n```plaintext\n36\n```\n\n### Example Output #2\n\n```plaintext\n36 is odd\n```",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"import java.util.Scanner;\\n\\nclass Main {\\n  public static void main(String[] args) {\\n    Scanner in = new Scanner(System.in);\\n  \\tint num = in.nextInt();\\n\\n  \\t//DO NOT CHANGE ABOVE CODE!  Write your code below\\n  \\t\\n  }\\n}\\n\",\"defaultFilePath\":\"\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"stdout\",\"title\":\"1024\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"1024 is even\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"1024\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"37\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"37 is odd\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"37\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"32163\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"32163 is odd\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"32163\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"-4\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"-4 is even\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"-4\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"import java.util.Scanner;\\n\\nclass Main {\\n  public static void main(String[] args) {\\n    Scanner in = new Scanner(System.in);\\n  \\tint num = in.nextInt();\\n\\n  \\t//DO NOT CHANGE ABOVE CODE!  Write your code below\\n  \\t\\n    if (num % 2 == 0) {\\n        System.out.println(num + \\\" is even\\\");\\n    }\\n    else {\\n        System.out.println(num + \\\" is odd\\\");\\n    }\\n  }\\n}\\n\",\"defaultFilePath\":\"\",\"extraFiles\":{}}},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"import java.util.Scanner;\\n\\nclass Main {\\n  public static void main(String[] args) {\\n    Scanner inp = new Scanner(System.in);\\n  \\tSystem.out.print(\\\"In:\\\");\\n  \\tint num = inp.nextInt();\\n  \\t//DO NOT CHANGE ABOVE CODE!  Write your code below\\n  \\t\\n  }\\n}\\n}\"],\"t\":1612452732000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16301,
    "title": "Lab02_Problem05: For Loops 5",
    "prompt_md": "Write a for loop that will loop through every letter of the input and print out just the vowels.\n\n### Sample Input #1\n\n```plaintext\nhowdyho\n```\n\n### Sample Output #1\n\n```plaintext\noo\n```\n\n###  Sample Input #2\n\n```plaintext\nhuehuehuehue\n```\n\n### Sample Output #2\n\n```plaintext\nueueueue\n```",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"import java.util.Scanner;\\n\\nclass Main {\\n    public static void main(String[] args) {\\n        Scanner in = new Scanner(System.in);\\n\\n        String word = in.nextLine();\\n        //write your code below\\n\\n\\n    }\\n}\",\"defaultFilePath\":\"\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"stdout\",\"title\":\"song lyrics galore\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"oiaoe\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"song lyrics galore\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"i wanna the berry best like no one ever was\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"iaaeeeieooeeea\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"i wanna the berry best like no one ever was\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"what is love baby dont hurt me\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"aioeaoue\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"what is love baby dont hurt me\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"import java.util.Scanner;\\n\\nclass Main {\\n  public static void main(String[] args) {\\n    Scanner inp = new Scanner(System.in);\\n    System.out.print(\\\"In:\\\");\\n    String word = inp.nextLine();\\n    //write your code below\\n    \\n    \\n  }\\n}\"],\"t\":1612811816000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16302,
    "title": "057 - Accumulator Method String Challenge 1 (optional)",
    "prompt_md": "\nWrite a method header on line two with the following specs:      \n\n\n\nReturns:\n\n```\na String\n```\n\nName:\n\n```\nsurroundStr\n```\n\nParameters:\n\n```\na String called s\na String called search_term\n```\n\n\n\nThen complete the method by programming the following behavior\n\n```\nReturn a new String built from s that has every instance of the search term surrounded by parentheses\nSee below examples.\n```\n\n\n\nExamples:\n\n```\nsurroundStr(\"abcabcabc\",\"abc\") ==> \"(abc)(abc)(abc)\"\nsurroundStr(\"there, on planeth hoth\",\"th\") ==> \"(th)ere, on plane(th) ho(th)\"\n```\n\n\n\nPlease note that you are not allowed to use the String method .replace() or .replaceAll() in your solution.\n\n\n\n",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main {\\n\\tpublic static String surroundStr(String s, String search_term)\\n\\t{\\n\\t\\treturn s.replaceAll(search_term, \\\"(\\\" + search_term + \\\")\\\");\\n\\t}\\n\\t\\n\\t//test case below (dont change):\\n\\tpublic static void main(String[] args){\\n\\t\\tSystem.out.println(surroundStr(\\\"abcabcabc\\\",\\\"abc\\\")); //\\\"(abc)(abc)(abc)\\\"\\n\\t\\tSystem.out.println(surroundStr(\\\"there, on planeth hoth\\\",\\\"th\\\")); //\\\"(th)ere, on plane(th) ho(th)\\\"\\n\\t}\\n}\",\"defaultFilePath\":\"Main.java\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"unit_test\",\"title\":\"tests\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void tests() {\\n    Main a = new Main();\\n    \\n    assertEquals(\\\"(abc)(abc)(abc)\\\",a.surroundStr(\\\"abcabcabc\\\",\\\"abc\\\"));\\n    assertEquals(\\\"(th)ere, on plane(th) ho(th)\\\",a.surroundStr(\\\"there, on planeth hoth\\\",\\\"th\\\"));\\n    assertEquals(\\\"(how does coding work)?\\\",a.surroundStr(\\\"how does coding work?\\\",\\\"how does coding work\\\"));\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null}}"
  },
  {
    "id": 16303,
    "title": "051 - Accumulator Method Challenge 1 (optional)",
    "prompt_md": "\nWrite a method header on line two with the following specs:  \n\n\nReturns:\n\n```\nan integer\n```\n\nName:\n\n```\ncountString\n```\n\nParameters:\n\n```\na String called str\na String called toFind\n```\n\nPurpose:\n\n```\nCount the number of occurrences of toFind within str.\nSee below examples.\n```\n\n\n\nExamples:\n\n```\ncountString(\"crazy crayfish crushing craniums\", \"cra\") ==> 3\ncountString(\"sometimes solutions dont come on time\", \"me\") ==> 4\n```\n\n\n\n",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main {\\n\\t\\n\\t{\\n\\t\\t\\n\\t}\\n\\t\\n\\t//test case below (dont change):\\n\\tpublic static void main(String[] args){\\n\\t\\tSystem.out.println(countString(\\\"crazy crayfish crushing craniums\\\", \\\"cra\\\")); //3\\n\\t\\tSystem.out.println(countString(\\\"sometimes solutions dont come on time\\\", \\\"me\\\")); //4\\n\\t}\\n}\",\"defaultFilePath\":\"Main.java\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"unit_test\",\"title\":\"tests\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void tests() {\\n    Main a = new Main();\\n    \\n    assertEquals(3,a.countString(\\\"crazy crayfish crushing craniums\\\", \\\"cra\\\"));\\n    assertEquals(4,a.countString(\\\"sometimes solutions dont come on time\\\", \\\"me\\\"));\\n    assertEquals(6,a.countString(\\\"hehehehehehe\\\", \\\"he\\\"));\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null}}"
  },
  {
    "id": 16304,
    "title": "Lab01_Problem03: Creating Variables and Printing 3",
    "prompt_md": "\n# Creating Variables and Printing 3\n\nFor you to do:\n\n* Create a boolean variable called \"isTrue\" and set it to false\n* Create a double variable called \"money\" and set it to 99999.99\n* Print the variable \"money\" first\n* Then print the variable \"isTrue\" **without skipping to the next line**.\n\n\n\n",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main {\\n  public static void main(String[] args) {\\n    //write your code below\\n    \\n    \\n    \\n    \\n    \\n  }\\n}\",\"defaultFilePath\":\"Main.java\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"stdout\",\"title\":\"correct\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"99999.99false\",\"stdoutCompareMethod\":\"equals\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"class Main {\\n  public static void main(String[] args) {\\n    //write your code below\\n    \\n    \\n    \\n    \\n    \\n  }\\n}\"],\"t\":1612369074000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16305,
    "title": "Lab04_Problem17: Finding Least Number of Vowels in String Array",
    "prompt_md": "**Complete the minVowels method** so that given the array words, it will return the word with the least number of vowels - if there are two or more words with the same number of vowels, it should return the shortest word.\n\nYou may find it helpful to write a helper method called countVowels that uses an accumulator algorithm to count the vowels.\n\nIncluded is a separate helper function that will tell you if something is a vowel or not.",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main\\n{\\n\\tpublic static void main(String[] args) \\n\\t{\\n\\t\\tString[] arr = {\\\"hey\\\",\\\"yolo\\\",\\\"hi\\\",\\\"this is long\\\"};\\n\\t\\tSystem.out.println(minVowels(arr));\\n\\t\\t//should print \\\"hi\\\"\\n\\t}\\n\\tpublic static String minVowels(String[] words)\\n\\t{\\n\\t\\t\\n\\t}\\n\\tpublic static int countVowels(String s)\\n\\t{\\n\\t\\t\\n\\t}\\n\\tpublic static boolean isVowel(char ch) // note that this method takes a char value\\n\\t{\\n\\t\\treturn ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u';\\n\\t}\\n}\",\"defaultFilePath\":\"\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"unit_test\",\"title\":\"tests\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void tests() {\\n    String[] a = {\\\"heya\\\",\\\"yolo\\\",\\\"YOOOOO\\\",\\\"super long\\\",\\\"ee\\\",\\\"haha\\\"};\\n    assertEquals(\\\"ee\\\",Main.minVowels(a));\\n    \\n    String[] b = {\\\"gg\\\",\\\"ez\\\",\\\"no re\\\",\\\"whaddup\\\"};\\n    assertEquals(\\\"gg\\\",Main.minVowels(b));\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"class Main\\n{\\n\\tpublic static void main(String[] args) \\n\\t{\\n\\t\\tString[] arr = {\\\"hey\\\",\\\"yolo\\\",\\\"hi\\\",\\\"this is long\\\"};\\n\\t\\tSystem.out.println(minVowels(arr));\\n\\t\\t//should print \\\"hi\\\"\\n\\t}\\n\\tpublic static String minVowels(String[] words)\\n\\t{\\n\\t\\t\\n\\t}\\n\\tpublic static int countVowels(String s)\\n\\t{\\n\\t\\t\\n\\t}\\n\\tpublic static boolean isVowel(char ch)\\n\\t{\\n\\t\\treturn ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u';\\n\\t}\\n}\"],\"t\":1614276086000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16306,
    "title": "Lab03_Problem04: Method Header Practice 3",
    "prompt_md": "Write a method header on line two with the following specs:\n\n```plaintext\nReturns: a String\nName: makeCapital\nParameters: a String named \"name\"\n```\n\nYou should not be writing code on any line other than #2.",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main {\\n\\n\\t{\\n\\t\\treturn name.toUpperCase(); // This returning of the uppercase value has ALREADY been done for you\\n\\t}\\n\\t\\n\\t//test case below (dont change):\\n\\tpublic static void main(String[] args){\\n\\t\\tSystem.out.println(makeCapital(\\\"test\\\"));\\n\\t}\\n}\",\"defaultFilePath\":\"\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"unit_test\",\"title\":\"test\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void test() {\\n    Main a = new Main();\\n    assertEquals(\\\"TEST\\\",a.makeCapital(\\\"test\\\"));\\n    assertEquals(\\\"FLORIDA SOUTHERN\\\",a.makeCapital(\\\"Florida Southern\\\"));\\n    assertEquals(\\\"COMPUTER SCIENCE\\\",a.makeCapital(\\\"computer science\\\"));\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"class Main {\\n\\n\\t{\\n\\t\\treturn name.toUpperCase();\\n\\t}\\n\\t\\n\\t//test case below (dont change):\\n\\tpublic static void main(String[] args){\\n\\t\\tSystem.out.println(makeCapital(\\\"test\\\"));\\n\\t}\\n}\"],\"t\":1613415102000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16307,
    "title": "Lab05_Problem12: Magic Square",
    "prompt_md": "\nA 2D array is considered \"magic\" if the following are true:\n\n* The array is square (N rows and N columns)\n* The sums of each row, the sums of each column, and the sums of each diagonal are all equal.\n\n\n\nComplete the isMagic method so that it will determine whether a given array is magic.\n\n\n\n**Note: for this problem, you CAN assume that all rows have the same length.\n\n\n\n",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main\\n{\\n\\tpublic static void main(String[] args)\\n\\t{\\n\\t\\tint[][] a = {\\n\\t\\t\\t{1,1,1},\\n\\t\\t\\t{1,1,1},\\n\\t\\t\\t{1,1,1}\\n\\t\\t};\\n\\t\\tSystem.out.println(isMagic(a)); //true\\n\\t\\tint[][] b = {\\n\\t\\t\\t{1,1,2},\\n\\t\\t\\t{3,2,3},\\n\\t\\t\\t{1,4,1}\\n\\t\\t};\\n\\t\\tSystem.out.println(isMagic(b)); //false\\n\\t\\tint[][] c = {\\n\\t\\t\\t{1,1,1},\\n\\t\\t\\t{2,2,2}\\n\\t\\t};\\n\\t\\tSystem.out.println(isMagic(c)); //false\\n\\t\\tint[][] d = {\\n\\t\\t\\t{8,1,6},\\n\\t\\t\\t{3,5,7},\\n\\t\\t\\t{4,9,2}\\n\\t\\t};\\n\\t\\tSystem.out.println(isMagic(d)); //true\\n\\t}\\n\\n    // you should complete the method below\\n\\tpublic static boolean isMagic(int[][] array)\\n\\t{\\n\\t\\t\\n\\t}\\n}\",\"defaultFilePath\":\"\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"unit_test\",\"title\":\"tests\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void tests() {\\n    int[][] a = {\\n        {1,1},\\n        {1,1}\\n    };\\n    int[][] b = {\\n        {4,9,2},\\n        {3,5,7},\\n        {8,1,6}\\n    };\\n    int[][] c = {\\n        {3,1,2},\\n        {3,1,1}\\n    };\\n    int[][] d = {\\n        {1,1,1},\\n        {2,2,2},\\n        {3,3,3}\\n    };\\n    int[][] e = {\\n        {16,3,2,13},\\n        {5,10,11,8},\\n        {9,6,7,12},\\n        {4,15,14,1}\\n    };\\n    assertEquals(true,Main.isMagic(a));\\n    assertEquals(true,Main.isMagic(b));\\n    assertEquals(false,Main.isMagic(c));\\n    assertEquals(false,Main.isMagic(d));\\n    assertEquals(true,Main.isMagic(e));\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"class Main\\n{\\n\\tpublic static void main(String[] args)\\n\\t{\\n\\t\\tint[][] a = {\\n\\t\\t\\t{1,1,1},\\n\\t\\t\\t{1,1,1},\\n\\t\\t\\t{1,1,1}\\n\\t\\t};\\n\\t\\tSystem.out.println(isMagic(a)); //true\\n\\t\\tint[][] b = {\\n\\t\\t\\t{1,1,2},\\n\\t\\t\\t{3,2,3},\\n\\t\\t\\t{1,4,1}\\n\\t\\t};\\n\\t\\tSystem.out.println(isMagic(b)); //false\\n\\t\\tint[][] c = {\\n\\t\\t\\t{1,1,1},\\n\\t\\t\\t{2,2,2}\\n\\t\\t};\\n\\t\\tSystem.out.println(isMagic(c)); //false\\n\\t\\tint[][] d = {\\n\\t\\t\\t{8,1,6},\\n\\t\\t\\t{3,5,7},\\n\\t\\t\\t{4,9,2}\\n\\t\\t};\\n\\t\\tSystem.out.println(isMagic(d)); //true\\n\\t}\\n\\tpublic static boolean isMagic(int[][] array)\\n\\t{\\n\\t\\t\\n\\t}\\n}\"],\"t\":1614892229000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16308,
    "title": "Lab03_Problem08: Method Header Practice 7",
    "prompt_md": "Write a method header on line two with the following specs:\n\n```plaintext\nReturns: a char\nName: getChar\nParameters:\na String called \"word\"\nan integer called \"index\"\n```\n\nThen, starting on line 4, write code that will **return the character in \"word\" at the index \"index\"**\n\nExamples:\n\n```plaintext\ngetChar(\"hello\",1) ==> 'e'\n```",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main {\\n\\t\\n\\t{\\n\\t\\t\\n\\t}\\n\\t\\n\\t//test case below (dont change):\\n\\tpublic static void main(String[] args){\\n\\t\\tSystem.out.println(getChar(\\\"hello\\\",1)); //should be 'e'\\n\\t}\\n}\",\"defaultFilePath\":\"Main.java\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"unit_test\",\"title\":\"tests\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void tests() {\\n    Main a = new Main();\\n    assertEquals(a.getChar(\\\"howdy\\\",2),'w');\\n    assertEquals(a.getChar(\\\"holla\\\",4),'a');\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"class Main {\\n\\t\\n\\t{\\n\\t\\t\\n\\t}\\n\\t\\n\\t//test case below (dont change):\\n\\tpublic static void main(String[] args){\\n\\t\\tSystem.out.println(getChar(\\\"hello\\\",1)); //should be 'e'\\n\\t}\\n}\"],\"t\":1613415108000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16309,
    "title": "Lab03_Problem18: Accumulator Method String Practice 2",
    "prompt_md": "\nWrite a method header on line two with the following specs:  \n\n  \nReturns:\n\n```\na String\n```\n\nName:\n\n```\nthirdLetter\n```\n\nParameters:\n\n```\na String called s\n```\n\n\n\nThen complete the method by programming the following behavior\n\n```\nReturns every 3rd letter of the String s, starting the first letter.\nSee below examples.\n```\n\n\n\nExamples:\n\n```\nthirdLetter(\"hello there\") ==> \"hltr\"\nthirdLetter(\"technology\") ==> \"thly\"\n```\n\n \n\n\n\n",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main {\\n\\t\\n\\t{\\n\\t\\t\\n\\t}\\n\\t\\n\\t//test case below (dont change):\\n\\tpublic static void main(String[] args){\\n\\t\\tSystem.out.println(thirdLetter(\\\"hello there\\\")); //\\\"hltr\\\"\\n\\t\\tSystem.out.println(thirdLetter(\\\"technology\\\")); //\\\"thly\\\"\\n\\t}\\n}\",\"defaultFilePath\":\"Main.java\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"unit_test\",\"title\":\"tests\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void tests() {\\n    Main a = new Main();\\n    \\n    assertEquals(\\\"hltr\\\",a.thirdLetter(\\\"hello there\\\"));\\n    assertEquals(\\\"thly\\\",a.thirdLetter(\\\"technology\\\"));\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"class Main {\\n\\t\\n\\t{\\n\\t\\t\\n\\t}\\n\\t\\n\\t//test case below (dont change):\\n\\tpublic static void main(String[] args){\\n\\t\\tSystem.out.println(thirdLetter(\\\"hello there\\\")); //\\\"hltr\\\"\\n\\t\\tSystem.out.println(thirdLetter(\\\"technology\\\")); //\\\"thly\\\"\\n\\t}\\n}\"],\"t\":1613419656000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16310,
    "title": "Lab03_Problem03: Method Header Practice 2",
    "prompt_md": "Write a method header on line two with the following specs:\n\n```plaintext\nReturns: a boolean\nName: beTrue\nParameters: none\n```\n\nThe only code you type should be on line two.",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main {\\n\\t\\n\\t{\\n\\t\\treturn true;\\n\\t}\\n}\",\"defaultFilePath\":\"Main.java\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"unit_test\",\"title\":\"testone\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void testone() {\\n    Main a = new Main();\\n    assertEquals(true,a.beTrue());\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"class Main {\\n\\t\\n\\t{\\n\\t\\treturn true;\\n\\t}\\n}\"],\"t\":1613415104000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16311,
    "title": "066 - Static Practice - UAGStudent Class",
    "prompt_md": "\nCreate a UAGStudent class with the following:\n\n\n\n**1. Class Variables**\n\n* name (String)\n* grade (int)\n* principalName (String, static, default value: \"Ms. McKoy\")\n* studentID (String)\n* nextID (int, static, default value: 100)\n\n\n\nNote: studentID is composed of the student's first initial in uppercase followed by the nextID\n\n\n\n**2. Constructors**\n\n* Main constructor takes in name and grade only.  \n\nWhen the main constructor is called, it generates a student's ID by combining the student's first initial in uppercase combined with the next ID.  The nextID should then be increased by 1.\n\n\n\nExample: name is \"Alfonso Lewis\", static variable nextID is 105 ==> studentID is A105\n\n\n\n**3. Class Methods**\n\n\n\nWrite a static method called \"newPrincipal\" that returns nothing and takes in one String parameters that represents the new principal's name.  Set the static variable principalName to the new principal's name.\n\n\n\nWrite a static method called \"resetID\" that takes no arguments and returns nothing.  This method resets the nextID to 100.\n\n\n\nWrite a method called \"toString\" that has no parameters and returns a String.  This method should return the student's name and the student's ID, separated by a space.\n\n\n\n**Below is the code being used to test your code:**\n\n```\nUAGStudent s1 = new UAGStudent(\"Muhammed\",11);\nUAGStudent s2 = new UAGStudent(\"Alan\",11);\nUAGStudent s3 = new UAGStudent(\"Sophie\",11);\n\nassertEquals(\"Ms. McKoy\", s1.principalName);\nassertEquals(\"M100\",s1.studentID);\nassertEquals(\"A101\",s2.studentID);\nassertEquals(\"S102\",s3.studentID);\n\nUAGStudent.newPrincipal(\"Mr. McKoy\");\nassertEquals(\"Mr. McKoy\",s1.principalName);\n\nUAGStudent.resetID();\nUAGStudent s4 = new UAGStudent(\"kevin\",11);\nassertEquals(\"K100\",s4.studentID);\nassertEquals(\"kevin K100\",s4.toString());\n```\n\n\n\n",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main\\n{\\n\\tpublic static void main(String[] args)\\n\\t{\\n\\t\\t\\n\\t}\\n}\",\"defaultFilePath\":\"Main.java\",\"extraFiles\":{\"ZmlsZTEuamF2YQ==\":{\"contents\":\"\",\"language\":\"java\",\"type\":\"\"}}}},\"grading\":{\"testCases\":[{\"type\":\"unit_test\",\"title\":\"tests\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void tests() {\\n    UAGStudent s1 = new UAGStudent(\\\"Muhammed\\\",11);\\n    UAGStudent s2 = new UAGStudent(\\\"Alan\\\",11);\\n    UAGStudent s3 = new UAGStudent(\\\"Sophie\\\",11);\\n    \\n    assertEquals(\\\"Ms. McKoy\\\", s1.principalName);\\n    assertEquals(\\\"M100\\\",s1.studentID);\\n    assertEquals(\\\"A101\\\",s2.studentID);\\n    assertEquals(\\\"S102\\\",s3.studentID);\\n    \\n    UAGStudent.newPrincipal(\\\"Mr. McKoy\\\");\\n    assertEquals(\\\"Mr. McKoy\\\",s1.principalName);\\n    \\n    UAGStudent.resetID();\\n    UAGStudent s4 = new UAGStudent(\\\"kevin\\\",11);\\n    assertEquals(\\\"K100\\\",s4.studentID);\\n    assertEquals(\\\"kevin K100\\\",s4.toString());\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null}}"
  },
  {
    "id": 16312,
    "title": "Lab04_Problem07: Build Array",
    "prompt_md": "\nAsk the user how many names they would like to enter.  Build an array that is composed of all the names entered.  Print out the first letter of each name, all on one line, with no spaces.\n\n\n\nSteps:\n\n\n\n1. Create a new scanner object\n\n```\n//example:\nScanner input = new Scanner(System.in);\n//doesnt have to be called input\n```\n\n2. Use the scanner to ask the user how many names they would like to enter\n\n```\ninput.nextInt() will get integer, don't forget to save it to a variable!\n\nRemember to use input.nextLine() after using input.nextInt()!  You do not\nneed to save the nextLine() to a variable (only for this part though, you'll\nprobably want to save it later)\n```\n\n\n\n3. Create a new array and repeatedly ask the user to enter names (the number of times that they wanted to):\n\n```\ninput.nextLine() will get a String, save it to a variable!\n```\n\n\n\n4. Loop through the array and print out the first letter of each name (use print instead of println), making sure there's no space between them.\n\n\n\n",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"import java.util.Scanner;\\n\\nclass Main\\n{\\n\\tpublic static void main(String[] args)\\n\\t{\\n\\t\\t\\n\\t}\\n}\",\"defaultFilePath\":\"Main.java\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"stdout\",\"title\":\"barry larry harry mary carrie sari\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"blhmcs\",\"stdoutCompareMethod\":\"regex\",\"stdin\":\"6\\nbarry\\nlarry\\nharry\\nmary\\ncarrie\\nsari\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"bob mary june gwen paul\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"BMJgp\",\"stdoutCompareMethod\":\"regex\",\"stdin\":\"5\\nBob\\nMary\\nJune\\ngwen\\npaul\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"import java.util.Scanner;\\n\\nclass Main\\n{\\n\\tpublic static void main(String[] args)\\n\\t{\\n\\t\\t\\n\\t}\\n}\"],\"t\":1614275015000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16313,
    "title": "Lab02_Problem16: Sum Odds in Range",
    "prompt_md": "You are to write a program that will calculate and print out the **SUM OF ODD** numbers in between num1 and num2 inclusive. Your output should all be on one line, separated by spaces. You can assume that the following:\n\n```plaintext\nnum2 > num1\n```\n\n### Sample Input #1\n\n```plaintext\n3\n11\n```\n\n### Sample Output #1\n\n```plaintext\n35\n```\n\n###  Sample Input #2\n\n```plaintext\n4\n20\n```\n\n### Sample Output #2\n\n```plaintext\n96\n```\n\n###  Sample Input #3\n\n```plaintext\n-2\n6\n```\n\n### Sample Output #3\n\n```plaintext\n8\n```",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"import java.util.Scanner;\\n\\nclass Main {\\n    public static void main(String[] args) {\\n        Scanner s = new Scanner(System.in);\\n\\n        int num1 = s.nextInt();\\n        int num2 = s.nextInt();\\n        \\n        //start below\\n\\n\\n    }\\n}\",\"defaultFilePath\":\"\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"stdout\",\"title\":\"-2 6\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"8\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"-2\\n6\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"4 20\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"96\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"4\\n20\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"3 11\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"35\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"3\\n11\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"import java.util.Scanner;\\n\\nclass Main {\\n  public static void main(String[] args) {\\n    Scanner s = new Scanner(System.in);\\n    System.out.print(\\\"#1: \\\");\\n    int num1 = s.nextInt();\\n    System.out.print(\\\"#2: \\\");\\n    int num2 = s.nextInt();\\n    //start on line 11\\n    \\n    \\n  }\\n}\"],\"t\":1612876249000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16314,
    "title": "Lab02_Problem03: For Loops 3",
    "prompt_md": "Write a for loop that will loop through every character of a word (may include spaces) and print out each character, each on a separate line\n\n### Sample Input #1\n\n```plaintext\nhello\n```\n\n### Sample Output #1\n\n```plaintext\nh\ne\nl\nl\no\n```\n\n###  Sample Input #2\n\n```plaintext\nzimbabwe\n```\n\n### Sample Output #2\n\n```plaintext\nz\ni\nm\nb\na\nb\nw\ne\n```\n\n###  Sample Input #3\n\n```plaintext\nwow!\n```\n\n### Sample Output #3\n\n```plaintext\nw\no\nw\n!\n```",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"import java.util.Scanner;\\n\\nclass Main {\\n    public static void main(String[] args) {\\n        Scanner in = new Scanner(System.in);\\n\\n        String word = in.nextLine();\\n        //write your code below\\n\\n\\n    }\\n}\",\"defaultFilePath\":\"\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"stdout\",\"title\":\"biblethump kappa\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"t\\nh\\nu\\nm\\np\\n \\nk\\na\\np\\np\\na\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"thump kappa\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"FORLOOP\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"F\\nO\\nR\\nL\\nO\\nO\\nP\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"FORLOOP\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"howdy\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"h\\no\\nw\\nd\\ny\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"howdy\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"import java.util.Scanner;\\n\\nclass Main {\\n  public static void main(String[] args) {\\n    Scanner inp = new Scanner(System.in);\\n    System.out.print(\\\"In: \\\");\\n    String word = inp.nextLine();\\n    //write your code below\\n    \\n    \\n  }\\n}\\n}\"],\"t\":1612811814000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16315,
    "title": "058 - Scope and Global Variables 1",
    "prompt_md": "\nFix the following code so it produces the following output:\n\n\n\n```\none word\n```\n\n\n\nNote: You should achieve this WITHOUT changing any print statements.\n\n\n\n",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main\\n{\\n  public static void main(String[] args)\\n  {\\n    String text = \\\"hello\\\";\\n    if (text.indexOf(\\\" \\\") == -1) //if a space doesn't exist\\n    {\\n    \\tString output = \\\"one word\\\";\\n    }\\n    else\\n    {\\n    \\tString output = \\\"more than one word\\\";\\n    }\\n    System.out.println(output);\\n  }\\n}\\n\\n\",\"defaultFilePath\":\"Main.java\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"stdout\",\"title\":\"tests\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"one word\",\"stdoutCompareMethod\":\"equals\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"class Main\\n{\\n  public static void main(String[] args)\\n  {\\n    String text = \\\"hello\\\";\\n    if (text.indexOf(\\\" \\\") == -1) //if a space doesn't exist\\n    {\\n    \\tString output = \\\"one word\\\";\\n    }\\n    else\\n    {\\n    \\tString output = \\\"more than one word\\\";\\n    }\\n    System.out.println(output);\\n  }\\n}\\n\\n\"],\"t\":1614274908000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16316,
    "title": "Lab02_Problem04: For Loops 4",
    "prompt_md": "Write a for loop that will print out every other character in a String, starting with the first letter. These characters should be printed all on one line with no space in between.\n\n### Sample Input #1\n\n```plaintext\nhello\n```\n\n### Sample Output #1\n\n```plaintext\nhlo\n```\n\n###  Sample Input #2\n\n```plaintext\nso code very wow\n```\n\n### Sample Output #2\n\n```plaintext\ns oevr o\n```",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"import java.util.Scanner;\\n\\nclass Main {\\n    public static void main(String[] args) {\\n        Scanner in = new Scanner(System.in);\\n\\n        String word = in.nextLine();\\n        //write your code below\\n\\n\\n    }\\n}\",\"defaultFilePath\":\"\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"stdout\",\"title\":\"hheellllootthheerree\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"hellothere\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"hheellllootthheerree\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"apcompsci\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"acmsi\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"apcompsci\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"hello\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"hlo\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"hello\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"import java.util.Scanner;\\n\\nclass Main {\\n  public static void main(String[] args) {\\n    Scanner inp = new Scanner(System.in);\\n    System.out.print(\\\"In:\\\");\\n    String word = inp.nextLine();\\n    //write your code below\\n    \\n    \\n  }\\n}\"],\"t\":1612811812000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16317,
    "title": "Lab02_Problem08: Further For Loop Practice 2 (skipping by 3s)",
    "prompt_md": "Write a for loop that will print out a series of numbers starting at 0 and ending before the given input value, skipping 3 each time.\n\n### Sample Input #1\n\n```plaintext\n7\n```\n\n### Sample Output #1\n\n```plaintext\n0 3 6\n```\n\n###  Sample Input #2\n\n```plaintext\n12\n```\n\n### Sample Output #2\n\n```plaintext\n0 3 6 9\n```\n\n###  Sample Input #3\n\n```plaintext\n20\n```\n\n### Sample Output #3\n\n```plaintext\n0 3 6 9 12 15 18\n```\n\nHINT: You'll want to change the increment part of the for loop!",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"import java.util.Scanner;\\n\\nclass Main {\\n    public static void main(String[] args) {\\n        Scanner in = new Scanner(System.in);\\n\\n        int x = in.nextInt();\\n        //write your code below\\n\\n\\n    }\\n}\",\"defaultFilePath\":\"\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"stdout\",\"title\":\"15\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"0 3 6 9 12\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"15\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"7\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"0 3 6\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"7\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc3\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"0 3 6 9 12 15 18 21 24 27 30 33\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"34\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc4\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"0 3 6 9 12 15 18 21 24 27 30 33 36 39\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"42\",\"sourceFile\":\"\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"import java.util.Scanner;\\n\\nclass Main {\\n  public static void main(String[] args) {\\n    Scanner inp = new Scanner(System.in);\\n    System.out.print(\\\"In:\\\");\\n    int x = inp.nextInt();\\n    //write your code below\\n    \\n    for (int i = 0; i \\u003c x; i += 3) {\\n    \\tSystem.out.print(i + \\\" \\\");\\n    }\\n    \\n  }\\n}\"],\"t\":1612874082000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16318,
    "title": "067 - Challenge - Create Your Own Class",
    "prompt_md": "\nCreate your own class (any class!) with the following requirements:\n\n* At least 4 class variables (at least one of which is static)\n* At least 2 constructors\n* At least 3 methods (at least one of which is static)\n\n\n\n",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"public class Main\\n{\\n\\tpublic static void main(String[] args)\\n\\t{\\n\\t\\t\\n\\t}\\n}\",\"defaultFilePath\":\"Main.java\",\"extraFiles\":{\"ZmlsZTEuamF2YQ==\":{\"contents\":\"\",\"language\":\"java\",\"type\":\"\"}}}},\"grading\":{\"testCases\":[{\"type\":\"manual\",\"title\":\"Manual Grading\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null}}"
  },
  {
    "id": 16319,
    "title": "108 - AL6 - ArrayList Methods - Add (insert)",
    "prompt_md": "\nThe last ArrayList method we are going to learn is... .add() again!\n\n\n\nExcept this time, instead of .add() taking one parameter (the thing we want to add), this time, we will be giving it two parameters.  The two parameters are:\n\n```\n.add(i,element)\n// i ==> the index you want to insert at\n// element ==> the element you want to insert at index i\n```\n\n\n\nFor example, if you had an ArrayList called nums with the values (4,2,5,6), and you run the following:\n\n```\nnums.add(1,100);\n```\n\n\n\nThe result will be (4,100,2,5,6)\n\n\n\nSo what actually happens here? The 100 is inserted into the list at position 1, and, as a result, all items from index 1 and to the right (so the 2, 5, and 6) are then shifted over to the right one position. So the 2, which was at position 1, is now at position 2, and so on.\n\n\n\nOn the left, given an ArrayList of Strings called words, insert \"hey\" in the 0th index and then insert \"yo\" in the 3rd index.\n\n\n\n",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"import java.util.ArrayList;\\n\\nclass Main\\n{\\n\\tpublic static void test(ArrayList\\u003cString\\u003e words)\\n\\t{\\n\\t\\t//write code here\\n\\t\\t\\n\\t}\\n}\",\"defaultFilePath\":\"Main.java\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"unit_test\",\"title\":\"tests\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\nimport java.util.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void tests() {\\n    ArrayList\\u003cString\\u003e a = new ArrayList\\u003cString\\u003e(Arrays.asList(\\\"how\\\",\\\"is\\\",\\\"everyone\\\",\\\"doing?\\\"));\\n    Main.test(a);\\n    ArrayList\\u003cString\\u003e b = new ArrayList\\u003cString\\u003e(Arrays.asList(\\\"hey\\\",\\\"how\\\",\\\"is\\\",\\\"yo\\\",\\\"everyone\\\",\\\"doing?\\\"));\\n    assertEquals(b,a);\\n    \\n    ArrayList\\u003cString\\u003e c = new ArrayList\\u003cString\\u003e(Arrays.asList(\\\"1\\\",\\\"2\\\",\\\"3\\\",\\\"4\\\",\\\"5\\\",\\\"6\\\"));\\n    Main.test(c);\\n    ArrayList\\u003cString\\u003e d = new ArrayList\\u003cString\\u003e(Arrays.asList(\\\"hey\\\",\\\"1\\\",\\\"2\\\",\\\"yo\\\",\\\"3\\\",\\\"4\\\",\\\"5\\\",\\\"6\\\"));\\n    assertEquals(d,c);\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null}}"
  },
  {
    "id": 16320,
    "title": "Lab05_Problem11: Return Array of Row Sums",
    "prompt_md": "\nComplete the method so that it takes in a 2-D array and returns the sums of the rows as an integer array.\n\n\n\nFor example, the if we run rowSums for the following 2D array:\n\n```\n{\n  {1,1,2}, //sum = 4\n  {3,1,2}, //sum = 6\n  {3,5,3}, //sum = 11\n  {0,1,2}  //sum = 3\n}\n\n```\n\n\n\nThen we should get the following array back:\n\n```\n{4,6,11,3}\n```\n\n\n\n",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main\\n{\\n\\tpublic static void main(String[] args)\\n\\t{\\n\\t\\tint[][] a = {\\n\\t\\t\\t{1,1,2}, //sum = 4\\n\\t\\t\\t{3,1,2}, //sum = 6\\n\\t\\t\\t{3,5,3}, //sum = 11\\n\\t\\t\\t{0,1,2}  //sum = 3\\n\\t\\t};\\n\\t\\tint[] sums = rowSums(a);\\n\\t\\tfor(int sum : sums)\\n\\t\\t\\tSystem.out.println(sum);\\n\\t\\t//this should print 4 6 11 3\\n\\t}\\n\\n    // you should complete the method below\\n\\tpublic static int[] rowSums(int[][] nums)\\n\\t{\\n\\t\\t\\n\\t}\\n}\",\"defaultFilePath\":\"\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"unit_test\",\"title\":\"tests\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void tests() {\\n    int[][] a = {\\n        {1,2,3,4},\\n        {1,1,1,1},\\n        {2,3,1,-2}\\n    };\\n    int[] b = {10,4,4};\\n    assertArrayEquals(b,Main.rowSums(a));\\n    \\n    int[][] c = {\\n        {0,0,1},\\n        {1,2,1},\\n        {2,1,2}\\n    };\\n    int[] d = {1,4,5};\\n    assertArrayEquals(d,Main.rowSums(c));\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"class Main\\n{\\n\\tpublic static void main(String[] args)\\n\\t{\\n\\t\\tint[][] a = {\\n\\t\\t\\t{1,1,2}, //sum = 4\\n\\t\\t\\t{3,1,2}, //sum = 6\\n\\t\\t\\t{3,5,3}, //sum = 11\\n\\t\\t\\t{0,1,2}  //sum = 3\\n\\t\\t};\\n\\t\\tint[] sums = rowSums(a);\\n\\t\\tfor(int sum : sums)\\n\\t\\t\\tSystem.out.println(sum);\\n\\t\\t//this should print 4 6 11 3\\n\\t}\\n\\tpublic static int[] rowSums(int[][] nums)\\n\\t{\\n\\t\\t\\n\\t}\\n}\"],\"t\":1614891957000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16321,
    "title": "Lab06_Problem04: StoreProduct class",
    "prompt_md": "## IMPORTANT: Read the instructions carefully, so as to not miss any steps.\n\n### Instructions:\n\n1.  For this problem, do NOT include _**static**_ in any of your method headers!\n2.  Do not put code in the file Main.java\n3.  You should only put code in Student.java\n4.  You can use Main.java to make Car objects and test your class if you like. Just make sure no errors are present within your testing code.\n\nWithin **StoreProduct.java**, do the following:\n\n### Declare the following five **private** data members (and do not assign any values to them):\n\n1.  a String called _label_\n2.  an int called _price_\n3.  a String called _category_\n4.  a boolean called _hasExpiration_\n5.  an int called _stock_ (represents the quantity available)\n\n*   NOTE: the variable names, AND the capitalization, should be **exactly** as shown above\n\n### Write the **five accessor** (getter) methods and the **five mutator** (setter) methods.\n\n*   Be very careful that you use the EXACT naming conventions shown in class\n*   For example, if a data member variable is called _hasExpiration_\n*   The accessor (getter) method should be called _getHasExpiration_\n*   The mutator (setter) method should be called _setHasExpiration_\n*   Pay attention to the style of the capitalization and how the “h” was lowercase in the variable name but is now **Uppercase** in the getter and setter method name\n*   Your program will not pass the test cases if your style is different than the above example.\n\n### Write **four constructors**:\n\n1.  constructor that receives all data members values as parameters\n2.  a second constructor that receives label, price, and stock, but does not receive category or hasExpiration (category defaults to \"misc\", hasExpiration defaults to false)\n3.  a third constructor that receives label and price but does not receive a category, hasExpiration, or stock (category defaults to “misc”, hasExpiration to false, and stock defaults to 0)\n4.  a fourth constructor that receives label, price, category, and hasExpiration, but does not receive stock (stock defaults to 0)\n\n_**\\*Important: make sure the values in your constructor are given in the SAME order as shown in the original list of data members above. While not important in theory, this is the only way to confirm your program works and have it tested by the system. So if you want a constructor with make, model, and price, you need to list them in that order exactly...not model, make, and price.**_\n\n### In addition to the accessor and mutator methods, the StoreProduct class should also include the following **three** methods:\n\n1.  public void expired(boolean hasExpired)\n    *   Parameters: boolean, hasExpired, which is true if the product in question has expired or false otherwise\n    *   Returns: void\n    *   Description: if the product has an expiration date (you check this via the data member variable, hasExpiration) and if the parameter hasExpired is true, then the body of this method should set the stock to zero. Otherwise, nothing happens.\n2.  public boolean customerPurchaseItem(int purchaseQuantity)\n    *   Paramters: int, the quantity of the item the customer wants to purchase\n    *   Returns: boolean\n    *   Description: this method is used to simulate a sale (a customer purchase). The method must first check if there is enough stock to fulfill the this customer purchase. You must compare the purchaseQuantity to the stock. If there is enough, then make the sale by subtracting the quantity from the stock and return true (the sale was successful). If there isn't enough, return false instead.\n3.  public double getDiscountedPrice(double _discount_)\n    *   Parameters: double, the discount percentage to be applied\n    *   Returns: double, the newly discounted price\n    *   Description: The parameter discount should be between .01 and 1 and represents a 1 to 100% discount. Your method should simply multiply the product's price by the (1 - \\_discoun\\_t) and return that number.\n\nTest your code with the Main.java class, creating several StoreProduct objects using all Constructors and print their fields/states to make sure it's correct.",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main {\\n    public static void main(String[] args) {\\n\\n        // You *CAN* include code here in your main if you want to test the Dog.java class.\\n        // You can make new Dog objects. You can print things.\\n\\n        // The code here in main will NOT be graded.\\n\\n        // HOWEVER, if any code here in main has an error, that could cause your\\n        // program to fail. So be careful.\\n        \\n    }\\n}\\n\",\"defaultFilePath\":\"\",\"defaultFileType\":\"\",\"extraFiles\":{\"U3RvcmVQcm9kdWN0LmphdmE=\":{\"contents\":\"class StoreProduct {\\n\\t// Data Members:\\n\\t\\n\\t\\n\\t\\n\\t// Constructors:\\n\\t\\n\\n\\n    // Accessor and Mutator Methods:\\n\\n\\n\\t\\n    // OTHER 3 Methods Here:\\n\\n\\n\\n}\",\"language\":\"java\",\"type\":\"\"}}}},\"grading\":{\"testCases\":[{\"type\":\"unit_test\",\"title\":\"1st constructor\",\"headline\":\"\",\"points\":15,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n    @Before\\n    public void setUp() {\\n        // Setup code here (if required)\\n    }\\n\\n    @After\\n    public void tearDown() {\\n        // Teardown code here (if required)\\n    }\\n\\n    @Test\\n    public void testDefaultCase() {\\n        StoreProduct s1 = new StoreProduct(\\\"Eggs\\\",3,\\\"Produce\\\",true,10);\\n\\n        assertEquals(\\\"Eggs\\\", s1.getLabel());\\n        assertEquals(3, s1.getPrice());\\n        assertEquals(\\\"Produce\\\", s1.getCategory());\\n        assertEquals(true, s1.getHasExpiration());\\n        assertEquals(10, s1.getStock());\\n    }\\n}\\n\\n\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"unit_test\",\"title\":\"2nd constructor\",\"headline\":\"\",\"points\":15,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n    @Before\\n    public void setUp() {\\n        // Setup code here (if required)\\n    }\\n\\n    @After\\n    public void tearDown() {\\n        // Teardown code here (if required)\\n    }\\n\\n    @Test\\n    public void testDefaultCase() {\\n        StoreProduct s1 = new StoreProduct(\\\"Red Tie\\\", 18, 4);\\n\\n        assertEquals(\\\"Red Tie\\\", s1.getLabel());\\n        assertEquals(18, s1.getPrice());\\n        assertEquals(\\\"misc\\\", s1.getCategory().toLowerCase());\\n        assertEquals(false, s1.getHasExpiration());\\n        assertEquals(4, s1.getStock());\\n    }\\n}\\n\\n\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"unit_test\",\"title\":\"3rd constructor\",\"headline\":\"\",\"points\":15,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n    @Before\\n    public void setUp() {\\n        // Setup code here (if required)\\n    }\\n\\n    @After\\n    public void tearDown() {\\n        // Teardown code here (if required)\\n    }\\n\\n    @Test\\n    public void testDefaultCase() {\\n        StoreProduct s1 = new StoreProduct(\\\"Omega Speedmaster Day/Date\\\", 3850);\\n\\n        assertEquals(\\\"Omega Speedmaster Day/Date\\\", s1.getLabel());\\n        assertEquals(3850, s1.getPrice());\\n        assertEquals(\\\"misc\\\", s1.getCategory().toLowerCase());\\n        assertEquals(false, s1.getHasExpiration());\\n        assertEquals(0, s1.getStock());\\n    }\\n}\\n\\n\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"unit_test\",\"title\":\"4th constructor\",\"headline\":\"\",\"points\":15,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n    @Before\\n    public void setUp() {\\n        // Setup code here (if required)\\n    }\\n\\n    @After\\n    public void tearDown() {\\n        // Teardown code here (if required)\\n    }\\n\\n    @Test\\n    public void testDefaultCase() {\\n        StoreProduct s1 = new StoreProduct(\\\"Oculus Quest 2\\\", 299, \\\"Electronics\\\", false);\\n\\n        assertEquals(\\\"Oculus Quest 2\\\", s1.getLabel());\\n        assertEquals(299, s1.getPrice());\\n        assertEquals(\\\"Electronics\\\", s1.getCategory());\\n        assertEquals(false, s1.getHasExpiration());\\n        assertEquals(0, s1.getStock());\\n    }\\n}\\n\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"unit_test\",\"title\":\"Expired Test\",\"headline\":\"\",\"points\":15,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n    @Before\\n    public void setUp() {\\n        // Setup code here (if required)\\n    }\\n\\n    @After\\n    public void tearDown() {\\n        // Teardown code here (if required)\\n    }\\n\\n    @Test\\n    public void testDefaultCase() {\\n        StoreProduct s1 = new StoreProduct(\\\"Eggs\\\",3,\\\"Produce\\\",true,10);\\n\\n        s1.expired(false);\\n        assertEquals(10, s1.getStock());\\n        s1.expired(true);\\n        assertEquals(0, s1.getStock());\\n    }\\n}\\n\\n\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"This test case checks whether or not your expired() method works correctly.\\n\\n*   it first calls the expired() method with a parameter of “false”\\n*   thus, nothing should happen and the stock should not change\\n*   it then calls the expired() method with a parameter of “true”\\n*   in this case, stock should be changed to zero for that item\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"unit_test\",\"title\":\"customerPurchaseItem Test\",\"headline\":\"\",\"points\":15,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n    @Before\\n    public void setUp() {\\n        // Setup code here (if required)\\n    }\\n\\n    @After\\n    public void tearDown() {\\n        // Teardown code here (if required)\\n    }\\n\\n    @Test\\n    public void testDefaultCase() {\\n        StoreProduct s1 = new StoreProduct(\\\"Multigrain Bread\\\", 4, \\\"Bakery\\\", true, 3);\\n\\n        assertEquals(true,s1.customerPurchaseItem(1));\\n        assertEquals(2, s1.getStock());\\n        assertEquals(true, s1.customerPurchaseItem(2));\\n        assertEquals(0, s1.getStock());\\n        assertEquals(false,s1.customerPurchaseItem(1));\\n    }\\n}\\n\\n\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"This test case examines your customerPurchaseItem() method.\\n\\n*   make sure it returns true or false based on whether or not there was enough stock to make the sale\\n*   and make sure it updates the stock accordingly\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"unit_test\",\"title\":\"Discount Test\",\"headline\":\"\",\"points\":10,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n    @Before\\n    public void setUp() {\\n        // Setup code here (if required)\\n    }\\n\\n    @After\\n    public void tearDown() {\\n        // Teardown code here (if required)\\n    }\\n\\n    @Test\\n    public void testDefaultCase() {\\n        StoreProduct s1 = new StoreProduct(\\\"6.6 Pound Tub Nutella\\\", 22, \\\"Grocery\\\", true, 2);\\n\\n        assertEquals(11.0, s1.getDiscountedPrice(0.5), 0.00001);\\n        assertEquals(18.04, s1.getDiscountedPrice(0.18), 0.00001);\\n        assertEquals(16.94, s1.getDiscountedPrice(0.23), 0.00001);\\n    }\\n}\\n\\n\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main {\\n    public static void main(String[] args) {\\n\\n        // You *CAN* include code here in your main if you want to test the Dog.java class.\\n        // You can make new Dog objects. You can print things.\\n\\n        // The code here in main will NOT be graded.\\n\\n        // HOWEVER, if any code here in main has an error, that could cause your\\n        // program to fail. So be careful.\\n        \\n    }\\n}\\n\",\"defaultFilePath\":\"\",\"defaultFileType\":\"\",\"extraFiles\":{\"U3RvcmVQcm9kdWN0LmphdmE=\":{\"contents\":\"class StoreProduct {\\n\\t// Data Members:\\n\\tprivate String label;\\n\\tprivate int price;\\n\\tprivate String category;\\n\\tprivate boolean hasExpiration;\\n\\tprivate int stock;\\n\\n\\t// Constructors:\\n\\tpublic StoreProduct(String label, int price, String category, boolean hasExpiration, int stock) {\\n\\t\\tthis.label = label;\\n\\t\\tthis.price = price;\\n\\t\\tthis.category = category;\\n\\t\\tthis.hasExpiration = hasExpiration;\\n\\t\\tthis.stock = stock;\\n\\t}\\n\\n\\tpublic StoreProduct(String label, int price, int stock) {\\n\\t\\tthis.label = label;\\n\\t\\tthis.price = price;\\n\\t\\tthis.stock = stock;\\n\\t\\tthis.category = \\\"misc\\\";\\n\\t\\tthis.hasExpiration = false;\\n\\t}\\n\\n\\tpublic StoreProduct(String label, int price) {\\n\\t\\tthis.label = label;\\n\\t\\tthis.price = price;\\n\\t\\tthis.stock = 0;\\n\\t\\tthis.category = \\\"misc\\\";\\n\\t\\tthis.hasExpiration = false;\\n\\t}\\n\\n\\tpublic StoreProduct(String label, int price, String category, boolean hasExpiration) {\\n\\t\\tthis.label = label;\\n\\t\\tthis.price = price;\\n\\t\\tthis.category = category;\\n\\t\\tthis.hasExpiration = hasExpiration;\\n\\t\\tthis.stock = 0;\\n\\t}\\n\\t\\n\\t// Accessor and Mutator Methods:\\n\\tpublic String getLabel() {\\n\\t\\treturn label;\\n\\t}\\n\\n\\tpublic void setLabel(String label) {\\n\\t\\tthis.label = label;\\n\\t}\\n\\n\\tpublic int getPrice() {\\n\\t\\treturn price;\\n\\t}\\n\\n\\tpublic void setPrice(int price) {\\n\\t\\tthis.price = price;\\n\\t}\\n\\n\\tpublic String getCategory() {\\n\\t\\treturn category;\\n\\t}\\n\\n\\tpublic void setCategory(String category) {\\n\\t\\tthis.category = category;\\n\\t}\\n\\n\\tpublic boolean getHasExpiration() {\\n\\t\\treturn hasExpiration;\\n\\t}\\n\\n\\tpublic void setHasExpiration(boolean hasExpiration) {\\n\\t\\tthis.hasExpiration = hasExpiration;\\n\\t}\\n\\n\\tpublic int getStock() {\\n\\t\\treturn stock;\\n\\t}\\n\\n\\tpublic void setStock(int stock) {\\n\\t\\tthis.stock = stock;\\n\\t}\\n\\t\\n\\t// OTHER METHODS\\n\\tpublic void expired(boolean hasExpired) {\\n\\t\\tif (hasExpiration \\u0026\\u0026 hasExpired) {\\n\\t\\t\\tthis.stock = 0;\\n\\t\\t}\\n\\t}\\n\\t\\n\\tpublic boolean customerPurchaseItem(int purchaseQuantity) {\\n\\t\\tif (purchaseQuantity \\u003c= stock) {\\n\\t\\t\\tthis.stock -= purchaseQuantity;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\t\\n\\tpublic double getDiscountedPrice(double discount) {\\n\\t\\treturn this.price * (1 - discount);\\n\\t}\\n\\t\\n\\t\\n}\\n\",\"language\":\"java\",\"type\":\"\"}}}},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{\"qwnzaflouxtvmkob\":{\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"\"],\"t\":1616106832000}},\"language\":\"java\",\"path\":\"StoreProduct.java\",\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"\\nclass Main\\n{\\n\\tpublic static void main(String[] args)\\n\\t{\\n\\t\\n\\t}\\n}\"],\"t\":1616106832000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16322,
    "title": "Lab03_Problem09: Method Header Practice 8",
    "prompt_md": "Write a method header on line two with the following specs:\n\n```plaintext\nReturns: a String\nName: makeThreeSubstr\nParameters:\n   a String called \"word\"\n   an integer called \"startIndex\"\n   an integer called \"endIndex\"\n```\n\nThen, starting on line 4, write code that will return 3x the substring (no spaces) from \"startIndex\" to \"endIndex\"\n\nExamples:\n\n```plaintext\nmakeThreeSubstr(\"hello\",0,2) ==> \"hehehe\"\nmakeThreeSubstr(\"shenanigans\",3,7) ==> \"naninaninani\"\n```",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main {\\n\\t\\n\\t{\\n\\t\\t\\n\\t}\\n\\t\\n\\t//test case below (dont change):\\n\\tpublic static void main(String[] args){\\n\\t\\tSystem.out.println(makeThreeSubstr(\\\"hello\\\",0,2)); //should be hehehe\\n\\t\\tSystem.out.println(makeThreeSubstr(\\\"shenanigans\\\",3,7)); //should be naninaninani\\n\\t}\\n}\",\"defaultFilePath\":\"Main.java\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"unit_test\",\"title\":\"tests\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void tests() {\\n    Main a = new Main();\\n    \\n    assertEquals(a.makeThreeSubstr(\\\"shenanigans\\\",3,7),\\\"naninaninani\\\");\\n    assertEquals(a.makeThreeSubstr(\\\"hello\\\",0,2),\\\"hehehe\\\");\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"class Main {\\n\\t\\n\\t{\\n\\t\\t\\n\\t}\\n\\t\\n\\t//test case below (dont change):\\n\\tpublic static void main(String[] args){\\n\\t\\tSystem.out.println(makeThreeSubstr(\\\"hello\\\",0,2)); //should be hehehe\\n\\t\\tSystem.out.println(makeThreeSubstr(\\\"shenanigans\\\",3,7)); //should be naninaninani\\n\\t}\\n}\"],\"t\":1613415112000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16323,
    "title": "Lab03_Problem14: Accumulator Method Practice 4",
    "prompt_md": "\n Write a method header on line two with the following specs:  \n\n\nReturns:\n\n```\nan integer\n```\n\nName:\n\n```\ncountA\n```\n\nParameters:\n\n```\na String called s\n```\n\nPurpose:\n\n```\ncount the number of occurrences of 'a' or 'A' within s\n```\n\n\n\nExamples:\n\n```\ncountA(\"aaa\") ==> 3\ncountA(\"aaBBdf8k3AAadnklA\") ==> 6\n```\n\n\n\nHint: How do you write a for loop to loop through every letter of a string?  You've done this multiple times already :)\n\n\n\n",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main {\\n\\t\\n\\t{\\n\\t\\t\\n\\t}\\n\\t\\n\\t//test case below (dont change):\\n\\tpublic static void main(String[] args){\\n\\t\\tSystem.out.println(countA(\\\"aaA\\\")); //3\\n\\t\\tSystem.out.println(countA(\\\"aaBBdf8k3AAadnklA\\\")); //6\\n\\t}\\n}\",\"defaultFilePath\":\"Main.java\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"unit_test\",\"title\":\"tests\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void tests() {\\n    Main a = new Main();\\n    \\n    assertEquals(3,a.countA(\\\"aaA\\\"));\\n    assertEquals(6,a.countA(\\\"aaBBdf8k3AAadnklA\\\"));\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"class Main {\\n\\t\\n\\t{\\n\\t\\t\\n\\t}\\n\\t\\n\\t//test case below (dont change):\\n\\tpublic static void main(String[] args){\\n\\t\\tSystem.out.println(countA(\\\"aaA\\\")); //3\\n\\t\\tSystem.out.println(countA(\\\"aaBBdf8k3AAadnklA\\\")); //6\\n\\t}\\n}\"],\"t\":1613416164000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16324,
    "title": "Lab04_Problem16: Finding Max Length in String Array",
    "prompt_md": "\n Complete the maxLength method so that given the array words, it will return the word with the largest length.\n\n\n\n",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main\\n{\\n\\tpublic static void main(String[] args) \\n\\t{\\n\\t\\tString[] arr = {\\\"hey\\\",\\\"yolo\\\",\\\"hi\\\",\\\"this is long\\\"};\\n\\t\\tSystem.out.println(maxLength(arr));\\n\\t\\t//should print \\\"this is long\\\"\\n\\t}\\n\\tpublic static String maxLength(String[] words)\\n\\t{\\n\\t\\t\\n\\t}\\n}\",\"defaultFilePath\":\"Main.java\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"unit_test\",\"title\":\"tests\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void tests() {\\n    String[] a = {\\\"heya\\\",\\\"yolo\\\",\\\"YOOOOO\\\",\\\"super long\\\",\\\"ez\\\"};\\n    assertEquals(\\\"super long\\\",Main.maxLength(a));\\n    \\n    String[] b = {\\\"gg\\\",\\\"ez\\\",\\\"no re\\\",\\\"whaddup\\\"};\\n    assertEquals(\\\"whaddup\\\",Main.maxLength(b));\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"class Main\\n{\\n\\tpublic static void main(String[] args) \\n\\t{\\n\\t\\tString[] arr = {\\\"hey\\\",\\\"yolo\\\",\\\"hi\\\",\\\"this is long\\\"};\\n\\t\\tSystem.out.println(maxLength(arr));\\n\\t\\t//should print \\\"this is long\\\"\\n\\t}\\n\\tpublic static String maxLength(String[] words)\\n\\t{\\n\\t\\t\\n\\t}\\n}\"],\"t\":1614276085000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16325,
    "title": "Lab06_Problem01: Student Class",
    "prompt_md": "## IMPORTANT: Read the instructions carefully, so as to not miss any steps.\n\nInstructions:\n\n1.  For this problem, do NOT include _**static**_ in any of your method headers!\n2.  Do not put code in the file Main.java\n3.  You should only put code in Student.java\n\nWithin Student.java, do the following:\n\nDeclare the following **private** data members (and do not assign any values to them):\n\n*   a String called studentName\n*   an int called studentAge\n\nCreate the following four accessor and mutator methods:\n\n**getStudentName()**\n\n*   Formal Parameters: none\n*   Returns: a String\n*   Purpose: returns the value of the class data member studentName\n\n**getStudentAge()**\n\n*   Formal Parameters: none\n*   Returns: an int\n*   Purpose: returns the value of the class data member studentAge\n\n**setStudentName()**\n\n*   Formal Parameters: a String called studentName\n*   Returns: void\n*   Purpose: sets the class variable studentName to have the value of the parameter studentName\n\n**setStudentAge()**\n\n*   Formal Parameters: an int called studentAge\n*   Returns: void\n*   Purpose: sets the class variable studentAge to have the value of the parameter studentAge",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main {\\n    public static void main(String[] args) {\\n\\n        // You *CAN* include code here in your main if you want to test the Dog.java class.\\n        // You can make new Student objects. You can print things.\\n\\n        // The code here in main will NOT be graded.\\n\\n        // HOWEVER, if any code here in main has an error, that could cause your\\n        // program to fail. So be careful.\\n        \\n    }\\n}\\n\",\"defaultFilePath\":\"\",\"defaultFileType\":\"\",\"extraFiles\":{\"U3R1ZGVudC5qYXZh\":{\"contents\":\"class Student {\\n\\t// Data Members:\\n\\t\\n\\t\\n\\n\\t\\n\\t// Constructors: there is NO CONSTRUCTOR NEEDED for this problem\\n\\t\\n    \\n\\n\\n    // Accessor and Mutator Methods:\\n\\n\\n\\t\\n}\",\"language\":\"java\",\"type\":\"\"}}}},\"grading\":{\"testCases\":[{\"type\":\"unit_test\",\"title\":\"tests\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void tests() {\\n    Student a = new Student();\\n    a.setStudentName(\\\"John\\\");\\n    a.setStudentAge(10);\\n    assertEquals(\\\"John\\\",a.getStudentName());\\n    assertEquals(10,a.getStudentAge());\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"class Main\\n{\\n\\t\\n\\t\\n    \\n}\"],\"t\":1616093015000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16326,
    "title": "Lab02_Problem09: Further For Loop Practice 3 (descending)",
    "prompt_md": "Write a for loop that will print out a series of numbers starting at one less than the given input and ending at 0.\n\n### Sample Input #1\n\n```plaintext\n7\n```\n\n### Sample Output #1\n\n```plaintext\n6 5 4 3 2 1 0\n```\n\n###  Sample Input #2\n\n```plaintext\n12\n```\n\n### Sample Output #2\n\n```plaintext\n11 10 9 8 7 6 5 4 3 2 1 0\n```\n\n###  Sample Input #3\n\n```plaintext\n20\n```\n\n### Sample Output #3\n\n```plaintext\n19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0\n```",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"import java.util.Scanner;\\n\\nclass Main {\\n    public static void main(String[] args) {\\n        Scanner in = new Scanner(System.in);\\n\\n        int x = in.nextInt();\\n        //write your code below\\n\\n\\n    }\\n}\",\"defaultFilePath\":\"\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"stdout\",\"title\":\"5\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"4 3 2 1 0\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"5\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc2\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"17\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"import java.util.Scanner;\\n\\nclass Main {\\n  public static void main(String[] args) {\\n    Scanner inp = new Scanner(System.in);\\n    System.out.print(\\\"In:\\\");\\n    int x = inp.nextInt();\\n    //write your code below\\n    \\n    \\n  }\\n}\"],\"t\":1612874085000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16327,
    "title": "Lab08_Problem06: ArrayList Exercise 6",
    "prompt_md": "\nCreate a method that:\n\n* is called twoTimes\n* returns a new ArrayList of Integers\n* takes in a single parameter - an ArrayList of Integers\n\n\n\nThis method should create a new ArrayList of Integers that contains every value of the ArrayList parameter repeated twice.\n\n\n\nFor example, if the parameter is\n\n```\n(1,5,3,7)\n```\n\nThe method should return a **new** ArrayList of Integers with\n\n```\n(1,1,5,5,3,3,7,7)\n```\n\n\n\n",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"import java.util.*;\\n\\nclass Main {\\n\\tpublic static void Main(String[] args) {\\n\\t\\t// You needn't code anything here unless you want to test your method\\n\\t}\\n\\n\\n\\t//create your method below\\n\\t\\n}\\n\",\"defaultFilePath\":\"Main.java\",\"defaultFileType\":\"text/plain\",\"defaultFileSyntaxLanguage\":\"java\",\"runType\":\"file\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"unit_test\",\"title\":\"tests\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\nimport java.util.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void tests() {\\n    ArrayList\\u003cInteger\\u003e a = new ArrayList\\u003cInteger\\u003e(Arrays.asList(1,2,3,4));\\n    ArrayList\\u003cInteger\\u003e a2 = new ArrayList\\u003cInteger\\u003e(Arrays.asList(1,2,3,4));\\n    ArrayList\\u003cInteger\\u003e b = new ArrayList\\u003cInteger\\u003e(Arrays.asList(1,1,2,2,3,3,4,4));\\n    assertEquals(b,Main.twoTimes(a));\\n    assertEquals(a2,a);\\n    \\n    ArrayList\\u003cInteger\\u003e c = new ArrayList\\u003cInteger\\u003e(Arrays.asList(7,4,3));\\n    ArrayList\\u003cInteger\\u003e c2 = new ArrayList\\u003cInteger\\u003e(Arrays.asList(7,4,3));\\n    ArrayList\\u003cInteger\\u003e d = new ArrayList\\u003cInteger\\u003e(Arrays.asList(7,7,4,4,3,3));\\n    assertEquals(d,Main.twoTimes(c));\\n    assertEquals(c2,c);\\n    \\n    \\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"import java.util.ArrayList;\\n\\nclass Main\\n{\\n\\tpublic static void main(String[] args)\\n\\t{\\n\\t\\t\\n\\t}\\n\\t//create your method below\\n\\t\\n}\"],\"t\":1617932457000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16328,
    "title": "Lab02_Problem11: Further For Loop Practice 6 (reverse string)",
    "prompt_md": "Write a for loop that will print out the reverse of the string.\n\n### Sample Input #1\n\n```plaintext\nmanhattan\n```\n\n### Sample Output #1\n\n```plaintext\nnattahnam\n```\n\n###  Sample Input #2\n\n```plaintext\nprocessor\n```\n\n### Sample Output #2\n\n```plaintext\nrossecorp\n```",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"import java.util.Scanner;\\n\\nclass Main {\\n    public static void main(String[] args) {\\n        Scanner in = new Scanner(System.in);\\n\\n        String s = in.nextLine();\\n        //write your code below\\n\\n\\n    }\\n}\",\"defaultFilePath\":\"\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"stdout\",\"title\":\"manhattan\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"nattahnam\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"manhattan\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"crazy\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"yzarc\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"crazy\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"racecar\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"racecar\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"racecar\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"import java.util.Scanner;\\n\\nclass Main {\\n  public static void main(String[] args) {\\n    Scanner inp = new Scanner(System.in);\\n    System.out.print(\\\"In:\\\");\\n    String s = inp.nextLine();\\n    //write your code below\\n    \\n    \\n  }\\n}\"],\"t\":1612874090000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16329,
    "title": "Lab04_Problem11: Printing Arrays Practice 3",
    "prompt_md": "\nThe code provided in your main method will take in five integers and save them into an array called arr.  Print out the contents of the array using the following example as a guideline:\n\n\n\nNumbers in:\n\n```\n4\n62\n8\n5\n4\n```\n\n\n\nPrint:\n\n```\n{4,62,8,5,4}\n```\n\n\n\nYour output should match the above EXACTLY. Meaning, you need to print the curly brackets AND the commas exactly as shown.\n\n\n\nNote that you do *not* print a comma after the last number.\n\n\n\n",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"import java.util.Scanner;\\nclass Main\\n{\\n\\tpublic static void main(String[] args)\\n\\t{\\n\\t\\tScanner input = new Scanner(System.in);\\n\\t\\tint[] arr = new int[5];\\n\\t\\tfor (int i=0;i\\u003c5;i++)\\n\\t\\t{\\n\\t\\t\\tarr[i] = input.nextInt();\\n\\t\\t}\\n\\t\\t//leave above alone!  write your code below\\n\\t\\t\\n\\t\\t\\n\\t}\\n}\",\"defaultFilePath\":\"Main.java\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"stdout\",\"title\":\"test 3\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"{-1,4,63,999,-2}\",\"stdoutCompareMethod\":\"equals\",\"stdin\":\"-1 4 63 999 -2\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"test 2\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"{9,4,7,2,38}\",\"stdoutCompareMethod\":\"equals\",\"stdin\":\"9 4 7 2 38\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"test 1\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"{1,2,3,4,5}\",\"stdoutCompareMethod\":\"equals\",\"stdin\":\"1 2 3 4 5\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"import java.util.Scanner;\\nclass Main\\n{\\n\\tpublic static void main(String[] args)\\n\\t{\\n\\t\\tScanner input = new Scanner(System.in);\\n\\t\\tint[] arr = new int[5];\\n\\t\\tfor (int i=0;i\\u003c5;i++)\\n\\t\\t{\\n\\t\\t\\tarr[i] = input.nextInt();\\n\\t\\t}\\n\\t\\t//leave above alone!  write your code below\\n\\t\\t\\n\\t\\t\\n\\t}\\n}\"],\"t\":1614276070000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16330,
    "title": "103 - AL1 - Declaring ArrayLists",
    "prompt_md": "\nAn ArrayList is a collection of objects, similar to an array.  However, a few notable differences in how they work:\n\n* The size of an ArrayList can be changed\n* You can add, insert, and delete elements easily with ArrayLists\n* You can only have ArrayLists of objects!  (int/double/boolean are primitive datatypes)\n\n\n\nIMPORTANT: Please note that we will be working with new objects that represent primitive datatypes:\n\n* Integer is an object that represent an int\n* Double is an object that represents a double\n* Boolean is an object that represents a boolean\n\n(Note the capital letters for the objects!)\n\n\n\nHowever, unlike arrays, ArrayLists need to be imported before they can be used.  The line that we use to do this is the following (written outside the class header on line 3):\n\n```\nimport java.util.ArrayList;\n```\n\n\n\nThis allows us to create the ArrayList object.\n\n\n\nTo declare and initialize an ArrayList, we use the same code as we did to declare objects, except this time, our datatype is ArrayList<Type>:\n\n```\n// create an arraylist of Strings\n    ArrayList<String> names = new ArrayList<String>();\n//  |<------------------->|   |<-------------------->|\n//     declaration                 initialization\n\n// create an arraylist of Integers\n    ArrayList<Integer> nums = new ArrayList<Integer>();\n\n// create an arraylist of Student objects\n    ArrayList<Student> youguys = new ArrayList<Student>();\n```\n\n\n\nWrite code in the test method that will declare and initialize an ArrayList of Integers, then return it.\n\n\n\n\n\n",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"import java.util.ArrayList;\\n\\nclass Main\\n{\\n\\tpublic static ArrayList\\u003cInteger\\u003e test()\\n\\t{\\n\\t\\t//write code here\\n\\t}\\n}\",\"defaultFilePath\":\"Main.java\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"unit_test\",\"title\":\"tests\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\nimport java.util.ArrayList;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void tests() {\\n    ArrayList\\u003cInteger\\u003e a = new ArrayList\\u003cInteger\\u003e();\\n    ArrayList\\u003cInteger\\u003e b = Main.test();\\n    assertTrue(a.equals(b));\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null}}"
  },
  {
    "id": 16331,
    "title": "Lab01_Problem19: Conditional Statement Practice 4",
    "prompt_md": "\n For you to do:\n\n\n\nGiven a string variable \"word\", do the following tests\n\n\n\nIf the word ends in \"y\", print \"-ies\"\n\nIf the word ends in \"ey\", print \"-eys\"\n\nIf the word ends in \"ife\", print \"-ives\"\n\nIf none of the above is true, print \"-s\"\n\nNo more than one should be printed.\n\n\n\n",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"import java.util.Scanner;\\n\\nclass Main {\\n  public static void main(String[] args) {\\n  \\tScanner inp = new Scanner(System.in);\\n\\n  \\tString word = inp.nextLine();\\n  \\t//DO NOT CHANGE ABOVE CODE!  Write your code below\\n  \\t\\n  \\t\\n  }\\n}\\n\",\"defaultFilePath\":\"\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"stdout\",\"title\":\"test\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"-s\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"test\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"word\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"-s\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"word\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"knife\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"-ives\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"knife\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"key\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"-eys\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"key\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"family\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"-ies\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"family\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"import java.util.Scanner;\\n\\nclass Main {\\n  public static void main(String[] args) {\\n  \\tScanner inp = new Scanner(System.in);\\n  \\tSystem.out.print(\\\"In:\\\");\\n  \\tString word = inp.nextLine();\\n  \\t//DO NOT CHANGE ABOVE CODE!  Write your code below\\n  \\t\\n  \\t\\n  }\\n}\\n}\"],\"t\":1611328523000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16332,
    "title": "059 - Scope and Global Variables 2",
    "prompt_md": "\nWithin the main class, create three class variables:\n\n* A boolean variable called bool with a value of false\n* A String variable called str with a value of \"sup\"\n* An integer variable called i with a value of 10\n\n\n\n",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main\\n{\\n    public static void main(String[] args)\\n    {\\n  \\t\\tSystem.out.println(\\\"nothing to do here...\\\");\\n    }\\n}\",\"defaultFilePath\":\"Main.java\",\"defaultFileType\":\"\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"unit_test\",\"title\":\"tests\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void tests() {\\n    Main a = new Main();\\n    assertEquals(a.bool,false);\\n    assertEquals(a.str,\\\"sup\\\");\\n    assertEquals(a.i,10);\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"class Main\\n{\\n    public static void main(String[] args)\\n    {\\n  \\t\\tSystem.out.println(\\\"nothing to do here...\\\");\\n    }\\n}\"],\"t\":1614274967000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16333,
    "title": "116 - Object Review 1",
    "prompt_md": "\nComplete the createObject method so that it will create an instance of the SomeObject class and return it.  Look at the SomeObject.java file to see how to use the constructor.\n\n\n\n",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main\\n{\\n\\tpublic static SomeObject createObject()\\n\\t{\\n\\t\\t//write code here\\n\\t\\t\\n\\t}\\n}\",\"defaultFilePath\":\"Main.java\",\"extraFiles\":{\"U29tZU9iamVjdC5qYXZh\":{\"contents\":\"public class SomeObject\\n{\\n\\tpublic int property1;\\n\\tpublic String property2;\\n\\t\\n\\tpublic SomeObject()\\n\\t{\\n\\t\\tthis.property1 = 100;\\n\\t\\tthis.property2 = \\\"string\\\";\\n\\t}\\n}\",\"language\":\"java\",\"type\":\"\"}}}},\"grading\":{\"testCases\":[{\"type\":\"unit_test\",\"title\":\"tests\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void tests() {\\n    SomeObject x = Main.createObject();\\n    assertEquals(100,x.property1);\\n    assertEquals(\\\"string\\\",x.property2);\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null}}"
  },
  {
    "id": 16334,
    "title": "105 - AL3 - ArrayList Methods - set",
    "prompt_md": "\nThe next method we will learn about is the .set() method.\n\n\n\nThe .set() ArrayList method will set the value of a particular index to be a given value.  \n\n\n\nGiven the following ArrayList...\n\n```\nArrayList<Integer> nums = new ArrayList<Integer>();\nnums.add(4);\nnums.add(2);\nnums.add(8);\nnums.add(1);\nnums.add(-1);\n```\n\n(the values of this arraylist is 4,2,8,1,-1)\n\n\n\nThe following code will set the element at the 2nd index to be 99 and the element at the 0th index to be 100.\n\n```\nnums.set(2,99);\nnums.set(0,100);\n```\n\n\n\nNotice how the way it works is:\n\n```\narraylistvariable.set(index to set, new value);\n```\n\n\n\nNow, with all that said, look at the test() method on the left. It has one parameter, which is an ArrayList of Strings called words. There are already many Strings inside this ArrayList. All you need to do is write two lines of code to set the 0th and 2nd indexes to be \"git\" and \"gud\", respectively.\n\n\n\n",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"import java.util.ArrayList;\\n\\nclass Main\\n{\\n\\tpublic static void test(ArrayList\\u003cString\\u003e words)\\n\\t{\\n\\t\\t//write code here\\n\\t\\t\\n\\t}\\n}\",\"defaultFilePath\":\"Main.java\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"unit_test\",\"title\":\"tests\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\nimport java.util.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void tests() {\\n    ArrayList\\u003cString\\u003e a = new ArrayList\\u003cString\\u003e();\\n    a.add(\\\"hi\\\");\\n    a.add(\\\"there\\\");\\n    a.add(\\\"howdy\\\");\\n    a.add(\\\"woo\\\");\\n    Main.test(a);\\n    ArrayList\\u003cString\\u003e b = new ArrayList\\u003cString\\u003e();\\n    b.add(\\\"git\\\");\\n    b.add(\\\"there\\\");\\n    b.add(\\\"gud\\\");\\n    b.add(\\\"woo\\\");\\n    \\n    assertEquals(b,a);\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null}}"
  },
  {
    "id": 16335,
    "title": "Lab05_Problem11: 2D Array More Practice 2",
    "prompt_md": "The isBorder method takes in three arguments:\n\n*   a 2D integer array\n*   a target row\n*   a target column\n\nComplete the method so that it determines whether the coordinates determined by the row and column lies on the border of the array.",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main\\n{\\n\\tpublic static void main(String[] args)\\n\\t{\\n\\t\\tint[][] a = {\\n\\t//col    0 1 2 3\\n\\t\\t\\t{1,1,1,1}, //row 0\\n\\t\\t\\t{1,1,1,1}, //row 1\\n\\t\\t\\t{1,1,1,1}  //row 2\\n\\t\\t};\\n\\t\\tSystem.out.println(isBorder(a,0,0)); //true\\n\\t\\tSystem.out.println(isBorder(a,1,1)); //false\\n\\t\\tSystem.out.println(isBorder(a,2,1)); //true\\n\\t\\tSystem.out.println(isBorder(a,1,2)); //false\\n\\t}\\n\\n    // you should complete the method below\\n\\tpublic static boolean isBorder(int[][] array, int row, int col)\\n\\t{\\n\\t\\t\\n\\t}\\n}\",\"defaultFilePath\":\"\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"unit_test\",\"title\":\"tests\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void tests() {\\n    int[][] a = {\\n        {1,1,1,1},\\n        {1,1,1,1},\\n        {1,1,1,1},\\n        {1,1,1,1},\\n        {1,1,1,1}\\n    };\\n    assertEquals(true,Main.isBorder(a,0,3));\\n    assertEquals(false,Main.isBorder(a,3,2));\\n    assertEquals(true,Main.isBorder(a,4,3));\\n    assertEquals(true,Main.isBorder(a,1,3));\\n    assertEquals(true,Main.isBorder(a,3,0));\\n    assertEquals(false,Main.isBorder(a,3,2));\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"class Main\\n{\\n\\tpublic static void main(String[] args)\\n\\t{\\n\\t\\tint[][] a = {\\n\\t//col    0 1 2 3\\n\\t\\t\\t{1,1,1,1}, //row 0\\n\\t\\t\\t{1,1,1,1}, //row 1\\n\\t\\t\\t{1,1,1,1}  //row 2\\n\\t\\t};\\n\\t\\tSystem.out.println(isBorder(a,0,0)); //true\\n\\t\\tSystem.out.println(isBorder(a,1,1)); //false\\n\\t\\tSystem.out.println(isBorder(a,2,1)); //true\\n\\t\\tSystem.out.println(isBorder(a,1,2)); //false\\n\\t}\\n\\tpublic static boolean isBorder(int[][] array, int row, int col)\\n\\t{\\n\\t\\t\\n\\t}\\n}\"],\"t\":1614891611000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16336,
    "title": "Lab03_Problem13: Accumulator Method Practice 3",
    "prompt_md": "\nWrite a method header on line two with the following specs:  \n\n\nReturns:\n\n```\nan integer\n```\n\nName:\n\n```\nsumFivesRange\n```\n\nParameters:\n\n```\nan integer called \"a\" that represents the beginning of the range\nan integer called \"b\" that represents the end of the range\n```\n\nPurpose:\n\n```\ncalculate the sum of the multiples of 5 within the range a to b inclusive (including b)\n```\n\n\n\nExamples:\n\n```\nsumFivesRange(5,15) ==> 30\nsumFivesRange(11,28) ==> 60\n```\n\n\n\n",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main {\\n\\t\\n\\t{\\n\\t\\t\\n\\t}\\n\\t\\n\\t//test case below (dont change):\\n\\tpublic static void main(String[] args){\\n\\t\\tSystem.out.println(sumFivesRange(5,15)); //30\\n\\t\\tSystem.out.println(sumFivesRange(11,28)); //60\\n\\t}\\n}\",\"defaultFilePath\":\"Main.java\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"unit_test\",\"title\":\"tests\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void tests() {\\n    Main a = new Main();\\n    \\n    assertEquals(30,a.sumFivesRange(5,15));\\n    assertEquals(60,a.sumFivesRange(11,28));\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"class Main {\\n\\t\\n\\t{\\n\\t\\t\\n\\t}\\n\\t\\n\\t//test case below (dont change):\\n\\tpublic static void main(String[] args){\\n\\t\\tSystem.out.println(sumFivesRange(5,15)); //30\\n\\t\\tSystem.out.println(sumFivesRange(11,28)); //60\\n\\t}\\n}\"],\"t\":1613416159000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16337,
    "title": "Lab05_Problem10: Is Square?",
    "prompt_md": "\nComplete the isSquare method so that it takes in a 2-D integer array as a parameter and checks if it is a square array, meaning, if its rows and columns are equal.\n\n\n\n**Hint: Remember that this can be a ragged array, meaning that the length of the rows are *not* necessarily uniform.\n\n\n\n",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main {\\n\\tpublic static void main(String[] args)\\n\\t{\\n\\t\\tint[][] a = {\\n\\t\\t\\t{1,1,1},\\n\\t\\t\\t{1,1,1},\\n\\t\\t\\t{1,1,1}\\n\\t\\t};\\n\\t\\tSystem.out.println(isSquare(a)); //true\\n\\t\\t\\n\\t\\tint[][] b = {\\n\\t\\t\\t{1,1,1,1},\\n\\t\\t\\t{1,1,1,1},\\n\\t\\t\\t{1,1,1,1}\\n\\t\\t};\\n\\t\\tSystem.out.println(isSquare(b)); //false\\n\\t}\\n\\n    // you should complete the method below\\n\\tpublic static boolean isSquare(int[][] array)\\n\\t{\\n\\t\\t\\n\\t}\\n}\",\"defaultFilePath\":\"\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"unit_test\",\"title\":\"tests\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void tests() {\\n    int[][] a = {\\n        {1,1,1,1},\\n        {1,1,1,1}\\n    };\\n    assertEquals(false,Main.isSquare(a));\\n    a = new int[][] {\\n        {1,1},\\n        {1,1}\\n    };\\n    assertEquals(true,Main.isSquare(a));\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"class Main {\\n\\tpublic static void main(String[] args)\\n\\t{\\n\\t\\tint[][] a = {\\n\\t\\t\\t{1,1,1},\\n\\t\\t\\t{1,1,1},\\n\\t\\t\\t{1,1,1}\\n\\t\\t};\\n\\t\\tSystem.out.println(isSquare(a)); //true\\n\\t\\t\\n\\t\\tint[][] b = {\\n\\t\\t\\t{1,1,1,1},\\n\\t\\t\\t{1,1,1,1},\\n\\t\\t\\t{1,1,1,1}\\n\\t\\t};\\n\\t\\tSystem.out.println(isSquare(b)); //false\\n\\t}\\n\\tpublic static boolean isSquare(int[][] array)\\n\\t{\\n\\t\\t\\n\\t}\\n}\"],\"t\":1614891618000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16338,
    "title": "Lab08_Problem03: ArrayList Exercise 3",
    "prompt_md": "\nCreate a method that:\n\n* is called timesTwo\n* returns nothing\n* takes in a single parameter - an ArrayList of Integers called nums\n\n\n\nThis method should take the ArrayList parameter and multiply every value by two.\n\n\n\n",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"import java.util.*;\\n\\nclass Main {\\n\\tpublic static void Main(String[] args) {\\n\\t\\t// You needn't code anything here unless you want to test your method\\n\\t}\\n\\n\\n\\t//create your method below\\n\\t\\n}\\n\",\"defaultFilePath\":\"Main.java\",\"defaultFileType\":\"text/plain\",\"defaultFileSyntaxLanguage\":\"java\",\"runType\":\"file\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"unit_test\",\"title\":\"tests\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\nimport java.util.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void tests() {\\n    ArrayList\\u003cInteger\\u003e a = new ArrayList\\u003cInteger\\u003e(Arrays.asList(1,2,3,4));\\n    Main.timesTwo(a);\\n    ArrayList\\u003cInteger\\u003e b = new ArrayList\\u003cInteger\\u003e(Arrays.asList(2,4,6,8));\\n    assertEquals(b,a);\\n    \\n    ArrayList\\u003cInteger\\u003e c = new ArrayList\\u003cInteger\\u003e(Arrays.asList(6,3,1,2,3,-5));\\n    Main.timesTwo(c);\\n    ArrayList\\u003cInteger\\u003e d = new ArrayList\\u003cInteger\\u003e(Arrays.asList(12,6,2,4,6,-10));\\n    assertEquals(d,c);\\n    \\n    \\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"import java.util.ArrayList;\\n\\nclass Main\\n{\\n\\tpublic static void main(String[] args)\\n\\t{\\n\\t\\t\\n\\t}\\n\\t//create your method below\\n\\t\\n}\"],\"t\":1617931987000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16339,
    "title": "Lab03_Problem07: Method Header Practice 6",
    "prompt_md": "Write a method header on line two with the following specs:\n\n```plaintext\nReturns: a boolean\nName: bothEven\nParameters:\nan integer called \"num1\"\nan integer called \"num2\"\n```\n\nThen, starting on line 4, write code that will return true if **both num1 and num2 are even**. Return false otherwise.\n\nExamples:\n\n```plaintext\nbothEven(4,6) ==> true\nbothEven(3,4) ==> false\nbothEven(-1,1) ==> false\n```",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main {\\n\\t\\n\\t{\\n\\t\\t\\n\\t}\\n\\t\\n\\t//test case below (dont change):\\n\\tpublic static void main(String[] args){\\n\\t\\tSystem.out.println(bothEven(8,6)); //should be true\\n\\t\\tSystem.out.println(bothEven(5,6)); //should be false\\n\\t}\\n}\",\"defaultFilePath\":\"Main.java\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"unit_test\",\"title\":\"tests\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void tests() {\\n    Main a = new Main();\\n    assertEquals(true,a.bothEven(4,4));\\n    assertEquals(false,a.bothEven(2,1));\\n    assertEquals(false,a.bothEven(7,9));\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"class Main {\\n\\t\\n\\t{\\n\\t\\t\\n\\t}\\n\\t\\n\\t//test case below (dont change):\\n\\tpublic static void main(String[] args){\\n\\t\\tSystem.out.println(bothEven(8,6)); //should be true\\n\\t\\tSystem.out.println(bothEven(5,6)); //should be false\\n\\t}\\n}\"],\"t\":1613415107000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16340,
    "title": "Lab02_Problem13: Fibonacci Sequence",
    "prompt_md": "The fibonacci sequence is a sequence of numbers in which the next number is the sum of the previous two numbers.\n\nThe first two numbers of the fibonacci sequence are 0, 1.\n\nThe first 8 numbers of the fibonacci sequence are 0, 1, 1, 2, 3, 5, 8, 13\n\nWrite some code to print out the first X numbers of the fibonacci sequence. For clarity, the input value you will read will be this X value. Thus, if the input is 8, then the 8 numbers shown above will be printed, each wth simply a SPACE between them.\n\nYour output should be on one line, with each number separated by a space. You may assume that x is at least 2.\n\n### Sample Input #1\n\n```plaintext\n8\n```\n\n### Sample Output #1\n\n```plaintext\n0 1 1 2 3 5 8 13\n```",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"import java.util.Scanner;\\n\\nclass Main {\\n    public static void main(String[] args) {\\n        Scanner in = new Scanner(System.in);\\n        \\n        int x = in.nextInt();\\n        //write your code below\\n\\n\\n    }\\n}\",\"defaultFilePath\":\"\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"stdout\",\"title\":\"15\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"0 1 1 2 3 5 8 13 21 34 55 89 144 233 377\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"15\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"8\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"0 1 1 2 3 5 8 13\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"8\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"29\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"29\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"import java.util.Scanner;\\n\\nclass Main {\\n  public static void main(String[] args) {\\n    Scanner inp = new Scanner(System.in);\\n    System.out.print(\\\"In:\\\");\\n    int x = inp.nextInt();\\n   \\t//write your code below\\n   \\t\\n   \\t\\n  }\\n}\"],\"t\":1612875681000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16341,
    "title": "Lab01_Problem10: String Methods - Length",
    "prompt_md": "For you to do:\n\n*   Read a single String (no spaces/tabs/enters) from the user.\n*   Print out the length of the that String",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main {\\n  public static void main(String[] args) {\\n    //write code here!\\n    \\n  }\\n}\",\"defaultFilePath\":\"Main.java\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"stdout\",\"title\":\"tc1\",\"headline\":\"\",\"points\":50,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"8\",\"stdoutCompareMethod\":\"equals\",\"stdin\":\"Computer\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc2\",\"headline\":\"\",\"points\":50,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"2\",\"stdoutCompareMethod\":\"equals\",\"stdin\":\"Hi\",\"sourceFile\":\"\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"class Main {\\n  public static void main(String[] args) {\\n    //write code here!\\n    \\n  }\\n}\"],\"t\":1612369587000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16342,
    "title": "Lab03_Problem15: Accumulator Method Practice 5",
    "prompt_md": "\nWrite a method header on line two with the following specs:  \n\n\nReturns:\n\n```\nan integer\n```\n\nName:\n\n```\ncountVowels\n```\n\nParameters:\n\n```\na String called s\n```\n\nPurpose:\n\n```\ncount the number of vowels in the string s.  Assume s is all lowercase.\n```\n\n\n\nExamples:\n\n```\ncountVowels(\"obama\") ==> 3\ncountVowels(\"happy friday! i love weekends\") ==> 9\n```\n\n\n\n",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main {\\n\\t\\n\\t{\\n\\t\\t\\n\\t}\\n\\t\\n\\t//test case below (dont change):\\n\\tpublic static void main(String[] args){\\n\\t\\tSystem.out.println(countVowels(\\\"obama\\\")); //3\\n\\t\\tSystem.out.println(countVowels(\\\"happy friday! i love weekends\\\")); //9\\n\\t}\\n}\",\"defaultFilePath\":\"Main.java\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"unit_test\",\"title\":\"tests\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void tests() {\\n    Main a = new Main();\\n    \\n    assertEquals(5,a.countVowels(\\\"obamamama\\\"));\\n    assertEquals(9,a.countVowels(\\\"happy friday! i love weekends\\\"));\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"class Main {\\n\\t\\n\\t{\\n\\t\\t\\n\\t}\\n\\t\\n\\t//test case below (dont change):\\n\\tpublic static void main(String[] args){\\n\\t\\tSystem.out.println(countVowels(\\\"obama\\\")); //3\\n\\t\\tSystem.out.println(countVowels(\\\"happy friday! i love weekends\\\")); //9\\n\\t}\\n}\"],\"t\":1613416167000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16343,
    "title": "Lab08_Problem04: ArrayList Exercise 4",
    "prompt_md": "\nCreate a static method that:\n\n* is called removeAll\n* returns nothing\n* takes two parameters: an ArrayList of Strings called wordList, and a String called targetWord\n\n\n\nThis method should go through every element of wordList and remove every instance of targetWord from the ArrayList.\n\n\n\n",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"import java.util.*;\\n\\nclass Main {\\n\\tpublic static void Main(String[] args) {\\n\\t\\t// You needn't code anything here unless you want to test your method\\n\\t}\\n\\n\\n\\t//create your method below\\n\\t\\n}\\n\",\"defaultFilePath\":\"Main.java\",\"defaultFileType\":\"text/plain\",\"defaultFileSyntaxLanguage\":\"java\",\"runType\":\"file\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"unit_test\",\"title\":\"tests\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\nimport java.util.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void tests() {\\n    ArrayList\\u003cString\\u003e a = new ArrayList\\u003cString\\u003e(Arrays.asList(\\\"hi\\\",\\\"hey\\\",\\\"hi\\\",\\\"yo\\\"));\\n    ArrayList\\u003cString\\u003e b = new ArrayList\\u003cString\\u003e(Arrays.asList(\\\"hey\\\",\\\"yo\\\"));\\n    Main.removeAll(a,\\\"hi\\\");\\n    assertEquals(b,a);\\n    ArrayList\\u003cString\\u003e c = new ArrayList\\u003cString\\u003e(Arrays.asList(\\\"sup\\\",\\\"sup\\\",\\\"howdy\\\",\\\"boop\\\"));\\n    ArrayList\\u003cString\\u003e d = new ArrayList\\u003cString\\u003e(Arrays.asList(\\\"howdy\\\",\\\"boop\\\"));\\n    Main.removeAll(c,\\\"sup\\\");\\n    assertEquals(d,c);\\n    ArrayList\\u003cString\\u003e e = new ArrayList\\u003cString\\u003e(Arrays.asList(\\\"yolo\\\",\\\"yolo\\\",\\\"yolo\\\",\\\"yolo\\\",\\\"yolo\\\",\\\"yolo\\\"));\\n    ArrayList\\u003cString\\u003e f = new ArrayList\\u003cString\\u003e();\\n    Main.removeAll(e,\\\"yolo\\\");\\n    assertEquals(f,e);\\n    \\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"import java.util.ArrayList;\\n\\nclass Main\\n{\\n\\tpublic static void Main(String[] args)\\n\\t{\\n\\t\\t\\n\\t}\\n\\t//create your method below\\n\\t\\n}\"],\"t\":1617932419000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16344,
    "title": "Lab04_Problem15: Finding Maximum in Array",
    "prompt_md": "\n Complete the maxValue method so that given the array nums, it will return the maximum value in the array. \n\n\n\n",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main\\n{\\n\\tpublic static void main(String[] args) \\n\\t{\\n\\t\\tint[] arr = {5,12,-3,7,3,22};\\n\\t\\tSystem.out.println(maxValue(arr)); //should print 22\\n\\t}\\n\\tpublic static int maxValue(int[] nums)\\n\\t{\\n\\t\\t\\n\\t}\\n}\",\"defaultFilePath\":\"Main.java\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"unit_test\",\"title\":\"tests\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void tests() {\\n    int[] a = {6,3,8,3,1,1,6,4,-2};\\n    assertEquals(8,Main.maxValue(a));\\n    \\n    int[] b = {67,83,33,57,356};\\n    assertEquals(356,Main.maxValue(b));\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"class Main\\n{\\n\\tpublic static void main(String[] args) \\n\\t{\\n\\t\\tint[] arr = {5,12,-3,7,3,22};\\n\\t\\tSystem.out.println(maxValue(arr)); //should print 22\\n\\t}\\n\\tpublic static int maxValue(int[] nums)\\n\\t{\\n\\t\\t\\n\\t}\\n}\"],\"t\":1614276080000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16345,
    "title": "Lab08_Problem05: ArrayList Exercise 5",
    "prompt_md": "\nCreate a method that:\n\n* is called repeatAL\n* returns nothing\n* takes in a single parameter - an ArrayList of Booleans\n\n\n\nThis method should modify its ArrayList parameter by repeating its ArrayList values.  \n\n\n\nFor example, if the original ArrayList contains 3 values as follows: \n\n```\n(true, false, false)\n```\n\n\n\nThe modified ArrayList should be\n\n```\n(true, false, false, true, false, false)\n```\n\n\n\n",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"import java.util.*;\\n\\nclass Main {\\n\\tpublic static void Main(String[] args) {\\n\\t\\t// You needn't code anything here unless you want to test your method\\n\\t}\\n\\n\\n\\t//create your method below\\n\\t\\n}\\n\",\"defaultFilePath\":\"Main.java\",\"defaultFileType\":\"text/plain\",\"defaultFileSyntaxLanguage\":\"java\",\"runType\":\"file\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"unit_test\",\"title\":\"tests\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\nimport java.util.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void tests() {\\n    ArrayList\\u003cBoolean\\u003e a = new ArrayList\\u003cBoolean\\u003e(Arrays.asList(false,true,true));\\n    ArrayList\\u003cBoolean\\u003e b = new ArrayList\\u003cBoolean\\u003e(Arrays.asList(false,true,true,false,true,true));\\n    Main.repeatAL(a);\\n    assertEquals(b,a);\\n    \\n    ArrayList\\u003cBoolean\\u003e c = new ArrayList\\u003cBoolean\\u003e(Arrays.asList(true,false,false,true));\\n    ArrayList\\u003cBoolean\\u003e d = new ArrayList\\u003cBoolean\\u003e(Arrays.asList(true,false,false,true,true,false,false,true));\\n    Main.repeatAL(c);\\n    assertEquals(d,c);\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"import java.util.ArrayList;\\n\\nclass Main\\n{\\n\\tpublic static void main(String[] args)\\n\\t{\\n\\t\\t\\n\\t}\\n\\t//create your method below\\n\\t\\n}\"],\"t\":1617932427000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16346,
    "title": "Lab01_Problem01: Creating Variables and Printing 1",
    "prompt_md": "\n# Creating Variables and Printing Them\n\n\n\nFor you to do:\n\n1. Create two String variables called firstName and lastName respectively.\n2. Assign the String \"Bob\" to firstName and \"Jones\" to lastName.\n3. Print firstName and lastName, one per line.  Each should use a different print statement.\n\n\n\n",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main {\\n  public static void main(String[] args) {\\n    // Write your code here!\\n    \\n  }\\n}\",\"defaultFilePath\":\"Main.java\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"stdout\",\"title\":\"correct\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"Bob\\nJones\",\"stdoutCompareMethod\":\"equals\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"class Main {\\n  public static void main(String[] args) {\\n    // Write your code here!\\n    \\n  }\\n}\"],\"t\":1612368904000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16347,
    "title": "Lab05_Problem03: 2D Array Practice 1",
    "prompt_md": "\nComplete the method doubleArr method so that it doubles the values of every element in the array.  Nothing should be returned - the array should be modified by the method.\n\n\n\n",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main\\n{\\n\\tpublic static void main(String[] args)\\n\\t{\\n\\t\\tdouble[][] a = {\\n\\t\\t\\t{1.4,2.0,3.3,2},\\n\\t\\t\\t{4,1.5,6.1,1},\\n\\t\\t\\t{1.2,3.1,4,1.6}\\n\\t\\t};\\n\\t\\tdoubleArr(a);\\n\\t\\t//prints array\\n\\t\\tfor(double[] row : a){\\n\\t\\t\\tfor(double e : row){\\n\\t\\t\\t\\tSystem.out.print(e + \\\" \\\");\\n\\t\\t\\t}\\n\\t\\t\\tSystem.out.println();\\n\\t\\t}\\n\\t}\\n\\n    // you should complete the method below\\n\\tpublic static void doubleArr(double[][] array)\\n\\t{\\n\\t\\t\\n\\t}\\n}\",\"defaultFilePath\":\"\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"unit_test\",\"title\":\"tests\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void tests() {\\n    double[][] a = {\\n    \\t{1.4,2.0,3.3,2,1},\\n    \\t{4,1.5,6.1,1,1},\\n    \\t{1.2,3.1,4,1.6,1}\\n    };\\n    double[][] result = {\\n        {2.8,4,6.6,4,2},\\n        {8,3,12.2,2,2},\\n        {2.4,6.2,8,3.2,2}\\n    };\\n    Main.doubleArr(a);\\n    for(int r=0;r\\u003ca.length;r++)\\n        for(int c=0;c\\u003ca[0].length;c++)\\n            assertEquals(result[r][c],a[r][c],0.001);\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"class Main\\n{\\n\\tpublic static void main(String[] args)\\n\\t{\\n\\t\\tdouble[][] a = {\\n\\t\\t\\t{1.4,2.0,3.3,2},\\n\\t\\t\\t{4,1.5,6.1,1},\\n\\t\\t\\t{1.2,3.1,4,1.6}\\n\\t\\t};\\n\\t\\tdoubleArr(a);\\n\\t\\t//prints array\\n\\t\\tfor(double[] row : a){\\n\\t\\t\\tfor(double e : row){\\n\\t\\t\\t\\tSystem.out.print(e + \\\" \\\");\\n\\t\\t\\t}\\n\\t\\t\\tSystem.out.println();\\n\\t\\t}\\n\\t}\\n\\tpublic static void doubleArr(double[][] array)\\n\\t{\\n\\t\\t\\n\\t}\\n}\"],\"t\":1614890533000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16348,
    "title": "Lab02_Problem07: Further For Loop Practice 1 (ascending)",
    "prompt_md": "Write a for loop that will print out a series of numbers starting at 0 and ending at the given input value, exclusive.\n\n### Sample Input #1\n\n```plaintext\n3\n```\n\n### Sample Output #1\n\n```plaintext\n0 1 2\n```\n\n###  Sample Input #2\n\n```plaintext\n8\n```\n\n### Sample Output #2\n\n```plaintext\n0 1 2 3 4 5 6 7\n```",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"import java.util.Scanner;\\n\\nclass Main {\\n    public static void main(String[] args) {\\n        Scanner in = new Scanner(System.in);\\n\\n        int x = in.nextInt();\\n        //write your code below\\n\\n\\n    }\\n}\",\"defaultFilePath\":\"\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"stdout\",\"title\":\"11\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"0 1 2 3 4 5 6 7 8  9 10\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"11\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"5\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"0 1 2 3 4\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"5\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"import java.util.Scanner;\\n\\nclass Main {\\n  public static void main(String[] args) {\\n    Scanner inp = new Scanner(System.in);\\n    System.out.print(\\\"In:\\\");\\n    int x = inp.nextInt();\\n    //write your code below\\n    \\n    \\n  }\\n}\"],\"t\":1612874081000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16349,
    "title": "Lab03_Problem06: Method Header Practice 5",
    "prompt_md": "Write a method header on line two with the following specs:\n\n```plaintext\nReturns: a double\nName: negate\nParameters: a double called \"num\"\n```\n\nThen, starting on line 4, write the code that will **return** the **opposite value of num** (if it's positive, make it negative, otherwise make it positive)\n\nExamples:\n\n```plaintext\n4 ==> -4\n-10 ==> 10\n1 ==> -1\n```\n\nNote: you can do this on a single line, Line 4. There is no need for additional lines of code inside the method. You can, in fact, negate the value within the return statement itself.",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main {\\n\\t\\n\\t{\\n\\t\\t\\n\\t}\\n\\t\\n\\t//test case below (dont change):\\n\\tpublic static void main(String[] args){\\n\\t\\tSystem.out.println(negate(8)); //should be -8\\n\\t\\tSystem.out.println(negate(-2)); //should be 2\\n\\t}\\n}\",\"defaultFilePath\":\"Main.java\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"unit_test\",\"title\":\"tests\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void tests() {\\n    Main a = new Main();\\n    assertEquals(5.0,a.negate(-5.0),0.001);\\n    assertEquals(-5.0,a.negate(5.0),0.001);\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"class Main {\\n\\t\\n\\t{\\n\\t\\t\\n\\t}\\n\\t\\n\\t//test case below (dont change):\\n\\tpublic static void main(String[] args){\\n\\t\\tSystem.out.println(negate(8)); //should be -8\\n\\t\\tSystem.out.println(negate(-2)); //should be 2\\n\\t}\\n}\"],\"t\":1613415107000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16350,
    "title": "Lab03_Problem02: Method Header Practice 1",
    "prompt_md": "Write a method header on line two with the following specs:\n\n```plaintext\nReturns: an integer\nName: practiceOne\nParameters: none\n```\n\nYou should not be writing code on any line other than #2",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main {\\n\\t\\n\\t{\\n\\t\\treturn 2;\\n\\t}\\n}\",\"defaultFilePath\":\"Main.java\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"unit_test\",\"title\":\"testcases\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void testcases() {\\n    Main a = new Main();\\n    assertEquals(2,a.practiceOne());\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"class Main {\\n\\t\\n\\t{\\n\\t\\treturn 2;\\n\\t}\\n}\"],\"t\":1613415097000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16351,
    "title": "Lab05_Problem06: 2D Array Practice 4",
    "prompt_md": "\nComplete the countNegativeOdd method.  The method should take in 2-D integer array and return the number of elements that are negative AND odd\n\n\n\n",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main\\n{\\n\\tpublic static void main(String[] args)\\n\\t{\\n\\t\\tint[][] a = {\\n\\t\\t\\t{-5,-2,-3,7},\\n\\t\\t\\t{1,-5,-2,2},\\n\\t\\t\\t{1,-2,3,-4}\\n\\t\\t};\\n\\t\\tSystem.out.println(countNegativeOdd(a)); //should print 3\\n\\t}\\n\\n    // you should complete the method below\\n\\tpublic static int countNegativeOdd(int[][] array)\\n\\t{\\n\\t\\t\\n\\t}\\n}\",\"defaultFilePath\":\"\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"unit_test\",\"title\":\"tests\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void tests() {\\n    int[][] a = {\\n    \\t{-5,-2,-3,7},\\n    \\t{-1,-5,-2,2},\\n    \\t{-1,-2,3,-4}\\n    };\\n    assertEquals(5,Main.countNegativeOdd(a));\\n    int[][] b = {\\n        {-1,-2,-3,-4},\\n        {1,2,3,4}\\n    };\\n    assertEquals(2,Main.countNegativeOdd(b));\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"class Main\\n{\\n\\tpublic static void main(String[] args)\\n\\t{\\n\\t\\tint[][] a = {\\n\\t\\t\\t{-5,-2,-3,7},\\n\\t\\t\\t{1,-5,-2,2},\\n\\t\\t\\t{1,-2,3,-4}\\n\\t\\t};\\n\\t\\tSystem.out.println(countNegativeOdd(a)); //should print 3\\n\\t}\\n\\tpublic static int countNegativeOdd(int[][] array)\\n\\t{\\n\\t\\t\\n\\t}\\n}\"],\"t\":1614890313000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16352,
    "title": "098 - 2D Array Practice 8 (Challenge)",
    "prompt_md": "\nComplete the sumArray method so that it does the following:\n\n\n\nGiven two 2D arrays of different sizes, create a new rectangular 2D array with a size large enough to encompass all elements of both arrays.  The elements of the new 2D array should be equal to the sum of the two given arrays in the applicable indexes.\n\n\n\nExample:\n\n\n\n```\nint[][] a = {\n    {1,0},\n    {1,1},\n    {1,0}\n};\nint[][] b = {\n    {1,1,0,1},\n    {1,1,1,1}\n};\n\nsumArray(a,b) will return:\n\n{\n    {2,1,0,1},\n    {2,2,1,1},\n    {1,0,0,0}\n}\n```\n\n\n\n",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main\\n{\\n\\tpublic static void main(String[] args)\\n\\t{\\n\\t\\tint[][] a = {\\n\\t\\t\\t{-5,-2},\\n\\t\\t\\t{1,-5},\\n\\t\\t\\t{1,-2}\\n\\t\\t};\\n\\t\\tint[][] b = {\\n\\t\\t    {1,1,0,1},\\n\\t\\t    {1,1,1,1}\\n\\t\\t};\\n\\t\\tint[][] result = sumArray(a,b);\\n\\t\\t//prints array, should match example on right\\n\\t\\tfor(int[] row : result){\\n\\t\\t\\tfor(int e : row){\\n\\t\\t\\t\\tSystem.out.print(e + \\\" \\\");\\n\\t\\t\\t}\\n\\t\\t\\tSystem.out.println();\\n\\t\\t}\\n\\t}\\n\\tpublic static int[][] sumArray(int[][] arr1, int[][] arr2)\\n\\t{\\n\\t\\t\\n\\t}\\n}\",\"defaultFilePath\":\"Main.java\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"unit_test\",\"title\":\"tests\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void tests() {\\n    int[][] a = {\\n        {1,0},\\n        {1,1},\\n        {1,0}\\n    };\\n    int[][] b = {\\n        {1,1,0,1},\\n        {1,1,1,1}\\n    };\\n    int[][] x = {\\n        {2,1,0,1},\\n        {2,2,1,1},\\n        {1,0,0,0}\\n    };\\n    int[][] test1 = Main.sumArray(a,b);\\n    // for(int r=0;r\\u003cx.length;r++)\\n    //     for(int c=0;c\\u003cx[0].length;c++)\\n    //         assertEquals(x[r][c],test1[r][c]);\\n    assertArrayEquals(x,test1);\\n    int[][] d = {\\n        {1,1},\\n        {2,2},\\n        {3,3},\\n        {4,4}\\n    };\\n    int[][] test2 = Main.sumArray(x,d);\\n    int[][] y = {\\n        {3,2,0,1},\\n        {4,4,1,1},\\n        {4,3,0,0},\\n        {4,4,0,0}\\n    };\\n    // for(int r=0;r\\u003cx.length;r++)\\n    //     for(int c=0;c\\u003cx[0].length;c++)\\n    //         assertEquals(y[r][c],test2[r][c]);\\n    assertArrayEquals(y,test2);\\n    int[][] j = {\\n        {1,2,3,4,5,6,7,8}\\n    };\\n    int[][] k = {\\n        {1},\\n        {2},\\n        {3},\\n        {4}\\n    };\\n    int[][] l = {\\n        {2,2,3,4,5,6,7,8},\\n        {2,0,0,0,0,0,0,0},\\n        {3,0,0,0,0,0,0,0},\\n        {4,0,0,0,0,0,0,0},\\n    };\\n    int[][] m = Main.sumArray(j,k);\\n    assertArrayEquals(l,m);\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null}}"
  },
  {
    "id": 16353,
    "title": "Lab04_Problem14: Finding Minimum in Array",
    "prompt_md": "\nComplete the minValue method so that given the array nums, it will return the minimum value in the array.\n\n\n\n",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main\\n{\\n\\tpublic static void main(String[] args) \\n\\t{\\n\\t\\tint[] arr = {5,12,-3,7,3,22};\\n\\t\\tSystem.out.println(minValue(arr)); //should print -3\\n\\t}\\n\\tpublic static int minValue(int[] nums)\\n\\t{\\n\\t\\t\\n\\t}\\n}\",\"defaultFilePath\":\"Main.java\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"unit_test\",\"title\":\"tests\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void tests() {\\n    int[] a = {6,3,8,3,1,1,6,4,-2};\\n    assertEquals(-2,Main.minValue(a));\\n    \\n    int[] b = {67,83,33,57,356};\\n    assertEquals(33,Main.minValue(b));\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"class Main\\n{\\n\\tpublic static void main(String[] args) \\n\\t{\\n\\t\\tint[] arr = {5,12,-3,7,3,22};\\n\\t\\tSystem.out.println(minValue(arr)); //should print -3\\n\\t}\\n\\tpublic static int minValue(int[] nums)\\n\\t{\\n\\t\\t\\n\\t}\\n}\"],\"t\":1611320569000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16354,
    "title": "Lab03_Problem16: Accumulator Method Practice 6",
    "prompt_md": "\nWrite a method header on line two with the following specs:  \n\n\nReturns:\n\n```\na String\n```\n\nName:\n\n```\nkeepVowels\n```\n\nParameters:\n\n```\na String called s\n```\n\nPurpose:\n\n```\ncreate a string that is composed of all the vowels in the string, in the same order that they appear.\nsee below examples for clarity.\n```\n\n\n\nExamples:\n\n```\nkeepVowels(\"hello\") ==> \"eo\"\nkeepVowels(\"how do i internets\") ==> \"ooiiee\"\n```\n\n\n\nHint:\n\nWithin your method, it should be clear to you that you'll loop over your starting string, s. But, before you start the loop, you should create a new String, keepVowels, and you should initialize it to the empty String.\n\n\n\n```\nString keepVowels = \"\";\n```\n\n\n\nThen, as you loop over the given String, s, you will append any vowels you find to this new String, keepVowels.\n\n\n\n",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main {\\n\\t\\n\\t{\\n\\t\\t\\n\\t}\\n\\t\\n\\t//test case below (dont change):\\n\\tpublic static void main(String[] args){\\n\\t\\tSystem.out.println(keepVowels(\\\"hello\\\")); //eo\\n\\t\\tSystem.out.println(keepVowels(\\\"how do i internets\\\")); //ooiiee\\n\\t}\\n}\",\"defaultFilePath\":\"Main.java\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"unit_test\",\"title\":\"tests\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void tests() {\\n    Main a = new Main();\\n    \\n    assertEquals(\\\"eo\\\",a.keepVowels(\\\"hello\\\"));\\n    assertEquals(\\\"ooiiee\\\", a.keepVowels(\\\"how do i internets\\\"));\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"class Main {\\n\\t\\n\\t{\\n\\t\\t\\n\\t}\\n\\t\\n\\t//test case below (dont change):\\n\\tpublic static void main(String[] args){\\n\\t\\tSystem.out.println(keepVowels(\\\"hello\\\")); //eo\\n\\t\\tSystem.out.println(keepVowels(\\\"how do i internets\\\")); //ooiiee\\n\\t}\\n}\"],\"t\":1613416163000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16355,
    "title": "107 - AL5 - ArrayList Methods - remove",
    "prompt_md": "\nThe next ArrayList method we are going to learn is .remove()\n\n\n\nThe .remove(i) method will remove the element at index i.  This means that all elements after index i will be shifted back to fill the hole left by the removal.\n\n\n\nAs an example, say you had an ArrayList called nums with values (6,2,3,1,9,2,5).  Running the following code:\n\n```\nnums.remove(1);\n```\n\nwill result in (6,3,1,9,2,5).  Running the following code again:\n\n```\nnums.remove(3);\nnums.remove(3);\n```\n\nwill result in (6,3,1,5), because after the first remove(3) is run, the 2 and 5 get pushed up into the 3rd and 4th index, and then the second remove(3) will remove the 2, leaving the 5.  Ask Mr. Chen to demonstrate this if you're still confused.\n\n\n\nOn the left, write code that will remove the first two elements in an ArrayList of doubles.\n\n\n\n",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"import java.util.ArrayList;\\n\\nclass Main\\n{\\n\\tpublic static void test(ArrayList\\u003cDouble\\u003e dubs)\\n\\t{\\n\\t\\t//write code here\\n\\t\\t\\n\\t}\\n}\",\"defaultFilePath\":\"Main.java\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"unit_test\",\"title\":\"tests\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\nimport java.util.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void tests() {\\n    ArrayList\\u003cDouble\\u003e a = new ArrayList\\u003cDouble\\u003e();\\n    a.add(4.0);\\n    a.add(2.0);\\n    a.add(1.0);\\n    a.add(7.0);\\n    a.add(5.0);\\n    Main.test(a);\\n    \\n    ArrayList\\u003cDouble\\u003e b = new ArrayList\\u003cDouble\\u003e();\\n    b.add(1.0);\\n    b.add(7.0);\\n    b.add(5.0);\\n    \\n    assertEquals(b,a);\\n    \\n    ArrayList\\u003cDouble\\u003e c = new ArrayList\\u003cDouble\\u003e();\\n    c.add(4.0);\\n    c.add(2.0);\\n    c.add(5.0);\\n    Main.test(c);\\n    \\n    ArrayList\\u003cDouble\\u003e d = new ArrayList\\u003cDouble\\u003e();\\n    d.add(5.0);\\n    \\n    assertEquals(d,c);\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null}}"
  },
  {
    "id": 16356,
    "title": "Lab02_Problem06: For Loop 6",
    "prompt_md": "Using a for loop, determine whether the integer variable max is prime or not. If the number is prime, print out \"prime\". If it's not, print out \"not prime\". Keep in mind that 1 is NOT a prime number.\n\n### Sample Input #1\n\n```plaintext\n100\n```\n\n### Sample Output #1\n\n```plaintext\nnot prime\n```\n\n###  Sample Input #2\n\n```plaintext\n17\n```\n\n### Sample Output #2\n\n```plaintext\nprime\n```",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"import java.util.Scanner;\\n\\nclass Main {\\n    public static void main(String[] args) {\\n        Scanner in = new Scanner(System.in);\\n\\n        int max = in.nextInt();\\n        //write your code below\\n\\n\\n    }\\n}\",\"defaultFilePath\":\"\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"stdout\",\"title\":\"3466643\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"prime\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"3466643\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"3935263\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"not prime\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"3935263\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"3923512\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"not prime\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"3923512\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"1\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"not prime\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"1\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"13\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"prime\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"13\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"11\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"prime\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"11\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"32\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"not prime\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"32\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"import java.util.Scanner;\\n\\nclass Main {\\n  public static void main(String[] args) {\\n    Scanner inp = new Scanner(System.in);\\n    System.out.print(\\\"In: \\\");\\n    int max = inp.nextInt();\\n    //write your code below\\n    \\n    \\n  }\\n}\"],\"t\":1612811812000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16357,
    "title": "Lab05_Problem02: Reducing 2D Array Elements by 10",
    "prompt_md": "\nComplete the reduce10 method by making it subtract 10 from every element of the double array nums.\n\n\n\nYou may assume that the array will ALWAYS have 3 rows and 4 columns.\n\n\n\nThe method does not have to return anything - you should be modifying the nums array that is passed via parameter.\n\n\n\n",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main\\n{\\n\\tpublic static void main(String[] args)\\n\\t{\\n\\t\\tint[][] a = {\\n\\t\\t\\t{1,2,3,4},\\n\\t\\t\\t{4,5,6,7},\\n\\t\\t\\t{1,3,5,7}\\n\\t\\t};\\n\\t\\treduce10(a);\\n\\t\\t//print the Array\\n\\t\\tfor(int[] row : a){\\n\\t\\t\\tfor(int e : row){\\n\\t\\t\\t\\tSystem.out.print(e + \\\" \\\");\\n\\t\\t\\t}\\n\\t\\t\\tSystem.out.println();\\n\\t\\t}\\n\\t}\\n\\t\\n\\tpublic static void reduce10(int[][] nums)\\n\\t{\\n\\t\\t\\n\\t}\\n}\",\"defaultFilePath\":\"Main.java\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"unit_test\",\"title\":\"tests\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void tests() {\\n    int[][] a = {\\n    \\t\\t\\t{1,2,3,4},\\n    \\t\\t\\t{4,5,6,7},\\n    \\t\\t\\t{1,3,5,7}\\n    \\t\\t};\\n    Main.reduce10(a);\\n    int[][] result = {\\n        {-9,-8,-7,-6},\\n        {-6,-5,-4,-3},\\n        {-9,-7,-5,-3}\\n    };\\n    for(int r=0;r\\u003c3;r++)\\n        for(int c=0;c\\u003c4;c++)\\n            assertEquals(result[r][c],a[r][c]);\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"class Main\\n{\\n\\tpublic static void main(String[] args)\\n\\t{\\n\\t\\tint[][] a = {\\n\\t\\t\\t{1,2,3,4},\\n\\t\\t\\t{4,5,6,7},\\n\\t\\t\\t{1,3,5,7}\\n\\t\\t};\\n\\t\\treduce10(a);\\n\\t\\t//print the Array\\n\\t\\tfor(int[] row : a){\\n\\t\\t\\tfor(int e : row){\\n\\t\\t\\t\\tSystem.out.print(e + \\\" \\\");\\n\\t\\t\\t}\\n\\t\\t\\tSystem.out.println();\\n\\t\\t}\\n\\t}\\n\\t\\n\\tpublic static void reduce10(int[][] nums)\\n\\t{\\n\\t\\t\\n\\t}\\n}\"],\"t\":1614277517000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16358,
    "title": "117 - Object Review 2",
    "prompt_md": "\nComplete the createObject method so that it will create an instance of the SomeObject class and return it.  Look at the SomeObject.java file to see how to use the constructor.\n\n\n\nYou should be passing along the values of 50, true, and \"hi\" to the constructor.\n\n\n\n",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main\\n{\\n\\tpublic static SomeObject createObject()\\n\\t{\\n\\t\\t//write code here\\n\\t\\t\\n\\t}\\n}\",\"defaultFilePath\":\"Main.java\",\"extraFiles\":{\"U29tZU9iamVjdC5qYXZh\":{\"contents\":\"public class SomeObject\\n{\\n\\tpublic int property1;\\n\\tpublic boolean property3;\\n\\tpublic String property2;\\n\\t\\n\\tpublic SomeObject(int x, boolean y, String z)\\n\\t{\\n\\t\\tthis.property1 = x;\\n\\t\\tthis.property2 = z;\\n\\t\\tthis.property3 = y;\\n\\t}\\n}\",\"language\":\"java\",\"type\":\"\"}}}},\"grading\":{\"testCases\":[{\"type\":\"unit_test\",\"title\":\"tests\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void tests() {\\n    SomeObject x = Main.createObject();\\n    assertEquals(50,x.property1);\\n    assertEquals(\\\"hi\\\",x.property2);\\n    assertEquals(true,x.property3);\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null}}"
  },
  {
    "id": 16359,
    "title": "Lab04_Problem13: Printing Arrays Practice 5",
    "prompt_md": "\nThe code provided in your main method will take in five Strings and save them into an array called arr.  Print out the first three letters of each element of arr, one per line.  You can assume that every element of arr is at least 3 letters long.\n\n\n\n\n\n\n\n",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"import java.util.Scanner;\\nclass Main\\n{\\n\\tpublic static void main(String[] args)\\n\\t{\\n\\t\\tScanner input = new Scanner(System.in);\\n\\t\\tString[] arr = new String[5];\\n\\t\\tfor (int i=0;i\\u003c5;i++)\\n\\t\\t{\\n\\t\\t\\tarr[i] = input.nextLine();\\n\\t\\t}\\n\\t\\t//leave above alone!  write your code below\\n\\t\\t\\n\\t\\t\\n\\t}\\n}\",\"defaultFilePath\":\"Main.java\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"stdout\",\"title\":\"test 2\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"bla\\nbla\\nlol\\nwha\\nwha\",\"stdoutCompareMethod\":\"equals\",\"stdin\":\"blah\\nblah\\nlol\\nwhat\\nwhat\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"test 1\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"hel\\nhow\\nare\\nyou\\ndoi\",\"stdoutCompareMethod\":\"equals\",\"stdin\":\"hello\\nhow\\nare\\nyou\\ndoing\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"import java.util.Scanner;\\nclass Main\\n{\\n\\tpublic static void main(String[] args)\\n\\t{\\n\\t\\tScanner input = new Scanner(System.in);\\n\\t\\tString[] arr = new String[5];\\n\\t\\tfor (int i=0;i\\u003c5;i++)\\n\\t\\t{\\n\\t\\t\\tarr[i] = input.nextLine();\\n\\t\\t}\\n\\t\\t//leave above alone!  write your code below\\n\\t\\t\\n\\t\\t\\n\\t}\\n}\"],\"t\":1614276075000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16360,
    "title": "Lab02_Problem14: Palindrome",
    "prompt_md": "Write code that will take in a String input and check to see if it is a palindrome or not.\n\nA palindrome means that the characters are the same forwards and backward, _ignoring spaces_.\n\nExamples of palindromes:\n\n*   racecar\n*   was it a car or a cat I saw\n*   never odd or even\n*   rats live on no evil star\n\nYour check should be case insensitive too. For example, \"Bob\" is a palindrome, despite the first B being capitalized.\n\nYour program will print out \"true\" if it's a palindrome and \"false\" if not.\n\n### Sample Input #1\n\n```plaintext\nracecar\n```\n\n### Sample Output #1\n\n```plaintext\ntrue\n```",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"import java.util.Scanner;\\n\\nclass Main {\\n  public static void main(String[] args) {\\n    Scanner inp = new Scanner(System.in);\\n    System.out.print(\\\"In:\\\");\\n    String s = inp.nextLine();\\n   \\t//write your code below\\n   \\t\\n   \\t\\n  }\\n}\",\"defaultFilePath\":\"Main.java\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"stdout\",\"title\":\"this is not a palindrome\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"false\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"this is not a palindrome\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"Was it a car or a cat I saw\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"true\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"Was it a car or a cat I saw\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"a Toyotas a Toyota\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"true\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"a Toyotas a Toyota\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"racecar\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"true\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"racecar\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"oozy RAT in a sanitary ZOO\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"true\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"oozy RAT in a sanitary ZOO\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"some string heyoo\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"false\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"some string heyoo\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"import java.util.Scanner;\\n\\nclass Main {\\n  public static void main(String[] args) {\\n    Scanner inp = new Scanner(System.in);\\n    System.out.print(\\\"In:\\\");\\n    String s = inp.nextLine();\\n   \\t//write your code below\\n   \\t\\n   \\t\\n  }\\n}\"],\"t\":1612875684000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16361,
    "title": "Lab07_Problem01: Person Class",
    "prompt_md": "## IMPORTANT: Read the instructions carefully, so as to not miss any steps.\n\nInstructions:\n\n1.  You should only put code in Person.java\n2.  You _can_ use Main.java to make test objects and test your class if you like. Just make sure no errors are present within your testing code.\n3.  The test cases are only testing the code within Person.java (but your Main.java must be free from errors in order to run).\n\nWithin Person.java, do the following:\n\n### Declare the following **seven** **private** data members:\n\n1.  a String called _firstName_\n2.  a String called _lastName_\n3.  an int called _birthMonth_\n4.  an int called _birthDay_\n5.  an int called _birthYear_\n6.  a String called _SSN_\n7.  a _**static**_ int called numPersons (and initialize it to zero)\n\n*   NOTE: the variable names, AND the capitalization, should be **exactly** as shown above\n\n### Write **two constructors**:\n\n1.  a constructor that receives all data members values as parameters\n    *   this constructor should also increment the static numPersons variable\n2.  a no-argument constructor\n    *   and even this constructor should also increment the static numPersons variable\n    *   firstName, lastName, and SSN should all be initialized to the following String: “unassigned”\n\n### Write **all accessor** (getter) methods and **all mutator** (setter) methods.\n\n*   Be very careful that you use the EXACT naming conventions shown in class\n*   Pay attention to the style of the capitalization and how the “f” was lowercase in the variable name but is now **Uppercase** in the getter and setter method name\n*   Your program will not pass the test cases if your style is different than the above example.\n\n### Your class should also include the following **two** methods:\n\n1.  **public String getBirthDate()**\n    *   Parameters: none\n    *   Returns: String\n    *   Description: method returns a String composed of their birthday in month/day/year format.\n    *   For example, if birthMonth=3, birthDay=22, birthYear=2000, it should return the String \"3/22/2000\"\n    *   Note: if you create a new Person via the no-arg constructor, the birthDay, birthMonth, and birthYear will only have the default values of zero.\n    *   In this case, you should _not_ return 0/0/0. That would fail the test case.\n    *   If any of the birthDay, birthMonth, or birthYear contain default values, you should return the following ten-character String: “unassigned”\n2.  **public String isValidSSN()**\n    *   Parameters: none\n    *   Returns: String\n    *   Description: method examines the data member, SSN, to determine if it is a valid\n    *   Note: a valid SSN must consist of exactly 11 characters in the following format: XXX-XX-XXXX\n    *   where each X must be a digit and index 3 and 6 of that String must be a dash character ('-')\n    *   IF the given SSN String matches that exact format you should return the word “valid”. Else, the word “invalid” should be returned\n3.  **public String toString()**\n    *   Parameters: none\n    *   Returns: String\n    *   Description: this is a toString() method, which should return a String representation of the given object.\n    *   Please see examples below to see EXACTLY how this returned String should look.\n    *   Want a hint on how to start? Make a String variable, called s, for example, and set that variable equal to the empty String (\"\"). Then, for each line of output below, concatenate to that s String the appropriate data needed for each line. Oh, and be sure to use String.format() to make your life a bit easier!\n    *   WARNING: the returned String must have the EXACT format/look as shown in the samples. (space for space, colon for colon…everything must be identical in order for it to pass the test case).\n\n_**\\*Important: make sure the values in your constructor are given in the SAME order as shown in the original list of data members above. While not important in theory, this is the only way to confirm your program works and have it tested by the system. So if you want a constructor with make, model, and price, you need to list them in that order exactly...not model, make, and price.**_\n\nTest your code with the Main.java class by creating several Car objects using all four Constructors and print their fields/states to make sure it's correct.\n\n### Sample Main.java #1\n\n```plaintext\npublic class Main {\n    public static void main(String[] args) {        \n        Person p = new Person(\"Wanda\", \"Maximoff\", 2, 10, 1918, \"888-88-8888\");        \n        System.out.println(p.isValidSSN());      // calling the isValidSSN() method\n        System.out.println(p.getBirthDate());    // calling the getBirthDate() method\n    }\n}\n```\n\n### Corresponding Output #1\n\n```plaintext\nvalid\n2/10/1918\n```\n\n### Sample Main.java #2\n\n```plaintext\npublic class Main {\n    public static void main(String[] args) {\n        Person p = new Person(\"Steve\", \"Rogers\", 7, 4, 1918, \"---\");\n        System.out.println(p); // This automatically calls the overriddent toString() method\n    }\n}\n```\n\n### Corresponding Output #2\n\n```plaintext\nPersonal Information:\nFirst Name: Steve\nLast Name: Rogers\nBirth Date: 7/4/1918\nSSN: --- (invalid)\n```\n\n### Sample Main.java #3\n\n```plaintext\npublic class Main {\n    public static void main(String[] args) {        \n        Person p = new Person();\n        System.out.println(p);\n    }\n}\n```\n\n### Corresponding Output #3\n\n```plaintext\nPersonal Information:\nFirst Name: unassigned\nLast Name: unassigned\nBirth Date: unassigned\nSSN: unassigned (invalid)\n```",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main {\\n    public static void main(String[] args) {\\n\\n        // You *CAN* include code here in your main if you want to test the Dog.java class.\\n        // You can make new Dog objects. You can print things.\\n\\n        // The code here in main will NOT be graded.\\n\\n        // HOWEVER, if any code here in main has an error, that could cause your\\n        // program to fail. So be careful.\\n        \\n    }\\n}\\n\",\"defaultFilePath\":\"\",\"defaultFileType\":\"\",\"extraFiles\":{\"UGVyc29uLmphdmE=\":{\"contents\":\"class Person {\\n\\t// Data Members:\\n\\t\\n\\t\\n\\n\\t\\n\\t// Constructors:\\n\\t\\n    \\n\\n\\n    // Accessor and Mutator Methods:\\n\\n\\n\\n    // Other Methods\\n\\n\\n    \\n\\t\\n}\",\"language\":\"java\",\"type\":\"\"}}}},\"grading\":{\"testCases\":[{\"type\":\"unit_test\",\"title\":\"constructor test 1\",\"headline\":\"\",\"points\":5,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n    @Before\\n    public void setUp() {\\n        // Setup code here (if required)\\n    }\\n\\n    @After\\n    public void tearDown() {\\n        // Teardown code here (if required)\\n    }\\n\\n    @Test\\n    public void testDefaultCase() {\\n        Person p = new Person(\\\"Steve\\\", \\\"Rogers\\\", 7, 4, 1918, \\\"---\\\");\\n        \\n        assertEquals(\\\"Steve\\\", p.getFirstName());\\n        assertEquals(\\\"Rogers\\\", p.getLastName());\\n        assertEquals(7, p.getBirthMonth());\\n        assertEquals(4, p.getBirthDay());\\n        assertEquals(1918, p.getBirthYear());\\n        assertEquals(\\\"---\\\", p.getSSN());\\n    }\\n}\\n\\n\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"unit_test\",\"title\":\"SSN check 1\",\"headline\":\"\",\"points\":7,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n    @Before\\n    public void setUp() {\\n        // Setup code here (if required)\\n    }\\n\\n    @After\\n    public void tearDown() {\\n        // Teardown code here (if required)\\n    }\\n\\n    @Test\\n    public void testDefaultCase() {\\n        Person p = new Person(\\\"a\\\", \\\"b\\\", 1, 1, 1900, \\\"123-45-67898\\\");\\n        \\n        assertEquals(\\\"invalid\\\", p.isValidSSN());\\n    }\\n}\\n\\n\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"This test case examines your isValidSSN() method. If it fails, that means your method is not working correctly.\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"unit_test\",\"title\":\"SSN check 2\",\"headline\":\"\",\"points\":7,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n    @Before\\n    public void setUp() {\\n        // Setup code here (if required)\\n    }\\n\\n    @After\\n    public void tearDown() {\\n        // Teardown code here (if required)\\n    }\\n\\n    @Test\\n    public void testDefaultCase() {\\n        Person p = new Person(\\\"a\\\", \\\"b\\\", 1, 1, 1900, \\\"a23-45-6789\\\");\\n        \\n        assertEquals(\\\"invalid\\\", p.isValidSSN());\\n    }\\n}\\n\\n\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"This test case examines your isValidSSN() method. If it fails, that means your method is not working correctly.\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"unit_test\",\"title\":\"SSN check 3\",\"headline\":\"\",\"points\":8,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n    @Before\\n    public void setUp() {\\n        // Setup code here (if required)\\n    }\\n\\n    @After\\n    public void tearDown() {\\n        // Teardown code here (if required)\\n    }\\n\\n    @Test\\n    public void testDefaultCase() {\\n        Person p = new Person(\\\"a\\\", \\\"b\\\", 1, 1, 1900, \\\"123.45.6789\\\");\\n        \\n        assertEquals(\\\"invalid\\\", p.isValidSSN());\\n    }\\n}\\n\\n\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"This test case examines your isValidSSN() method. If it fails, that means your method is not working correctly.\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"unit_test\",\"title\":\"SSN check 4\",\"headline\":\"\",\"points\":8,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n    @Before\\n    public void setUp() {\\n        // Setup code here (if required)\\n    }\\n\\n    @After\\n    public void tearDown() {\\n        // Teardown code here (if required)\\n    }\\n\\n    @Test\\n    public void testDefaultCase() {\\n        Person p = new Person(\\\"a\\\", \\\"b\\\", 1, 1, 1900, \\\"123-45-6789\\\");\\n        \\n        assertEquals(\\\"valid\\\", p.isValidSSN());\\n    }\\n}\\n\\n\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"This test case examines your isValidSSN() method. If it fails, that means your method is not working correctly.\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"unit_test\",\"title\":\"getBD check 1\",\"headline\":\"\",\"points\":10,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n    @Before\\n    public void setUp() {\\n        // Setup code here (if required)\\n    }\\n\\n    @After\\n    public void tearDown() {\\n        // Teardown code here (if required)\\n    }\\n\\n    @Test\\n    public void testDefaultCase() {\\n        Person p = new Person();\\n        \\n        assertEquals(\\\"unassigned\\\", p.getBirthDate());\\n    }\\n}\\n\\n\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"unit_test\",\"title\":\"getBD check 2\",\"headline\":\"\",\"points\":10,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n    @Before\\n    public void setUp() {\\n        // Setup code here (if required)\\n    }\\n\\n    @After\\n    public void tearDown() {\\n        // Teardown code here (if required)\\n    }\\n\\n    @Test\\n    public void testDefaultCase() {\\n        Person p = new Person(\\\"a\\\", \\\"a\\\", 2, 17, 2002, \\\"---\\\");\\n        \\n        assertEquals(\\\"2/17/2002\\\", p.getBirthDate());\\n    }\\n}\\n\\n\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"unit_test\",\"title\":\"constructor test 2\",\"headline\":\"\",\"points\":5,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n    @Before\\n    public void setUp() {\\n        // Setup code here (if required)\\n    }\\n\\n    @After\\n    public void tearDown() {\\n        // Teardown code here (if required)\\n    }\\n\\n    @Test\\n    public void testDefaultCase() {\\n        Person p = new Person();\\n        \\n        assertEquals(\\\"unassigned\\\", p.getFirstName());\\n        assertEquals(\\\"unassigned\\\", p.getLastName());\\n        assertEquals(0, p.getBirthMonth());\\n        assertEquals(0, p.getBirthDay());\\n        assertEquals(0, p.getBirthYear());\\n        assertEquals(\\\"unassigned\\\", p.getSSN());\\n    }\\n}\\n\\n\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"unit_test\",\"title\":\"toString test 1\",\"headline\":\"\",\"points\":10,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n    @Before\\n    public void setUp() {\\n        // Setup code here (if required)\\n    }\\n\\n    @After\\n    public void tearDown() {\\n        // Teardown code here (if required)\\n    }\\n\\n    @Test\\n    public void testDefaultCase() {\\n        Person p = new Person(\\\"abc\\\", \\\"abc\\\", 1, 1, 1970, \\\"123.45.6789\\\");\\n        String s = \\\"Personal Information:\\\\nFirst Name: abc\\\\nLast Name: abc\\\\nBirth Date: 1/1/1970\\\\nSSN: 123.45.6789 (invalid)\\\\n\\\";\\n        assertEquals(s, p.toString());\\n    }\\n}\\n\\n\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"unit_test\",\"title\":\"toString test 2\",\"headline\":\"\",\"points\":10,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n    @Before\\n    public void setUp() {\\n        // Setup code here (if required)\\n    }\\n\\n    @After\\n    public void tearDown() {\\n        // Teardown code here (if required)\\n    }\\n\\n    @Test\\n    public void testDefaultCase() {\\n        Person p = new Person(\\\"abc\\\", \\\"abc\\\", 1, 1, 1970, \\\"123-45-6789\\\");\\n        String s = \\\"Personal Information:\\\\nFirst Name: abc\\\\nLast Name: abc\\\\nBirth Date: 1/1/1970\\\\nSSN: 123-45-6789 (valid)\\\\n\\\";\\n        assertEquals(s, p.toString());\\n    }\\n}\\n\\n\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"unit_test\",\"title\":\"toString test 3\",\"headline\":\"\",\"points\":10,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n    @Before\\n    public void setUp() {\\n        // Setup code here (if required)\\n    }\\n\\n    @After\\n    public void tearDown() {\\n        // Teardown code here (if required)\\n    }\\n\\n    @Test\\n    public void testDefaultCase() {\\n        Person p = new Person();\\n        String s = \\\"Personal Information:\\\\nFirst Name: unassigned\\\\nLast Name: unassigned\\\\nBirth Date: unassigned\\\\nSSN: unassigned (invalid)\\\\n\\\";\\n        assertEquals(s, p.toString());\\n    }\\n}\\n\\n\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"unit_test\",\"title\":\"static numPerson test\",\"headline\":\"\",\"points\":10,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n    @Before\\n    public void setUp() {\\n        // Setup code here (if required)\\n    }\\n\\n    @After\\n    public void tearDown() {\\n        // Teardown code here (if required)\\n    }\\n\\n    @Test\\n    public void testDefaultCase() {\\n        assertEquals(0, Person.getNumPersons());\\n\\n        Person p1 = new Person();\\n        assertEquals(1, Person.getNumPersons());\\n\\n        Person p2 = new Person(\\\"a\\\", \\\"a\\\", 1, 1, 2000, \\\"333-33-3333\\\");\\n        assertEquals(2, Person.getNumPersons());\\n\\n        Person p3 = new Person();\\n        assertEquals(3, Person.getNumPersons());\\n    }\\n}\\n\\n\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"This test case examines whether or not you have a static numPersons variable, a static getNumPersons() method, and if you are incrementing numPersons correctly in the constructors.\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main {\\n    public static void main(String[] args) {\\n\\n        // You *CAN* include code here in your main if you want to test the Dog.java class.\\n        // You can make new Dog objects. You can print things.\\n\\n        // The code here in main will NOT be graded.\\n\\n        // HOWEVER, if any code here in main has an error, that could cause your\\n        // program to fail. So be careful.\\n        \\n    }\\n}\\n\",\"defaultFilePath\":\"\",\"defaultFileType\":\"\",\"extraFiles\":{\"UGVyc29uLmphdmE=\":{\"contents\":\"\\npublic class Person {\\n\\n\\t// Data Members\\n\\tprivate String firstName;\\n\\tprivate String lastName;\\n\\tprivate int birthDay;\\n\\tprivate int birthMonth;\\n\\tprivate int birthYear;\\n\\tprivate String SSN;\\n\\n\\tpublic Person() {\\n\\t\\tfirstName = \\\"unassigned\\\";\\n\\t\\tlastName = \\\"unassigned\\\";\\n\\t\\tSSN = \\\"unassigned\\\";\\n\\t}\\n\\n\\tpublic Person(String firstName, String lastName, int birthDay, int birthMonth, int birthYear, String SSN) {\\n\\t\\tthis.firstName = firstName;\\n\\t\\tthis.lastName = lastName;\\n\\t\\tthis.birthDay = birthDay;\\n\\t\\tthis.birthMonth = birthMonth;\\n\\t\\tthis.birthYear = birthYear;\\n\\t\\tthis.SSN = SSN;\\n\\t}\\n\\n\\tpublic String getSSN() {\\n\\t\\treturn SSN;\\n\\t}\\n\\n\\tpublic void setSSN(String SSN) {\\n\\t\\tthis.SSN = SSN;\\n\\t}\\n\\n\\tpublic String getFirstName() {\\n\\t\\treturn firstName;\\n\\t}\\n\\n\\tpublic void setFirstName(String firstName) {\\n\\t\\tthis.firstName = firstName;\\n\\t}\\n\\n\\tpublic String getLastName() {\\n\\t\\treturn lastName;\\n\\t}\\n\\n\\tpublic void setLastName(String lastName) {\\n\\t\\tthis.lastName = lastName;\\n\\t}\\n\\n\\tpublic int getBirthMonth() {\\n\\t\\treturn birthMonth;\\n\\t}\\n\\n\\tpublic void setBirthMonth(int birthMonth) {\\n\\t\\tthis.birthMonth = birthMonth;\\n\\t}\\n\\n\\tpublic int getBirthDay() {\\n\\t\\treturn birthDay;\\n\\t}\\n\\n\\tpublic void setBirthDay(int birthDay) {\\n\\t\\tthis.birthDay = birthDay;\\n\\t}\\n\\n\\tpublic int getBirthYear() {\\n\\t\\treturn birthYear;\\n\\t}\\n\\n\\tpublic void setBirthYear(int birthYear) {\\n\\t\\tthis.birthYear = birthYear;\\n\\t}\\n\\n\\t// Other Methods\\n\\tpublic String getBirthDate() {\\n\\t\\tif (birthDay == 0 || birthMonth == 0 || birthYear == 0) {\\n\\t\\t\\treturn \\\"unassigned\\\";\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\treturn String.format(\\\"%d/%d/%d\\\", birthDay, birthMonth, birthYear);\\n\\t\\t}\\n\\t}\\n\\n\\tpublic String isValidSSN() {\\n\\t\\tif (SSN.length() != 11) {\\n\\t\\t\\treturn \\\"invalid\\\";\\n\\t\\t}\\n\\t\\tfor (int i = 0; i \\u003c SSN.length(); i++) {\\n\\t\\t\\tif (i == 3 || i == 6) {\\n\\t\\t\\t\\t// IF the character at index 3 or index 6 is NOT a '-', return false\\n\\t\\t\\t\\tif (SSN.charAt(i) != '-') {\\n\\t\\t\\t\\t\\treturn \\\"invalid\\\";\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\telse {\\n\\t\\t\\t\\t// IF the character at index 'i' is NOT a digit, return false\\n\\t\\t\\t\\tif (Character.isDigit(SSN.charAt(i)) == false) {\\n\\t\\t\\t\\t\\treturn \\\"invalid\\\";\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// IF we've made it till here, then the SSN is valid...thus, return true\\n\\t\\treturn \\\"valid\\\";\\n\\t}\\n\\n\\t@Override\\n\\tpublic String toString() {\\n\\t\\tString s = \\\"\\\";\\n\\t\\t\\n\\t\\ts += \\\"Personal Information:\\\\n\\\";\\n\\t\\ts += String.format(\\\"First Name: %s\\\\n\\\", firstName);\\n\\t\\ts += String.format(\\\"Last Name: %s\\\\n\\\", lastName);\\n\\t\\ts += String.format(\\\"Birth Date: %s\\\\n\\\", getBirthDate());\\n\\t\\ts += String.format(\\\"SSN: %s (%s)\\\\n\\\", SSN, isValidSSN());\\n\\n\\t\\treturn s;\\n\\t}\\n\\n}\\n\",\"language\":\"java\",\"type\":\"\"}}}},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{\"ymexysedvsjolpuc\":{\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"\"],\"t\":1616690007000}},\"language\":\"java\",\"path\":\"file1.java\",\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"class Main\\n{\\n\\tpublic static void main(String[] args)\\n\\t{\\n\\t\\t\\n\\t}\\n}\"],\"t\":1616690007000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16362,
    "title": "090 - Manipulating Elements in a 2D Array",
    "prompt_md": "\nComplete the mystery function so that it completes the following:\n\n\n\nThe mystery function takes in the following parameters:\n\n* a 2D integer array called nums\n* an integer called rows that represents the number of rows in nums\n* an integer called cols that represents the number of columns in nums\n\n\n\nYou should NOT assume that the rows/cols of nums is set.  Use the parameters in your for loop.\n\n\n\nThe mystery method should modify the original array nums by dividing every element by three, rounding down (due to integer division).  It should then count the number of odd elements in nums (after dividing by 3), then return that count.\n\n\n\nYou may complete this using one nested for loop or two - the choice is yours. Meaning, you could write a nested for loop to first divide every element by three and then write a second nested for loop to count up the odd elements...or you can do both steps in one go, using one nested for loop. Again, the choice is yours.\n\n\n\n",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main\\n{\\n\\tpublic static void main(String[] args)\\n\\t{\\n\\t\\tint[][] a = {\\n\\t\\t\\t{14,20,3,2},\\n\\t\\t\\t{4,15,6,1},\\n\\t\\t\\t{12,31,4,16}\\n\\t\\t};\\n\\t\\tSystem.out.println(mystery(a,3,4)); //should print 5\\n\\t\\t//prints array\\n\\t\\tfor(int[] row : a){\\n\\t\\t\\tfor(int e : row){\\n\\t\\t\\t\\tSystem.out.print(e + \\\" \\\");\\n\\t\\t\\t}\\n\\t\\t\\tSystem.out.println();\\n\\t\\t}\\n\\t}\\n\\t\\n    // you should complete the method below\\n\\tpublic static int mystery(int[][] nums, int rows, int cols)\\n\\t{\\n\\t\\t\\n\\t}\\n}\",\"defaultFilePath\":\"\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"unit_test\",\"title\":\"tests\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void tests() {\\n    int[][] a = {\\n        {0,0,0,0,0},\\n    \\t{14,20,3,2,46},\\n    \\t{4,15,6,1,11},\\n    \\t{12,31,4,16,6}\\n    };\\n    assertEquals(7,Main.mystery(a,4,5));\\n    int[][] result = {\\n        {0,0,0,0,0},\\n        {4,6,1,0,15},\\n        {1,5,2,0,3},\\n        {4,10,1,5,2}\\n    };\\n    for(int r=0;r\\u003c4;r++)\\n        for(int c=0;c\\u003c5;c++)\\n            assertEquals(result[r][c],a[r][c]);\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"class Main\\n{\\n\\tpublic static void main(String[] args)\\n\\t{\\n\\t\\tint[][] a = {\\n\\t\\t\\t{14,20,3,2},\\n\\t\\t\\t{4,15,6,1},\\n\\t\\t\\t{12,31,4,16}\\n\\t\\t};\\n\\t\\tSystem.out.println(mystery(a,3,4)); //should print 5\\n\\t\\t//prints array\\n\\t\\tfor(int[] row : a){\\n\\t\\t\\tfor(int e : row){\\n\\t\\t\\t\\tSystem.out.print(e + \\\" \\\");\\n\\t\\t\\t}\\n\\t\\t\\tSystem.out.println();\\n\\t\\t}\\n\\t}\\n\\t\\n\\tpublic static int mystery(int[][] nums, int rows, int cols)\\n\\t{\\n\\t\\t\\n\\t}\\n}\"],\"t\":1614890512000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16363,
    "title": "Lab04_Problem08: Printing Arrays Practice 1",
    "prompt_md": "\nThe code provided in your main method will take in five integers and save them into an array called arr.  Print out the contents of the array, one number per line.\n\n\n\n",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"import java.util.Scanner;\\nclass Main\\n{\\n\\tpublic static void main(String[] args)\\n\\t{\\n\\t\\tScanner input = new Scanner(System.in);\\n\\t\\tint[] arr = new int[5];\\n\\t\\tfor (int i=0;i\\u003c5;i++)\\n\\t\\t{\\n\\t\\t\\tarr[i] = input.nextInt();\\n\\t\\t}\\n\\t\\t//leave above alone!  write your code below\\n\\t\\t\\n\\t\\t\\n\\t}\\n}\",\"defaultFilePath\":\"Main.java\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"stdout\",\"title\":\"test 3\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"0\\n0\\n0\\n0\\n0\",\"stdoutCompareMethod\":\"equals\",\"stdin\":\"0 0 0 0 0\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"test 2\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"8\\n3\\n7\\n2\\n1\",\"stdoutCompareMethod\":\"equals\",\"stdin\":\"8 3 7 2 1\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"test 1\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"1\\n2\\n3\\n4\\n5\",\"stdoutCompareMethod\":\"equals\",\"stdin\":\"1 2 3 4 5\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"import java.util.Scanner;\\nclass Main\\n{\\n\\tpublic static void main(String[] args)\\n\\t{\\n\\t\\tScanner input = new Scanner(System.in);\\n\\t\\tint[] arr = new int[5];\\n\\t\\tfor (int i=0;i\\u003c5;i++)\\n\\t\\t{\\n\\t\\t\\tarr[i] = input.nextInt();\\n\\t\\t}\\n\\t\\t//leave above alone!  write your code below\\n\\t\\t\\n\\t\\t\\n\\t}\\n}\"],\"t\":1614276108000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16364,
    "title": "Lab02_Problem29: Simple Calculator",
    "prompt_md": "## Problem Statement\n\nIn this problem, you are going to be creating a simple calculator that will only operate on positive numbers. Your program has already been set up to take in a single line of input formatted as a String, without spaces. You may assume that the input is guaranteed to be valid. The output should simply be the answer.\n\n**Your result must be printed as an integer.**\n\nYour program should be able to handle the following operators:\n\n*   Addition\n*   Subtraction\n*   Multiplication\n*   Division\n*   Modulo\n\nHINT: You may the .contains() or indexOf() String methods to be helpful.\n\n### Sample Input #1\n\n```plaintext\n53-22\n```\n\n### Sample Output #1\n\n```plaintext\n31\n```\n\n### Sample Input #2\n\n```plaintext\n39%4\n```\n\n### Sample Output #2\n\n```plaintext\n3\n```\n\n### Sample Input #3\n\n```plaintext\n65/2\n```\n\n### Sample Output #3\n\n```plaintext\n32\n```",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"import java.util.Scanner;\\n\\nclass Main {\\n    public static void main(String[] args) {\\n        Scanner in = new Scanner(System.in);\\n\\n        String expression = in.nextLine();\\n        //write your code below:\\n\\n        // HINT:\\n        // 1. Use String methods to check if the String contains a +, -, *, /, or %\\n        // 2. Use appropriate String methods to find the index of the operator identified in Step 1\\n        // 3. Once you know the index of the operator, use the .substring() methods to get the left and right operands\\n        // 4. Use Integer.parseInt() to parse the String operands into their integer equivalent\\n        // 5. Compute the result of the expression.\\n\\n    }\\n}\",\"defaultFilePath\":\"\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"stdout\",\"title\":\"361%5\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"1\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"361%5\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"36/72\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"0\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"36/72\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"666/6\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"111\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"666/6\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"100*35\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"3500\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"100*35\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"94-22\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"72\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"94-22\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"5+3\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"8\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"5+3\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"import java.util.Scanner;\\n\\nclass Main {\\n  public static void main(String[] args) {\\n    Scanner inp = new Scanner(System.in);\\n    System.out.print(\\\"In:\\\");\\n    String exp = inp.nextLine();\\n    //write your code below:\\n    \\n    \\n  }\\n}\"],\"t\":1612923325000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16365,
    "title": "Lab05_Problem01: Summing Elements in a 2D Array",
    "prompt_md": "\nComplete the sum2D method by writing an accumulator algorithm that will calculate the sum of all the element in the 2D array passed as a parameter.\n\n\n\nYou know how to do an accumulator algorithm with a 1-D array.  Now it's \"loop through all the elements of the 2-D array\" instead of \"loop through all the elements of the 1-D array\".  In fact, we did this in class! But try to do it without looking at your code from class or the slides.\n\n\n\n",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main\\n{\\n\\tpublic static void main(String[] args)\\n\\t{\\n\\t\\tint[][] a = {\\n\\t\\t\\t{1,2,3},\\n\\t\\t\\t{4,5,6},\\n\\t\\t\\t{1,3,5}\\n\\t\\t};\\n\\t\\tSystem.out.println(sum2D(a)); //should print 30\\n\\t}\\n\\t\\n    // you need to complete the method given below\\n\\tpublic static int sum2D(int[][] nums)\\n\\t{\\n\\t\\t\\n\\t}\\n}\",\"defaultFilePath\":\"\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"unit_test\",\"title\":\"tests\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void tests() {\\n    int[][] a = {\\n    \\t{1,2,3},\\n    \\t{4,5,6},\\n    \\t{1,3,5}\\n    };\\n    assertEquals(30,Main.sum2D(a));\\n    int[][] b = {\\n    \\t{-2,-1,1},\\n    \\t{-2,2,2},\\n    \\t{123,123,123}\\n    };\\n    assertEquals(369,Main.sum2D(b));\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"class Main\\n{\\n\\tpublic static void main(String[] args)\\n\\t{\\n\\t\\tint[][] a = {\\n\\t\\t\\t{1,2,3},\\n\\t\\t\\t{4,5,6},\\n\\t\\t\\t{1,3,5}\\n\\t\\t};\\n\\t\\tSystem.out.println(sum2D(a)); //should print 30\\n\\t}\\n\\t\\n\\tpublic static int sum2D(int[][] nums)\\n\\t{\\n\\t\\t\\n\\t}\\n}\"],\"t\":1614890337000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16366,
    "title": "Lab04_Problem04: Sum Elements",
    "prompt_md": "\nComplete the sumElements method so that it will add up all the elements in an integer array (passed to the method as a parameter) and return the sum.\n\n\n\n",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main\\n{\\n\\tpublic static void main(String[] args)\\n\\t{\\n\\t\\tint[] a = {1,2,3,4,5};\\n\\t\\tSystem.out.println(sumElements(a)); //should print 15\\n\\t}\\n\\tpublic static int sumElements(int[] array)\\n\\t{\\n\\t\\t\\n\\t}\\n}\",\"defaultFilePath\":\"Main.java\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"unit_test\",\"title\":\"tests\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void tests() {\\n    int[] a = {1,2,3,4,5};\\n    int[] b = {3,4,5};\\n    assertEquals(15,Main.sumElements(a));\\n    assertEquals(12,Main.sumElements(b));\\n    \\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"class Main\\n{\\n\\tpublic static void main(String[] args)\\n\\t{\\n\\t\\tint[] a = {1,2,3,4,5};\\n\\t\\tSystem.out.println(sumElements(a)); //should print 15\\n\\t}\\n\\tpublic static int sumElements(int[] array)\\n\\t{\\n\\t\\t\\n\\t}\\n}\"],\"t\":1614275004000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16367,
    "title": "Lab05_Problem09: 2D Array Practice 7",
    "prompt_md": "\nComplete the sumColumn method so that given a 2-D int array and an integer representing the column to sum, sum up the all elements in that column in the given array.\n\n\n\n",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main\\n{\\n\\tpublic static void main(String[] args)\\n\\t{\\n\\t\\tint[][] a = {\\n\\t\\t\\t{-5,-2,-3,7},\\n\\t\\t\\t{1,-5,-2,2},\\n\\t\\t\\t{1,-2,3,-4}\\n\\t\\t};\\n\\t\\tSystem.out.println(sumColumn(a,1)); //should print -9\\n\\t\\tSystem.out.println(sumColumn(a,3)); //should print 5\\n\\t}\\n\\n    // you should complete the method below\\n\\tpublic static int sumColumn(int[][] array, int column)\\n\\t{\\n\\t\\t\\n\\t}\\n}\",\"defaultFilePath\":\"\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"unit_test\",\"title\":\"tests\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void tests() {\\n    int[][] a = {\\n        {-5,-2,-3,7},\\n        {1,-5,-2,2},\\n        {1,-2,3,-4}\\n    };\\n    assertEquals(-2,Main.sumColumn(a,2));\\n    int[][] b = {\\n        {1,2,3,4,4,7,1,6,3,7,10},\\n        {7,2,3,4,5,2,-3,-6,4,7,11}\\n    };\\n    assertEquals(0,Main.sumColumn(b,7));\\n    int[][] c = {\\n        {-1,-2},\\n        {-3,-4}\\n    };\\n    assertEquals(-4,Main.sumColumn(c,0));\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"class Main\\n{\\n\\tpublic static void main(String[] args)\\n\\t{\\n\\t\\tint[][] a = {\\n\\t\\t\\t{-5,-2,-3,7},\\n\\t\\t\\t{1,-5,-2,2},\\n\\t\\t\\t{1,-2,3,-4}\\n\\t\\t};\\n\\t\\tSystem.out.println(sumColumn(a,1)); //should print -9\\n\\t\\tSystem.out.println(sumColumn(a,3)); //should print 5\\n\\t}\\n\\tpublic static int sumColumn(int[][] array, int column)\\n\\t{\\n\\t\\t\\n\\t}\\n}\"],\"t\":1611320480000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 18937,
    "title": "Lab01_Problem21: Equal Numbers",
    "prompt_md": "## Statement\n\nGiven three integers. Determine how many of them are equal to each other. The program must print one of the numbers: 3 (if all are same), 2 (if two of them are equal to each other and the third one is different) or 0 (if all numbers are different).\n\n## Example input\n\n```plaintext\n10\n5\n10\n```\n\n Example output\n\n```plaintext\n2\n```",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"public class Main {\\n\\n    public static void main(String[] args) {\\n        // Prints \\\"Hello, World\\\" to the terminal window.\\n        System.out.println(\\\"Hello, World\\\");\\n    }\\n\\n}\\n\",\"defaultFilePath\":\"\",\"extraFiles\":null}},\"grading\":{\"testCases\":[{\"type\":\"stdout\",\"title\":\"tc1\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"2\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"10\\r\\n5\\r\\n10\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc2\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"2\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"17\\r\\n17\\r\\n-9\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc3\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"2\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"4\\r\\n-82\\r\\n-82\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc4\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"0\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"5\\r\\n2\\r\\n4\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc5\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"0\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"-149\\r\\n-146\\r\\n-142\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc6\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"3\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"777\\r\\n777\\r\\n777\",\"sourceFile\":\"\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"public class Main {\\n\\n    public static void main(String[] args) {\\n        // Prints \\\"Hello, World\\\" to the terminal window.\\n        System.out.println(\\\"Hello, World\\\");\\n    }\\n\\n}\\n\"],\"t\":1612456702000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 18939,
    "title": "Lab01_Problem06: Separating Digits",
    "prompt_md": "## Statement\n\nGiven a two-digit integer, print its left digit (a tens digit) and then its right digit (a ones digit). Use the operator of integer division for obtaining the tens digit and the operator of taking remainder (mod) for obtaining the ones digit.\n\n## Example input\n\n```plaintext\n79\n```\n\n## Example output\n\n```plaintext\n7 9\n```",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"public class Main {\\n\\n    public static void main(String[] args) {\\n        // Prints \\\"Hello, World\\\" to the terminal window.\\n        System.out.println(\\\"Hello, World\\\");\\n    }\\n\\n}\\n\",\"defaultFilePath\":\"\",\"extraFiles\":null}},\"grading\":{\"testCases\":[{\"type\":\"stdout\",\"title\":\"tc1\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"7 9\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"79\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc2\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"4 0\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"40\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc3\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"1 1\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"11\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc4\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"2 2\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"22\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc5\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"9 3\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"93\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc6\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"4 7\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"47\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc7\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"7 7\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"77\",\"sourceFile\":\"\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"public class Main {\\n\\n    public static void main(String[] args) {\\n        // Prints \\\"Hello, World\\\" to the terminal window.\\n        System.out.println(\\\"Hello, World\\\");\\n    }\\n\\n}\\n\"],\"t\":1612457448000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 18940,
    "title": "Lab01_Problem07: Swapping Digits",
    "prompt_md": "## Statement\n\nGiven a two-digit integer, swap its digits and print the result.\n\n## Example input\n\n```plaintext\n79\n```\n\n## Example output\n\n```plaintext\n97\n```",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"public class Main {\\n\\n    public static void main(String[] args) {\\n        \\n    }\\n\\n}\\n\",\"defaultFilePath\":\"\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"stdout\",\"title\":\"tc1\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"97\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"79\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc2\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"12\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"21\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc3\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"44\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"44\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc4\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"09\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"90\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc5\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"85\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"58\",\"sourceFile\":\"\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"public class Main {\\n\\n    public static void main(String[] args) {\\n        // Prints \\\"Hello, World\\\" to the terminal window.\\n        System.out.println(\\\"Hello, World\\\");\\n    }\\n\\n}\\n\"],\"t\":1612457652000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 18941,
    "title": "Lab00_Problem01: Hello World",
    "prompt_md": "Write a program that simply prints “Hello World!” to the output window.\n\nSample Output\n\n```plaintext\nHello World!\n```",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"public class Main {\\n\\n    public static void main(String[] args) {\\n        \\n    }\\n\\n}\\n\",\"defaultFilePath\":\"\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"stdout\",\"title\":\"correct\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"Hello World!\",\"stdoutCompareMethod\":\"equals\",\"stdin\":\"\",\"sourceFile\":\"\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"public class Main {\\n\\n    public static void main(String[] args) {\\n        // Prints \\\"Hello, World\\\" to the terminal window.\\n        System.out.println(\\\"Hello, World\\\");\\n    }\\n\\n}\\n\"],\"t\":1612458158000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 18942,
    "title": "Lab00_Problem01: Welcome Greeting",
    "prompt_md": "### Problem Statement\n\nWrite a program that reads the user's name (which may consist of spaces), and then prints a welcome message.\n\n### Sample Input\n\n```plaintext\nWanda Maximoff\n```\n\n### Sample Output\n\n```plaintext\nNice to meet you, Wanda Maximoff!\n```",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"public class Main {\\n\\n    public static void main(String[] args) {\\n        \\n    }\\n\\n}\\n\",\"defaultFilePath\":\"\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"stdout\",\"title\":\"Wanda Maximoff\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"Nice to meet you, Wanda Maximoff!\",\"stdoutCompareMethod\":\"equals\",\"stdin\":\"Wanda Maximoff\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"Thor\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"Nice to meet you, Thor Odinson!\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"Thor Odinson\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"crob\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"Nice to meet you, Dr. Roberson!\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"Dr. Roberson\",\"sourceFile\":\"\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"public class Main {\\n\\n    public static void main(String[] args) {\\n        // Prints \\\"Hello, World\\\" to the terminal window.\\n        System.out.println(\\\"Hello, World\\\");\\n    }\\n\\n}\\n\"],\"t\":1612458263000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 18943,
    "title": "Lab01_Problem20: Rook Move",
    "prompt_md": "## Statement\n\nChess rook moves horizontally or vertically. Given two different squares of the chessboard, determine whether a rook can go from the first square to the second one in a single move.\n\nThe program receives four numbers from 1 to 8 each specifying the column and the row number, first two - for the first square, and the last two - for the second square. The program should output `YES` if a rook can go from the first square to the second one in a single move or `NO` otherwise.\n\n![](http://i.imgur.com/fBevTRT.png)\n\n## Example input\n\n```plaintext\n4\n4\n5\n5\n```\n\n## Example output\n\n```plaintext\nNO\n```\n\nHint: THINK about the LEGAL move a rook can make from a given position, and THEN think about what must be the same between the original position and the new position…",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"public class Main {\\n\\n    public static void main(String[] args) {\\n        \\n    }\\n\\n}\\n\",\"defaultFilePath\":\"\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"stdout\",\"title\":\"tc1\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"NO\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"4\\r\\n4\\r\\n5\\r\\n5\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc2\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"YES\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"4\\r\\n4\\r\\n5\\r\\n4\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc3\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"NO\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"4\\r\\n4\\r\\n5\\r\\n3\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc4\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"YES\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"4\\r\\n4\\r\\n4\\r\\n5\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc5\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"NO\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"4\\r\\n4\\r\\n3\\r\\n5\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc6\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"YES\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"4\\r\\n4\\r\\n4\\r\\n3\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc7\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"YES\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"4\\r\\n4\\r\\n3\\r\\n4\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc8\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"NO\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"4\\r\\n4\\r\\n3\\r\\n3\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc9\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"YES\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"1\\r\\n1\\r\\n8\\r\\n1\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc10\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"YES\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"1\\r\\n8\\r\\n8\\r\\n8\",\"sourceFile\":\"\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"public class Main {\\n\\n    public static void main(String[] args) {\\n        // Prints \\\"Hello, World\\\" to the terminal window.\\n        System.out.println(\\\"Hello, World\\\");\\n    }\\n\\n}\\n\"],\"t\":1612458787000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 18944,
    "title": "Lab01_Problem22: Order of Outlier",
    "prompt_md": "## Statement\n\nGiven three integers, in which two are equal to each other and the third one is different. Print the order number of this different one --- 1, 2 or 3.\n\n## Example input #1\n\n```plaintext\n10\n5\n10\n```\n\n## Example output #1\n\n```plaintext\n2\n```\n\n\\*This means the 2nd number was the different one.\n\n## Example input #2\n\n```plaintext\n10\n10\n5\n```\n\n## Example output #2\n\n```plaintext\n3\n```\n\n\\*Here, the 3rd number was the different one.",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"public class Main {\\n\\n    public static void main(String[] args) {\\n        \\n    }\\n\\n}\\n\",\"defaultFilePath\":\"\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"stdout\",\"title\":\"tc1\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"2\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"10\\r\\n5\\r\\n10\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc2\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"3\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"10\\r\\n10\\r\\n5\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc3\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"1\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"5\\r\\n10\\r\\n10\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc4\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"1\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"3\\r\\n7\\r\\n7\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc5\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"2\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"6\\r\\n19\\r\\n6\",\"sourceFile\":\"\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"public class Main {\\n\\n    public static void main(String[] args) {\\n        // Prints \\\"Hello, World\\\" to the terminal window.\\n        System.out.println(\\\"Hello, World\\\");\\n    }\\n\\n}\\n\"],\"t\":1612459685000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 18945,
    "title": "Lab01_Problem23: Chessboard - Same Color",
    "prompt_md": "## Statement\n\nGiven two squares of a chessboard. If they are painted in the same color, print `YES`, otherwise print `NO`.\n\nThe program receives four integers from 1 to 8, each specifying the column and row number, first two - for the first square, and then the last two - for the second square.\n\n![](http://i.imgur.com/iLmObtC.png)\n\n## Example input\n\n```plaintext\n1\n1\n2\n6\n```\n\n## Example output\n\n```plaintext\nYES\n```",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"public class Main {\\n\\n    public static void main(String[] args) {\\n        \\n    }\\n\\n}\\n\",\"defaultFilePath\":\"\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"stdout\",\"title\":\"tc1\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"YES\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"1\\r\\n1\\r\\n2\\r\\n6\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc2\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"NO\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"2\\r\\n2\\r\\n2\\r\\n5\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc3\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"YES\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"2\\r\\n2\\r\\n2\\r\\n4\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc4\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"YES\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"2\\r\\n3\\r\\n3\\r\\n2\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc5\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"YES\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"2\\r\\n3\\r\\n7\\r\\n8\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc6\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"NO\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"2\\r\\n3\\r\\n8\\r\\n8\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc7\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"YES\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"5\\r\\n7\\r\\n5\\r\\n7\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc8\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"YES\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"2\\r\\n3\\r\\n4\\r\\n5\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc9\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"YES\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"7\\r\\n2\\r\\n2\\r\\n3\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc10\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"YES\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"1\\r\\n6\\r\\n7\\r\\n2\",\"sourceFile\":\"\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"public class Main {\\n\\n    public static void main(String[] args) {\\n        // Prints \\\"Hello, World\\\" to the terminal window.\\n        System.out.println(\\\"Hello, World\\\");\\n    }\\n\\n}\\n\"],\"t\":1612460035000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 18946,
    "title": "Lab01_Problem24: King Move",
    "prompt_md": "## Statement\n\nChess king moves one square in any direction. Given two different squares of the chessboard, determine whether a king can go from the first square to the second one in a single move.\n\nThe program receives four numbers from 1 to 8 each specifying the column and the row number, first two - for the first square, and the last two - for the second square. The program should output YES if a king can go from the first square to the second one in a single move or NO otherwise.\n\n![](http://i.imgur.com/2wNxWMG.png)\n\n## Example input\n\n```plaintext\n4\n4\n5\n5\n```\n\n## Example output\n\n```plaintext\nYES\n```",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"public class Main {\\n\\n    public static void main(String[] args) {\\n        \\n    }\\n\\n}\\n\",\"defaultFilePath\":\"\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"stdout\",\"title\":\"tc1\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"YES\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"4\\r\\n4\\r\\n5\\r\\n5\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc2\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"YES\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"4\\r\\n4\\r\\n5\\r\\n4\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc3\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"YES\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"4\\r\\n4\\r\\n5\\r\\n3\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc4\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"YES\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"4\\r\\n4\\r\\n4\\r\\n5\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc5\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"YES\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"4\\r\\n4\\r\\n3\\r\\n5\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc6\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"YES\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"4\\r\\n4\\r\\n4\\r\\n3\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc7\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"YES\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"4\\r\\n4\\r\\n3\\r\\n4\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc8\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"YES\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"4\\r\\n4\\r\\n3\\r\\n3\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc9\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"NO\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"1\\r\\n1\\r\\n1\\r\\n8\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc10\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"NO\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"1\\r\\n1\\r\\n8\\r\\n8\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc11\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"NO\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"1\\r\\n1\\r\\n8\\r\\n1\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc12\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"NO\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"1\\r\\n8\\r\\n8\\r\\n8\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc13\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"NO\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"1\\r\\n8\\r\\n8\\r\\n1\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc14\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"NO\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"1\\r\\n8\\r\\n1\\r\\n1\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc15\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"NO\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"8\\r\\n8\\r\\n8\\r\\n1\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc16\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"YES\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"1\\r\\n1\\r\\n1\\r\\n2\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc17\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"YES\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"1\\r\\n1\\r\\n2\\r\\n2\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc18\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"YES\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"1\\r\\n1\\r\\n2\\r\\n1\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc19\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"NO\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"4\\r\\n4\\r\\n6\\r\\n6\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc20\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"YES\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"1\\r\\n7\\r\\n1\\r\\n8\",\"sourceFile\":\"\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"public class Main {\\n\\n    public static void main(String[] args) {\\n        // Prints \\\"Hello, World\\\" to the terminal window.\\n        System.out.println(\\\"Hello, World\\\");\\n    }\\n\\n}\\n\"],\"t\":1612460808000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 18948,
    "title": "Lab01_Problem25: Bishop Move",
    "prompt_md": "## Statement\n\nChess bishop moves diagonally in any number of squares. Given two different squares of the chessboard, determine whether a bishop can go from the first square to the second one in a single move.\n\nThe program receives four numbers from 1 to 8 each specifying the column and the row number, first two - for the first square, and the last two - for the second square. The program should output YES if a bishop can go from the first square to the second one in a single move or NO otherwise.\n\n![](http://i.imgur.com/45QwBkN.png)\n\n## Example input\n\n```plaintext\n4\n4\n5\n5\n```\n\n## Example output\n\n```plaintext\nYES\n```",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"public class Main {\\n\\n    public static void main(String[] args) {\\n        \\n    }\\n\\n}\\n\",\"defaultFilePath\":\"\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"stdout\",\"title\":\"tc1\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"YES\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"4\\r\\n4\\r\\n5\\r\\n5\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc2\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"NO\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"4\\r\\n4\\r\\n5\\r\\n4\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc3\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"YES\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"4\\r\\n4\\r\\n5\\r\\n3\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc4\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"NO\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"4\\r\\n4\\r\\n4\\r\\n5\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc5\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"YES\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"4\\r\\n4\\r\\n3\\r\\n5\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc6\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"NO\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"4\\r\\n4\\r\\n4\\r\\n3\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc7\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"NO\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"4\\r\\n4\\r\\n3\\r\\n4\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc8\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"YES\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"4\\r\\n4\\r\\n3\\r\\n3\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc9\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"NO\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"1\\r\\n1\\r\\n1\\r\\n8\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc10\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"YES\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"1\\r\\n1\\r\\n8\\r\\n8\",\"sourceFile\":\"\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"public class Main {\\n\\n    public static void main(String[] args) {\\n        // Prints \\\"Hello, World\\\" to the terminal window.\\n        System.out.println(\\\"Hello, World\\\");\\n    }\\n\\n}\\n\"],\"t\":1612462022000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 18949,
    "title": "Lab01_Problem26: Knight Move",
    "prompt_md": "## Statement\n\nChess knight can move to a square that is two squares away horizontally and one square vertically, or two squares vertically and one square horizontally. The complete move therefore looks like the letter _L_. Given two different squares of the chessboard, determine whether a knight can go from the first square to the second one in a single move.\n\nThe program receives four numbers from 1 to 8 each specifying the column and the row number, first two - for the first square, and the last two - for the second square. The program should output YES if a knight can go from the first square to the second one in a single move or NO otherwise.\n\n![](http://i.imgur.com/lzDMi1m.png)\n\n## Example input\n\n```plaintext\n2\n4\n3\n2\n```\n\n## Example output\n\n```plaintext\nYES\n```",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"public class Main {\\n\\n    public static void main(String[] args) {\\n        \\n    }\\n\\n}\\n\",\"defaultFilePath\":\"\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"stdout\",\"title\":\"tc1\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"YES\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"2\\r\\n4\\r\\n3\\r\\n2\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc2\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"NO\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"1\\r\\n1\\r\\n1\\r\\n4\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc3\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"NO\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"1\\r\\n1\\r\\n8\\r\\n8\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc4\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"YES\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"5\\r\\n2\\r\\n4\\r\\n4\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc5\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"NO\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"2\\r\\n8\\r\\n3\\r\\n7\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc6\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"NO\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"2\\r\\n8\\r\\n3\\r\\n5\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc7\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"NO\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"5\\r\\n5\\r\\n3\\r\\n7\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc8\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"NO\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"2\\r\\n4\\r\\n2\\r\\n5\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc9\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"YES\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"4\\r\\n7\\r\\n6\\r\\n6\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc10\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"YES\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"4\\r\\n5\\r\\n2\\r\\n4\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc11\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"NO\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"2\\r\\n3\\r\\n3\\r\\n2\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc12\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"YES\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"5\\r\\n1\\r\\n4\\r\\n3\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc13\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"YES\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"6\\r\\n2\\r\\n8\\r\\n3\",\"sourceFile\":\"\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"public class Main {\\n\\n    public static void main(String[] args) {\\n        // Prints \\\"Hello, World\\\" to the terminal window.\\n        System.out.println(\\\"Hello, World\\\");\\n    }\\n\\n}\\n\"],\"t\":1612464955000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 19771,
    "title": "Lab02_Problem17: Sum of Sequence",
    "prompt_md": "### Problem Statement\n\nGiven a sequence of non-negative integers, where each number is written in a separate line. The sequence ends with 0. Print the sum of the sequence.\n\n### Sample Input\n\n```plaintext\n1\n7\n9\n0\n```\n\n### Sample Output\n\n```plaintext\n17\n```",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"public class Main {\\n\\n    public static void main(String[] args) {\\n        \\n    }\\n\\n}\\n\",\"defaultFilePath\":\"\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"stdout\",\"title\":\"tc1\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"9\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n1\\r\\n0\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc2\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"11341\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"34\\r\\n2345\\r\\n2345\\r\\n2345\\r\\n2345\\r\\n345\\r\\n3\\r\\n345\\r\\n3\\r\\n345\\r\\n1\\r\\n3\\r\\n424\\r\\n5\\r\\n453\\r\\n0\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc3\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"7883\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"7883\\r\\n0\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc4\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"0\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"0\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc5\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"10\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"1\\r\\n2\\r\\n3\\r\\n4\\r\\n0\",\"sourceFile\":\"\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"public class Main {\\n\\n    public static void main(String[] args) {\\n        // Prints \\\"Hello, World\\\" to the terminal window.\\n        System.out.println(\\\"Hello, World\\\");\\n    }\\n\\n}\\n\"],\"t\":1613072908000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 19773,
    "title": "Lab02_Problem18: Average of Sequence",
    "prompt_md": "### Problem Statement\n\nGiven a sequence of non-negative integers, where each number is written in a separate line. The sequence ends with 0. Print the average of the sequence.\n\n\\*\\*\\*Do not use formatted printing to print your output.\n\n### Sample Input\n\n```plaintext\n10\n30\n0\n```\n\n### Sample Output\n\n```plaintext\n20.0\n```",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"public class Main {\\n\\n    public static void main(String[] args) {\\n        \\n    }\\n\\n}\\n\",\"defaultFilePath\":\"\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"stdout\",\"title\":\"tc1\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"1.0\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"1\\r\\n1\\r\\n1\\r\\n1\\r\\n0\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc2\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"1.5\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"1\\r\\n2\\r\\n0\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc3\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"1234.0\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"1234\\r\\n0\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc4\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"0.0\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"1\\r\\n2\\r\\n3\\r\\n-6\\r\\n0\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc5\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"4.0\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"1\\r\\n2\\r\\n3\\r\\n4\\r\\n5\\r\\n6\\r\\n7\\r\\n0\",\"sourceFile\":\"\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"public class Main {\\n\\n    public static void main(String[] args) {\\n        // Prints \\\"Hello, World\\\" to the terminal window.\\n        System.out.println(\\\"Hello, World\\\");\\n    }\\n\\n}\\n\"],\"t\":1613074799000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 19775,
    "title": "Lab02_Problem19: Maximum of Sequence",
    "prompt_md": "### Problem Statement\n\nGiven a sequence of non-negative integers, where each number is written in a separate line. The sequence ends with 0. Print the maximum of the sequence.\n\n### Sample Input\n\n```plaintext\n1\n2\n3\n2\n1\n0\n```\n\n### Sample Output\n\n```plaintext\n3\n```",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"public class Main {\\n\\n    public static void main(String[] args) {\\n        \\n    }\\n\\n}\\n\",\"defaultFilePath\":\"\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"stdout\",\"title\":\"tc1\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"9\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"1\\r\\n7\\r\\n9\\r\\n0\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc2\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"3\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"1\\r\\n2\\r\\n3\\r\\n0\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc3\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"3\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"1\\r\\n3\\r\\n2\\r\\n0\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc4\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"3\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"2\\r\\n1\\r\\n3\\r\\n0\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc5\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"5\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"1\\r\\n2\\r\\n3\\r\\n4\\r\\n5\\r\\n0\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc6\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"90\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"28\\r\\n31\\r\\n90\\r\\n78\\r\\n54\\r\\n10\\r\\n0\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc7\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"99\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"80\\r\\n94\\r\\n78\\r\\n67\\r\\n24\\r\\n4\\r\\n22\\r\\n73\\r\\n26\\r\\n38\\r\\n7\\r\\n90\\r\\n37\\r\\n56\\r\\n95\\r\\n37\\r\\n96\\r\\n77\\r\\n51\\r\\n43\\r\\n25\\r\\n91\\r\\n71\\r\\n89\\r\\n99\\r\\n95\\r\\n29\\r\\n87\\r\\n64\\r\\n10\\r\\n0\",\"sourceFile\":\"\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"public class Main {\\n\\n    public static void main(String[] args) {\\n        // Prints \\\"Hello, World\\\" to the terminal window.\\n        System.out.println(\\\"Hello, World\\\");\\n    }\\n\\n}\\n\"],\"t\":1613075248000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 19776,
    "title": "Lab02_Problem20: Index of Maximum",
    "prompt_md": "### Problem Statement\n\nGiven a sequence of non-negative integers, where each number is written in a separate line. The sequence ends with 0. Print the position of the first maximum of the sequence.\n\n### Sample Input\n\n```plaintext\n1\n7\n9\n5\n9\n0\n```\n\n### Sample Output\n\n```plaintext\n3\n```\n\n\\*\\*\\*Explanation of output: the largest number in the input is 9. In fact, there were two nines. The first nine came at position 3 (the third number) and the second nine came at position 5 (the fifth number). Thus, the output is 3, the FIRST location of the maximum number.",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"public class Main {\\n\\n    public static void main(String[] args) {\\n        \\n    }\\n\\n}\\n\",\"defaultFilePath\":\"\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"stdout\",\"title\":\"tc1\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"2\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"1\\r\\n3\\r\\n2\\r\\n0\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc2\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"3\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"2\\r\\n1\\r\\n3\\r\\n0\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc3\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"1\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"3\\r\\n2\\r\\n1\\r\\n3\\r\\n0\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc4\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"5\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"7\\r\\n8\\r\\n9\\r\\n10\\r\\n11\\r\\n7\\r\\n8\\r\\n9\\r\\n10\\r\\n11\\r\\n0\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc5\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"25\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"80\\r\\n94\\r\\n78\\r\\n67\\r\\n24\\r\\n4\\r\\n22\\r\\n73\\r\\n26\\r\\n38\\r\\n7\\r\\n90\\r\\n37\\r\\n56\\r\\n95\\r\\n37\\r\\n96\\r\\n77\\r\\n51\\r\\n43\\r\\n25\\r\\n91\\r\\n71\\r\\n89\\r\\n99\\r\\n95\\r\\n29\\r\\n87\\r\\n64\\r\\n10\\r\\n0\",\"sourceFile\":\"\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"public class Main {\\n\\n    public static void main(String[] args) {\\n        // Prints \\\"Hello, World\\\" to the terminal window.\\n        System.out.println(\\\"Hello, World\\\");\\n    }\\n\\n}\\n\"],\"t\":1613075445000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 19777,
    "title": "Lab02_Problem21: Number of Even Elements",
    "prompt_md": "### Problem Statement\n\nGiven a sequence of non-negative integers, where each number is written in a separate line. The sequence ends with 0. Print the number of even elements of the sequence.\n\n### Sample Input\n\n```plaintext\n2\n1\n4\n0\n```\n\n### Sample Output\n\n```plaintext\n2\n```",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"public class Main {\\n\\n    public static void main(String[] args) {\\n        \\n    }\\n\\n}\\n\",\"defaultFilePath\":\"\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"stdout\",\"title\":\"tc1\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"0\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"1\\r\\n3\\r\\n5\\r\\n7\\r\\n9\\r\\n1\\r\\n3\\r\\n5\\r\\n7\\r\\n9\\r\\n0\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc2\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"2\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"2\\r\\n4\\r\\n0\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc3\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"0\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"7883\\r\\n0\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc4\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"0\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"0\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc5\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"3\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"1\\r\\n2\\r\\n3\\r\\n4\\r\\n5\\r\\n6\\r\\n7\\r\\n0\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc6\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"14\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"5\\r\\n3\\r\\n6\\r\\n7\\r\\n4\\r\\n2\\r\\n4\\r\\n5\\r\\n6\\r\\n7\\r\\n4\\r\\n3\\r\\n4\\r\\n6\\r\\n7\\r\\n4\\r\\n5\\r\\n7\\r\\n8\\r\\n4\\r\\n4\\r\\n3\\r\\n6\\r\\n3\\r\\n7\\r\\n5\\r\\n5\\r\\n4\\r\\n3\\r\\n5\\r\\n0\",\"sourceFile\":\"\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"public class Main {\\n\\n    public static void main(String[] args) {\\n        // Prints \\\"Hello, World\\\" to the terminal window.\\n        System.out.println(\\\"Hello, World\\\");\\n    }\\n\\n}\\n\"],\"t\":1613076913000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 19778,
    "title": "Lab02_Problem22: List of Squares",
    "prompt_md": "### Problem Statement\n\nFor a given integer N, print all the squares of positive integers where the square is less than or equal to N, in ascending order.\n\n### Sample Input\n\n```plaintext\n50\n```\n\n### Sample Output\n\n```plaintext\n1 4 9 16 25 36 49\n```",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"public class Main {\\n\\n    public static void main(String[] args) {\\n        \\n    }\\n\\n}\\n\",\"defaultFilePath\":\"\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"stdout\",\"title\":\"tc1\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"1 4 9\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"10\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc2\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"1 4 9\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"9\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc3\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"1 4\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"8\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc4\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"1 4\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"4\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc5\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"1\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"1\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc6\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"1 4 9 16 25 36 49 64 81 100\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"100\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc7\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"1 4 9 16 25 36 49 64 81\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"99\",\"sourceFile\":\"\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"public class Main {\\n\\n    public static void main(String[] args) {\\n        // Prints \\\"Hello, World\\\" to the terminal window.\\n        System.out.println(\\\"Hello, World\\\");\\n    }\\n\\n}\\n\"],\"t\":1613077223000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 19779,
    "title": "Lab02_Problem23: Jogging",
    "prompt_md": "### Problem Statement\n\nAs a future athlete, you just started your practice for an upcoming event. On the first day, you run _**x**_ miles, and by the day of the event, you must be able to run _**y**_ miles.\n\nCalculate the number of days required for you to finally reach the required distance for the event if you increase your distance each day by 10% from the previous day.\n\nThe input will consist of two values, x and y, each appearing on their own line. The output is a single integer representing the number of days to reach the required distance.\n\n### Sample Input\n\n```plaintext\n10\n30\n```\n\n### Sample Output\n\n```plaintext\n13\n```",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"public class Main {\\n\\n    public static void main(String[] args) {\\n        \\n    }\\n\\n}\\n\",\"defaultFilePath\":\"\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"stdout\",\"title\":\"tc1\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"9\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"10\\r\\n20\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc2\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"26\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"10\\r\\n100\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc3\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"1\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"10\\r\\n10\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc4\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"2\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"100\\r\\n101\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc5\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"1\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"100\\r\\n99\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc6\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"74\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"1\\r\\n1000\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc7\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"2\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"10\\r\\n11\",\"sourceFile\":\"\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"public class Main {\\n\\n    public static void main(String[] args) {\\n        // Prints \\\"Hello, World\\\" to the terminal window.\\n        System.out.println(\\\"Hello, World\\\");\\n    }\\n\\n}\\n\"],\"t\":1613077448000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 20047,
    "title": "Lab03_Problem01: Problem from Class",
    "prompt_md": "### Problem Statement\n\nWe did this program in class as our group introduction to Methods in Java. Once your code is working, you should submit it here to make sure it works correctly.\n\n_**NOTE**_: the average should print with two decimal places by using formatted printing in Java (printf).\n\n### Sample Execution of Program # 1\n\n```plaintext\n*************************************\n*****         MAIN MENU         *****\n*************************************\n1. Sum of 3 Numbers\n2. Avg of 3 Numbers\n3. Exit\nEnter your choice (1, 2, or 3): hello\n\nInvalid choice (must be 1, 2, or 3). Try again.\n\n*************************************\n*****         MAIN MENU         *****\n*************************************\n1. Sum of 3 Numbers\n2. Avg of 3 Numbers\n3. Exit\nEnter your choice (1, 2, or 3): two\n\nInvalid choice (must be 1, 2, or 3). Try again.\n\n*************************************\n*****         MAIN MENU         *****\n*************************************\n1. Sum of 3 Numbers\n2. Avg of 3 Numbers\n3. Exit\nEnter your choice (1, 2, or 3): 3\n\nGoodbye!\n```\n\n### Sample Execution of Program # 2\n\n```plaintext\n*************************************\n*****         MAIN MENU         *****\n*************************************\n1. Sum of 3 Numbers\n2. Avg of 3 Numbers\n3. Exit\nEnter your choice (1, 2, or 3): 1\n\nEnter the 1st number: 2\nEnter the 2nd number: 10\nEnter the 3rd number: 5\nThe sum of those three numbers is 17\n```\n\n### Sample Execution of Program # 3\n\n```plaintext\n*************************************\n*****         MAIN MENU         *****\n*************************************\n1. Sum of 3 Numbers\n2. Avg of 3 Numbers\n3. Exit\nEnter your choice (1, 2, or 3): 2\n\nEnter the 1st number: 10\nEnter the 2nd number: 6\nEnter the 3rd number: 13\nThe average of those three numbers is 9.67\n```",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"// ONCE your code is working fully in Repl.it, you can just FULLY COPY IT and then PASTE IT BELOW...\\n\\n// NOTE:\\n// The name of the class should be \\\"Main\\\"...as in \\\"class Main {\\\"\\n\\n\",\"defaultFilePath\":\"\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"stdout\",\"title\":\"tc1\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"*************************************\\r\\n*****         MAIN MENU         *****\\r\\n*************************************\\r\\n1. Sum of 3 Numbers\\r\\n2. Avg of 3 Numbers\\r\\n3. Exit\\r\\nEnter your choice (1, 2, or 3): \\r\\n\\r\\nInvalid choice (must be 1, 2, or 3). Try again.\\r\\n\\r\\n*************************************\\r\\n*****         MAIN MENU         *****\\r\\n*************************************\\r\\n1. Sum of 3 Numbers\\r\\n2. Avg of 3 Numbers\\r\\n3. Exit\\r\\nEnter your choice (1, 2, or 3): \\r\\n\\r\\nInvalid choice (must be 1, 2, or 3). Try again.\\r\\n\\r\\n*************************************\\r\\n*****         MAIN MENU         *****\\r\\n*************************************\\r\\n1. Sum of 3 Numbers\\r\\n2. Avg of 3 Numbers\\r\\n3. Exit\\r\\nEnter your choice (1, 2, or 3): \\r\\n\\r\\nInvalid choice (must be 1, 2, or 3). Try again.\\r\\n\\r\\n*************************************\\r\\n*****         MAIN MENU         *****\\r\\n*************************************\\r\\n1. Sum of 3 Numbers\\r\\n2. Avg of 3 Numbers\\r\\n3. Exit\\r\\nEnter your choice (1, 2, or 3): \\r\\n\\r\\nInvalid choice (must be 1, 2, or 3). Try again.\\r\\n\\r\\n*************************************\\r\\n*****         MAIN MENU         *****\\r\\n*************************************\\r\\n1. Sum of 3 Numbers\\r\\n2. Avg of 3 Numbers\\r\\n3. Exit\\r\\nEnter your choice (1, 2, or 3): \\r\\n\\r\\nInvalid choice (must be 1, 2, or 3). Try again.\\r\\n\\r\\n*************************************\\r\\n*****         MAIN MENU         *****\\r\\n*************************************\\r\\n1. Sum of 3 Numbers\\r\\n2. Avg of 3 Numbers\\r\\n3. Exit\\r\\nEnter your choice (1, 2, or 3): \\r\\n\\r\\nInvalid choice (must be 1, 2, or 3). Try again.\\r\\n\\r\\n*************************************\\r\\n*****         MAIN MENU         *****\\r\\n*************************************\\r\\n1. Sum of 3 Numbers\\r\\n2. Avg of 3 Numbers\\r\\n3. Exit\\r\\nEnter your choice (1, 2, or 3): \\r\\n\\r\\nGoodbye!\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"hello\\r\\nhi\\r\\nfive\\r\\nthree\\r\\ntwo\\r\\none\\r\\n3\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc2\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"*************************************\\r\\n*****         MAIN MENU         *****\\r\\n*************************************\\r\\n1. Sum of 3 Numbers\\r\\n2. Avg of 3 Numbers\\r\\n3. Exit\\r\\nEnter your choice (1, 2, or 3): \\r\\n\\r\\nEnter the 1st number: \\r\\nEnter the 2nd number: \\r\\nEnter the 3rd number: \\r\\nThe sum of those three numbers is 6\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"1\\r\\n1\\r\\n2\\r\\n3\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc3\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"*************************************\\r\\n*****         MAIN MENU         *****\\r\\n*************************************\\r\\n1. Sum of 3 Numbers\\r\\n2. Avg of 3 Numbers\\r\\n3. Exit\\r\\nEnter your choice (1, 2, or 3): \\r\\n\\r\\nEnter the 1st number: \\r\\nEnter the 2nd number: \\r\\nEnter the 3rd number: \\r\\nThe sum of those three numbers is 374\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"1\\r\\n234\\r\\n98\\r\\n42\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc4\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"*************************************\\r\\n*****         MAIN MENU         *****\\r\\n*************************************\\r\\n1. Sum of 3 Numbers\\r\\n2. Avg of 3 Numbers\\r\\n3. Exit\\r\\nEnter your choice (1, 2, or 3): \\r\\n\\r\\nEnter the 1st number: \\r\\nEnter the 2nd number: \\r\\nEnter the 3rd number: \\r\\nThe sum of those three numbers is 0\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"1\\r\\n0\\r\\n0\\r\\n0\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc5\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"*************************************\\r\\n*****         MAIN MENU         *****\\r\\n*************************************\\r\\n1. Sum of 3 Numbers\\r\\n2. Avg of 3 Numbers\\r\\n3. Exit\\r\\nEnter your choice (1, 2, or 3): \\r\\n\\r\\nEnter the 1st number: \\r\\nEnter the 2nd number: \\r\\nEnter the 3rd number: \\r\\nThe average of those three numbers is 6.00\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"2\\r\\n10\\r\\n3\\r\\n5\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc6\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"*************************************\\r\\n*****         MAIN MENU         *****\\r\\n*************************************\\r\\n1. Sum of 3 Numbers\\r\\n2. Avg of 3 Numbers\\r\\n3. Exit\\r\\nEnter your choice (1, 2, or 3): \\r\\n\\r\\nEnter the 1st number: \\r\\nEnter the 2nd number: \\r\\nEnter the 3rd number: \\r\\nThe average of those three numbers is 54.67\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"2\\r\\n59\\r\\n21\\r\\n84\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc7\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"*************************************\\r\\n*****         MAIN MENU         *****\\r\\n*************************************\\r\\n1. Sum of 3 Numbers\\r\\n2. Avg of 3 Numbers\\r\\n3. Exit\\r\\nEnter your choice (1, 2, or 3): \\r\\n\\r\\nEnter the 1st number: \\r\\nEnter the 2nd number: \\r\\nEnter the 3rd number: \\r\\nThe average of those three numbers is 3.33\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"2\\r\\n3\\r\\n3\\r\\n4\",\"sourceFile\":\"\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"public class Main {\\n\\n    public static void main(String[] args) {\\n        // Prints \\\"Hello, World\\\" to the terminal window.\\n        System.out.println(\\\"Hello, World\\\");\\n    }\\n\\n}\\n\"],\"t\":1613405368000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 21601,
    "title": "Program 1",
    "prompt_md": "### Important comments on your submission of Program 1\n\nYou Must submit your program at two locations:\n\n1.  Most important is that you submit your Program on Canvas.\n2.  You must **also** submit your solution here and pass the test cases.\n\n**Simply copy/paste your code into the submission window…BUT do make sure you ERASE the “package” and change the class name to Main.**\n\n\\*\\*\\*There are 21 test cases. So be patient when you click submit…it may take a minute to show the results of your submission.",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"// ******* IMPORTANT: READ THE 3 POITNS BELOW *******\\n// 1. PASTE your solution below...just copy/paste from NetBeans\\n// 2. Do DELETE the package line (package fsc_chickfila;)\\n// 3. Do make sure your class name is Main, as in...\\n\\nclass Main {\\n\\n\\n\\n}\\n\\n\\n\\n\",\"defaultFilePath\":\"\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"stdout\",\"title\":\"Nutrition - normal\",\"headline\":\"\",\"points\":15,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"----------------------------------------------------------\\r\\n|             FSC Chick-fil-A Ordering System            |\\r\\n----------------------------------------------------------\\r\\n| Please choose from the following menu:                 |\\r\\n|     1. Place a food order.                             |\\r\\n|     2. Nutritional Information.                        |\\r\\n|     3. Exit the Ordering System.                       |\\r\\n----------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n------------------Nutritional Information-----------------\\r\\nPlease choose from the following:\\r\\n    Enter \\\"Breakfast\\\" to view breakfast nutritional info.\\r\\n    Enter \\\"Lunch\\\" to view lunch nutritional info.\\r\\n    Enter \\\"Dinner\\\" to view dinner nutritional info.\\r\\n    Or, enter \\\"Return\\\" to return to previous menu.\\r\\nEnter your choice: \\r\\n\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n+-------------------\\u003e Breakfast Menu \\u003c-------------------+\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n+                                                        +\\r\\n+    1. Chick-fil-A Chicken Biscuit                      +\\r\\n+    |  Calories|        Fat|      Carbs|    Protein|    +\\r\\n+    |       440|        20g|        48g|        16g|    +\\r\\n+    ------------------------------------------------    +\\r\\n+                                                        +\\r\\n+    2. Chicken, Egg \\u0026 Cheese Bagel                      +\\r\\n+    |  Calories|        Fat|      Carbs|    Protein|    +\\r\\n+    |       460|        18g|        49g|        26g|    +\\r\\n+    ------------------------------------------------    +\\r\\n+                                                        +\\r\\n+    3. Hash Brown Scramble Burrito                      +\\r\\n+    |  Calories|        Fat|      Carbs|    Protein|    +\\r\\n+    |       690|        38g|        52g|        35g|    +\\r\\n+    ------------------------------------------------    +\\r\\n+                                                        +\\r\\n+    4. Egg White Grill                                  +\\r\\n+    |  Calories|        Fat|      Carbs|    Protein|    +\\r\\n+    |       300|         7g|        31g|        25g|    +\\r\\n+    ------------------------------------------------    +\\r\\n+                                                        +\\r\\n+    5. Hash Browns                                      +\\r\\n+    |  Calories|        Fat|      Carbs|    Protein|    +\\r\\n+    |       250|        17g|        23g|         3g|    +\\r\\n+    ------------------------------------------------    +\\r\\n+                                                        +\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n\\r\\n------------------Nutritional Information-----------------\\r\\nPlease choose from the following:\\r\\n    Enter \\\"Breakfast\\\" to view breakfast nutritional info.\\r\\n    Enter \\\"Lunch\\\" to view lunch nutritional info.\\r\\n    Enter \\\"Dinner\\\" to view dinner nutritional info.\\r\\n    Or, enter \\\"Return\\\" to return to previous menu.\\r\\nEnter your choice: \\r\\n\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n+-------------------\\u003e   Lunch Menu   \\u003c-------------------+\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n+                                                        +\\r\\n+    1. Chick-fil-A Chicken Sandwich                     +\\r\\n+    |  Calories|        Fat|      Carbs|    Protein|    +\\r\\n+    |       440|        19g|        40g|        28g|    +\\r\\n+    ------------------------------------------------    +\\r\\n+                                                        +\\r\\n+    2. Spicy Chicken Sandwich                           +\\r\\n+    |  Calories|        Fat|      Carbs|    Protein|    +\\r\\n+    |       450|        19g|        41g|        29g|    +\\r\\n+    ------------------------------------------------    +\\r\\n+                                                        +\\r\\n+    3. Grilled Chicken Sandwich                         +\\r\\n+    |  Calories|        Fat|      Carbs|    Protein|    +\\r\\n+    |       310|         6g|        36g|        29g|    +\\r\\n+    ------------------------------------------------    +\\r\\n+                                                        +\\r\\n+    4. Waffle Potato Fries                              +\\r\\n+    |  Calories|        Fat|      Carbs|    Protein|    +\\r\\n+    |       360|        18g|        43g|         5g|    +\\r\\n+    ------------------------------------------------    +\\r\\n+                                                        +\\r\\n+    5. Milkshake                                        +\\r\\n+    |  Calories|        Fat|      Carbs|    Protein|    +\\r\\n+    |       580|        22g|        88g|        12g|    +\\r\\n+    ------------------------------------------------    +\\r\\n+                                                        +\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n\\r\\n------------------Nutritional Information-----------------\\r\\nPlease choose from the following:\\r\\n    Enter \\\"Breakfast\\\" to view breakfast nutritional info.\\r\\n    Enter \\\"Lunch\\\" to view lunch nutritional info.\\r\\n    Enter \\\"Dinner\\\" to view dinner nutritional info.\\r\\n    Or, enter \\\"Return\\\" to return to previous menu.\\r\\nEnter your choice: \\r\\n\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n+-------------------\\u003e  Dinner Menu  \\u003c--------------------+\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n+                                                        +\\r\\n+    1. Chick-fil-A Chicken Sandwich                     +\\r\\n+    |  Calories|        Fat|      Carbs|    Protein|    +\\r\\n+    |       440|        19g|        40g|        28g|    +\\r\\n+    ------------------------------------------------    +\\r\\n+                                                        +\\r\\n+    2. Spicy Chicken Sandwich                           +\\r\\n+    |  Calories|        Fat|      Carbs|    Protein|    +\\r\\n+    |       450|        19g|        41g|        29g|    +\\r\\n+    ------------------------------------------------    +\\r\\n+                                                        +\\r\\n+    3. Grilled Chicken Sandwich                         +\\r\\n+    |  Calories|        Fat|      Carbs|    Protein|    +\\r\\n+    |       310|         6g|        36g|        29g|    +\\r\\n+    ------------------------------------------------    +\\r\\n+                                                        +\\r\\n+    4. Waffle Potato Fries                              +\\r\\n+    |  Calories|        Fat|      Carbs|    Protein|    +\\r\\n+    |       360|        18g|        43g|         5g|    +\\r\\n+    ------------------------------------------------    +\\r\\n+                                                        +\\r\\n+    5. Milkshake                                        +\\r\\n+    |  Calories|        Fat|      Carbs|    Protein|    +\\r\\n+    |       580|        22g|        88g|        12g|    +\\r\\n+    ------------------------------------------------    +\\r\\n+                                                        +\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n\\r\\n------------------Nutritional Information-----------------\\r\\nPlease choose from the following:\\r\\n    Enter \\\"Breakfast\\\" to view breakfast nutritional info.\\r\\n    Enter \\\"Lunch\\\" to view lunch nutritional info.\\r\\n    Enter \\\"Dinner\\\" to view dinner nutritional info.\\r\\n    Or, enter \\\"Return\\\" to return to previous menu.\\r\\nEnter your choice: \\r\\n\\r\\n----------------------------------------------------------\\r\\n|             FSC Chick-fil-A Ordering System            |\\r\\n----------------------------------------------------------\\r\\n| Please choose from the following menu:                 |\\r\\n|     1. Place a food order.                             |\\r\\n|     2. Nutritional Information.                        |\\r\\n|     3. Exit the Ordering System.                       |\\r\\n----------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n-----------------Exit the Ordering System-----------------\\r\\nGoodbye.\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"2\\r\\nBreakfast\\r\\nLunch\\r\\nDinner\\r\\nReturn\\r\\n3\\r\\n\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"Nutrition - weird caps\",\"headline\":\"\",\"points\":2,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"----------------------------------------------------------\\r\\n|             FSC Chick-fil-A Ordering System            |\\r\\n----------------------------------------------------------\\r\\n| Please choose from the following menu:                 |\\r\\n|     1. Place a food order.                             |\\r\\n|     2. Nutritional Information.                        |\\r\\n|     3. Exit the Ordering System.                       |\\r\\n----------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n------------------Nutritional Information-----------------\\r\\nPlease choose from the following:\\r\\n    Enter \\\"Breakfast\\\" to view breakfast nutritional info.\\r\\n    Enter \\\"Lunch\\\" to view lunch nutritional info.\\r\\n    Enter \\\"Dinner\\\" to view dinner nutritional info.\\r\\n    Or, enter \\\"Return\\\" to return to previous menu.\\r\\nEnter your choice: \\r\\n\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n+-------------------\\u003e Breakfast Menu \\u003c-------------------+\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n+                                                        +\\r\\n+    1. Chick-fil-A Chicken Biscuit                      +\\r\\n+    |  Calories|        Fat|      Carbs|    Protein|    +\\r\\n+    |       440|        20g|        48g|        16g|    +\\r\\n+    ------------------------------------------------    +\\r\\n+                                                        +\\r\\n+    2. Chicken, Egg \\u0026 Cheese Bagel                      +\\r\\n+    |  Calories|        Fat|      Carbs|    Protein|    +\\r\\n+    |       460|        18g|        49g|        26g|    +\\r\\n+    ------------------------------------------------    +\\r\\n+                                                        +\\r\\n+    3. Hash Brown Scramble Burrito                      +\\r\\n+    |  Calories|        Fat|      Carbs|    Protein|    +\\r\\n+    |       690|        38g|        52g|        35g|    +\\r\\n+    ------------------------------------------------    +\\r\\n+                                                        +\\r\\n+    4. Egg White Grill                                  +\\r\\n+    |  Calories|        Fat|      Carbs|    Protein|    +\\r\\n+    |       300|         7g|        31g|        25g|    +\\r\\n+    ------------------------------------------------    +\\r\\n+                                                        +\\r\\n+    5. Hash Browns                                      +\\r\\n+    |  Calories|        Fat|      Carbs|    Protein|    +\\r\\n+    |       250|        17g|        23g|         3g|    +\\r\\n+    ------------------------------------------------    +\\r\\n+                                                        +\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n\\r\\n------------------Nutritional Information-----------------\\r\\nPlease choose from the following:\\r\\n    Enter \\\"Breakfast\\\" to view breakfast nutritional info.\\r\\n    Enter \\\"Lunch\\\" to view lunch nutritional info.\\r\\n    Enter \\\"Dinner\\\" to view dinner nutritional info.\\r\\n    Or, enter \\\"Return\\\" to return to previous menu.\\r\\nEnter your choice: \\r\\n\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n+-------------------\\u003e   Lunch Menu   \\u003c-------------------+\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n+                                                        +\\r\\n+    1. Chick-fil-A Chicken Sandwich                     +\\r\\n+    |  Calories|        Fat|      Carbs|    Protein|    +\\r\\n+    |       440|        19g|        40g|        28g|    +\\r\\n+    ------------------------------------------------    +\\r\\n+                                                        +\\r\\n+    2. Spicy Chicken Sandwich                           +\\r\\n+    |  Calories|        Fat|      Carbs|    Protein|    +\\r\\n+    |       450|        19g|        41g|        29g|    +\\r\\n+    ------------------------------------------------    +\\r\\n+                                                        +\\r\\n+    3. Grilled Chicken Sandwich                         +\\r\\n+    |  Calories|        Fat|      Carbs|    Protein|    +\\r\\n+    |       310|         6g|        36g|        29g|    +\\r\\n+    ------------------------------------------------    +\\r\\n+                                                        +\\r\\n+    4. Waffle Potato Fries                              +\\r\\n+    |  Calories|        Fat|      Carbs|    Protein|    +\\r\\n+    |       360|        18g|        43g|         5g|    +\\r\\n+    ------------------------------------------------    +\\r\\n+                                                        +\\r\\n+    5. Milkshake                                        +\\r\\n+    |  Calories|        Fat|      Carbs|    Protein|    +\\r\\n+    |       580|        22g|        88g|        12g|    +\\r\\n+    ------------------------------------------------    +\\r\\n+                                                        +\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n\\r\\n------------------Nutritional Information-----------------\\r\\nPlease choose from the following:\\r\\n    Enter \\\"Breakfast\\\" to view breakfast nutritional info.\\r\\n    Enter \\\"Lunch\\\" to view lunch nutritional info.\\r\\n    Enter \\\"Dinner\\\" to view dinner nutritional info.\\r\\n    Or, enter \\\"Return\\\" to return to previous menu.\\r\\nEnter your choice: \\r\\n\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n+-------------------\\u003e  Dinner Menu  \\u003c--------------------+\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n+                                                        +\\r\\n+    1. Chick-fil-A Chicken Sandwich                     +\\r\\n+    |  Calories|        Fat|      Carbs|    Protein|    +\\r\\n+    |       440|        19g|        40g|        28g|    +\\r\\n+    ------------------------------------------------    +\\r\\n+                                                        +\\r\\n+    2. Spicy Chicken Sandwich                           +\\r\\n+    |  Calories|        Fat|      Carbs|    Protein|    +\\r\\n+    |       450|        19g|        41g|        29g|    +\\r\\n+    ------------------------------------------------    +\\r\\n+                                                        +\\r\\n+    3. Grilled Chicken Sandwich                         +\\r\\n+    |  Calories|        Fat|      Carbs|    Protein|    +\\r\\n+    |       310|         6g|        36g|        29g|    +\\r\\n+    ------------------------------------------------    +\\r\\n+                                                        +\\r\\n+    4. Waffle Potato Fries                              +\\r\\n+    |  Calories|        Fat|      Carbs|    Protein|    +\\r\\n+    |       360|        18g|        43g|         5g|    +\\r\\n+    ------------------------------------------------    +\\r\\n+                                                        +\\r\\n+    5. Milkshake                                        +\\r\\n+    |  Calories|        Fat|      Carbs|    Protein|    +\\r\\n+    |       580|        22g|        88g|        12g|    +\\r\\n+    ------------------------------------------------    +\\r\\n+                                                        +\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n\\r\\n------------------Nutritional Information-----------------\\r\\nPlease choose from the following:\\r\\n    Enter \\\"Breakfast\\\" to view breakfast nutritional info.\\r\\n    Enter \\\"Lunch\\\" to view lunch nutritional info.\\r\\n    Enter \\\"Dinner\\\" to view dinner nutritional info.\\r\\n    Or, enter \\\"Return\\\" to return to previous menu.\\r\\nEnter your choice: \\r\\n\\r\\n----------------------------------------------------------\\r\\n|             FSC Chick-fil-A Ordering System            |\\r\\n----------------------------------------------------------\\r\\n| Please choose from the following menu:                 |\\r\\n|     1. Place a food order.                             |\\r\\n|     2. Nutritional Information.                        |\\r\\n|     3. Exit the Ordering System.                       |\\r\\n----------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n-----------------Exit the Ordering System-----------------\\r\\nGoodbye.\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"2\\r\\nbreakFAST\\r\\nLUNcH\\r\\ndiNNer\\r\\nReTuRn\\r\\n3\\r\\n\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"Nutrition - checking return\",\"headline\":\"\",\"points\":3,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"----------------------------------------------------------\\r\\n|             FSC Chick-fil-A Ordering System            |\\r\\n----------------------------------------------------------\\r\\n| Please choose from the following menu:                 |\\r\\n|     1. Place a food order.                             |\\r\\n|     2. Nutritional Information.                        |\\r\\n|     3. Exit the Ordering System.                       |\\r\\n----------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n------------------Nutritional Information-----------------\\r\\nPlease choose from the following:\\r\\n    Enter \\\"Breakfast\\\" to view breakfast nutritional info.\\r\\n    Enter \\\"Lunch\\\" to view lunch nutritional info.\\r\\n    Enter \\\"Dinner\\\" to view dinner nutritional info.\\r\\n    Or, enter \\\"Return\\\" to return to previous menu.\\r\\nEnter your choice: \\r\\n\\r\\n----------------------------------------------------------\\r\\n|             FSC Chick-fil-A Ordering System            |\\r\\n----------------------------------------------------------\\r\\n| Please choose from the following menu:                 |\\r\\n|     1. Place a food order.                             |\\r\\n|     2. Nutritional Information.                        |\\r\\n|     3. Exit the Ordering System.                       |\\r\\n----------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n------------------Nutritional Information-----------------\\r\\nPlease choose from the following:\\r\\n    Enter \\\"Breakfast\\\" to view breakfast nutritional info.\\r\\n    Enter \\\"Lunch\\\" to view lunch nutritional info.\\r\\n    Enter \\\"Dinner\\\" to view dinner nutritional info.\\r\\n    Or, enter \\\"Return\\\" to return to previous menu.\\r\\nEnter your choice: \\r\\n\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n+-------------------\\u003e Breakfast Menu \\u003c-------------------+\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n+                                                        +\\r\\n+    1. Chick-fil-A Chicken Biscuit                      +\\r\\n+    |  Calories|        Fat|      Carbs|    Protein|    +\\r\\n+    |       440|        20g|        48g|        16g|    +\\r\\n+    ------------------------------------------------    +\\r\\n+                                                        +\\r\\n+    2. Chicken, Egg \\u0026 Cheese Bagel                      +\\r\\n+    |  Calories|        Fat|      Carbs|    Protein|    +\\r\\n+    |       460|        18g|        49g|        26g|    +\\r\\n+    ------------------------------------------------    +\\r\\n+                                                        +\\r\\n+    3. Hash Brown Scramble Burrito                      +\\r\\n+    |  Calories|        Fat|      Carbs|    Protein|    +\\r\\n+    |       690|        38g|        52g|        35g|    +\\r\\n+    ------------------------------------------------    +\\r\\n+                                                        +\\r\\n+    4. Egg White Grill                                  +\\r\\n+    |  Calories|        Fat|      Carbs|    Protein|    +\\r\\n+    |       300|         7g|        31g|        25g|    +\\r\\n+    ------------------------------------------------    +\\r\\n+                                                        +\\r\\n+    5. Hash Browns                                      +\\r\\n+    |  Calories|        Fat|      Carbs|    Protein|    +\\r\\n+    |       250|        17g|        23g|         3g|    +\\r\\n+    ------------------------------------------------    +\\r\\n+                                                        +\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n\\r\\n------------------Nutritional Information-----------------\\r\\nPlease choose from the following:\\r\\n    Enter \\\"Breakfast\\\" to view breakfast nutritional info.\\r\\n    Enter \\\"Lunch\\\" to view lunch nutritional info.\\r\\n    Enter \\\"Dinner\\\" to view dinner nutritional info.\\r\\n    Or, enter \\\"Return\\\" to return to previous menu.\\r\\nEnter your choice: \\r\\n\\r\\n----------------------------------------------------------\\r\\n|             FSC Chick-fil-A Ordering System            |\\r\\n----------------------------------------------------------\\r\\n| Please choose from the following menu:                 |\\r\\n|     1. Place a food order.                             |\\r\\n|     2. Nutritional Information.                        |\\r\\n|     3. Exit the Ordering System.                       |\\r\\n----------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n------------------Nutritional Information-----------------\\r\\nPlease choose from the following:\\r\\n    Enter \\\"Breakfast\\\" to view breakfast nutritional info.\\r\\n    Enter \\\"Lunch\\\" to view lunch nutritional info.\\r\\n    Enter \\\"Dinner\\\" to view dinner nutritional info.\\r\\n    Or, enter \\\"Return\\\" to return to previous menu.\\r\\nEnter your choice: \\r\\n\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n+-------------------\\u003e   Lunch Menu   \\u003c-------------------+\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n+                                                        +\\r\\n+    1. Chick-fil-A Chicken Sandwich                     +\\r\\n+    |  Calories|        Fat|      Carbs|    Protein|    +\\r\\n+    |       440|        19g|        40g|        28g|    +\\r\\n+    ------------------------------------------------    +\\r\\n+                                                        +\\r\\n+    2. Spicy Chicken Sandwich                           +\\r\\n+    |  Calories|        Fat|      Carbs|    Protein|    +\\r\\n+    |       450|        19g|        41g|        29g|    +\\r\\n+    ------------------------------------------------    +\\r\\n+                                                        +\\r\\n+    3. Grilled Chicken Sandwich                         +\\r\\n+    |  Calories|        Fat|      Carbs|    Protein|    +\\r\\n+    |       310|         6g|        36g|        29g|    +\\r\\n+    ------------------------------------------------    +\\r\\n+                                                        +\\r\\n+    4. Waffle Potato Fries                              +\\r\\n+    |  Calories|        Fat|      Carbs|    Protein|    +\\r\\n+    |       360|        18g|        43g|         5g|    +\\r\\n+    ------------------------------------------------    +\\r\\n+                                                        +\\r\\n+    5. Milkshake                                        +\\r\\n+    |  Calories|        Fat|      Carbs|    Protein|    +\\r\\n+    |       580|        22g|        88g|        12g|    +\\r\\n+    ------------------------------------------------    +\\r\\n+                                                        +\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n\\r\\n------------------Nutritional Information-----------------\\r\\nPlease choose from the following:\\r\\n    Enter \\\"Breakfast\\\" to view breakfast nutritional info.\\r\\n    Enter \\\"Lunch\\\" to view lunch nutritional info.\\r\\n    Enter \\\"Dinner\\\" to view dinner nutritional info.\\r\\n    Or, enter \\\"Return\\\" to return to previous menu.\\r\\nEnter your choice: \\r\\n\\r\\n----------------------------------------------------------\\r\\n|             FSC Chick-fil-A Ordering System            |\\r\\n----------------------------------------------------------\\r\\n| Please choose from the following menu:                 |\\r\\n|     1. Place a food order.                             |\\r\\n|     2. Nutritional Information.                        |\\r\\n|     3. Exit the Ordering System.                       |\\r\\n----------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n------------------Nutritional Information-----------------\\r\\nPlease choose from the following:\\r\\n    Enter \\\"Breakfast\\\" to view breakfast nutritional info.\\r\\n    Enter \\\"Lunch\\\" to view lunch nutritional info.\\r\\n    Enter \\\"Dinner\\\" to view dinner nutritional info.\\r\\n    Or, enter \\\"Return\\\" to return to previous menu.\\r\\nEnter your choice: \\r\\n\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n+-------------------\\u003e  Dinner Menu  \\u003c--------------------+\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n+                                                        +\\r\\n+    1. Chick-fil-A Chicken Sandwich                     +\\r\\n+    |  Calories|        Fat|      Carbs|    Protein|    +\\r\\n+    |       440|        19g|        40g|        28g|    +\\r\\n+    ------------------------------------------------    +\\r\\n+                                                        +\\r\\n+    2. Spicy Chicken Sandwich                           +\\r\\n+    |  Calories|        Fat|      Carbs|    Protein|    +\\r\\n+    |       450|        19g|        41g|        29g|    +\\r\\n+    ------------------------------------------------    +\\r\\n+                                                        +\\r\\n+    3. Grilled Chicken Sandwich                         +\\r\\n+    |  Calories|        Fat|      Carbs|    Protein|    +\\r\\n+    |       310|         6g|        36g|        29g|    +\\r\\n+    ------------------------------------------------    +\\r\\n+                                                        +\\r\\n+    4. Waffle Potato Fries                              +\\r\\n+    |  Calories|        Fat|      Carbs|    Protein|    +\\r\\n+    |       360|        18g|        43g|         5g|    +\\r\\n+    ------------------------------------------------    +\\r\\n+                                                        +\\r\\n+    5. Milkshake                                        +\\r\\n+    |  Calories|        Fat|      Carbs|    Protein|    +\\r\\n+    |       580|        22g|        88g|        12g|    +\\r\\n+    ------------------------------------------------    +\\r\\n+                                                        +\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n\\r\\n------------------Nutritional Information-----------------\\r\\nPlease choose from the following:\\r\\n    Enter \\\"Breakfast\\\" to view breakfast nutritional info.\\r\\n    Enter \\\"Lunch\\\" to view lunch nutritional info.\\r\\n    Enter \\\"Dinner\\\" to view dinner nutritional info.\\r\\n    Or, enter \\\"Return\\\" to return to previous menu.\\r\\nEnter your choice: \\r\\n\\r\\n----------------------------------------------------------\\r\\n|             FSC Chick-fil-A Ordering System            |\\r\\n----------------------------------------------------------\\r\\n| Please choose from the following menu:                 |\\r\\n|     1. Place a food order.                             |\\r\\n|     2. Nutritional Information.                        |\\r\\n|     3. Exit the Ordering System.                       |\\r\\n----------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n-----------------Exit the Ordering System-----------------\\r\\nGoodbye.\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"2\\r\\nReturn\\r\\n2\\r\\nBreakfast\\r\\nReturn\\r\\n2\\r\\nLunch\\r\\nReturn\\r\\n2\\r\\nDinner\\r\\nReturn\\r\\n3\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"Order - Breakfast - one of each item\",\"headline\":\"\",\"points\":5,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"----------------------------------------------------------\\r\\n|             FSC Chick-fil-A Ordering System            |\\r\\n----------------------------------------------------------\\r\\n| Please choose from the following menu:                 |\\r\\n|     1. Place a food order.                             |\\r\\n|     2. Nutritional Information.                        |\\r\\n|     3. Exit the Ordering System.                       |\\r\\n----------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n----------------------------------------------------------\\r\\n|                  Placing a Food Order                  |\\r\\n----------------------------------------------------------\\r\\n| Please choose from the following menu:                 |\\r\\n|     Enter \\\"Breakfast\\\" to place a breakfast order       |\\r\\n|     Enter \\\"Lunch\\\" to place a lunch order               |\\r\\n|     Enter \\\"Dinner\\\" to place a dinner order             |\\r\\n|     Or, enter \\\"Return\\\" to return to previous menu      |\\r\\n----------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n--------------------\\u003e Breakfast Menu \\u003c--------------------\\r\\n    1. Chick-fil-A Chicken Biscuit            $3.49\\r\\n    2. Chicken, Egg \\u0026 Cheese Bagel            $3.69\\r\\n    3. Hash Brown Scramble Burrito            $3.79\\r\\n    4. Egg White Grill                        $3.65\\r\\n    5. Hash Browns                            $1.09\\r\\n----------------------------------------------------------\\r\\nEnter your choice (1, 2, 3, 4, or 5): \\r\\n\\r\\nWould you like another item (Y/N): \\r\\n\\r\\n--------------------\\u003e Breakfast Menu \\u003c--------------------\\r\\n    1. Chick-fil-A Chicken Biscuit            $3.49\\r\\n    2. Chicken, Egg \\u0026 Cheese Bagel            $3.69\\r\\n    3. Hash Brown Scramble Burrito            $3.79\\r\\n    4. Egg White Grill                        $3.65\\r\\n    5. Hash Browns                            $1.09\\r\\n----------------------------------------------------------\\r\\nEnter your choice (1, 2, 3, 4, or 5): \\r\\n\\r\\nWould you like another item (Y/N): \\r\\n\\r\\n--------------------\\u003e Breakfast Menu \\u003c--------------------\\r\\n    1. Chick-fil-A Chicken Biscuit            $3.49\\r\\n    2. Chicken, Egg \\u0026 Cheese Bagel            $3.69\\r\\n    3. Hash Brown Scramble Burrito            $3.79\\r\\n    4. Egg White Grill                        $3.65\\r\\n    5. Hash Browns                            $1.09\\r\\n----------------------------------------------------------\\r\\nEnter your choice (1, 2, 3, 4, or 5): \\r\\n\\r\\nWould you like another item (Y/N): \\r\\n\\r\\n--------------------\\u003e Breakfast Menu \\u003c--------------------\\r\\n    1. Chick-fil-A Chicken Biscuit            $3.49\\r\\n    2. Chicken, Egg \\u0026 Cheese Bagel            $3.69\\r\\n    3. Hash Brown Scramble Burrito            $3.79\\r\\n    4. Egg White Grill                        $3.65\\r\\n    5. Hash Browns                            $1.09\\r\\n----------------------------------------------------------\\r\\nEnter your choice (1, 2, 3, 4, or 5): \\r\\n\\r\\nWould you like another item (Y/N): \\r\\n\\r\\n--------------------\\u003e Breakfast Menu \\u003c--------------------\\r\\n    1. Chick-fil-A Chicken Biscuit            $3.49\\r\\n    2. Chicken, Egg \\u0026 Cheese Bagel            $3.69\\r\\n    3. Hash Brown Scramble Burrito            $3.79\\r\\n    4. Egg White Grill                        $3.65\\r\\n    5. Hash Browns                            $1.09\\r\\n----------------------------------------------------------\\r\\nEnter your choice (1, 2, 3, 4, or 5): \\r\\n\\r\\nWould you like another item (Y/N): \\r\\n\\r\\nFlorida Southern College Discount Program:\\r\\n    Enter \\\"s\\\" for Student or \\\"f\\\" for Faculty/Staff.\\r\\nEnter your choice: \\r\\n\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n+              Breakfast: Order Number 1946              +\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n+    1. Chick-fil-A Chicken Biscuit            $ 3.49    +\\r\\n+    2. Chicken, Egg \\u0026 Cheese Bagel            $ 3.69    +\\r\\n+    3. Hash Brown Scramble Burrito            $ 3.79    +\\r\\n+    4. Egg White Grill                        $ 3.65    +\\r\\n+    5. Hash Browns                            $ 1.09    +\\r\\n+    ------------------------------------------------    + \\r\\n+    Subtotal:                                 $15.71    +\\r\\n+    Student Discount:                         $ 6.28    +\\r\\n+    ------------------------------------------------    +\\r\\n+    Total:                                    $ 9.43    +\\r\\n+    ------------------------------------------------    +\\r\\n+                                                        +\\r\\n+         Your order will be ready in 5 minutes.         +\\r\\n+               Thank you for your order!                +\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n\\r\\n----------------------------------------------------------\\r\\n|             FSC Chick-fil-A Ordering System            |\\r\\n----------------------------------------------------------\\r\\n| Please choose from the following menu:                 |\\r\\n|     1. Place a food order.                             |\\r\\n|     2. Nutritional Information.                        |\\r\\n|     3. Exit the Ordering System.                       |\\r\\n----------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n-----------------Exit the Ordering System-----------------\\r\\nGoodbye.\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"1\\r\\nBreakfast\\r\\n1\\r\\ny\\r\\n2\\r\\ny\\r\\n3\\r\\ny\\r\\n4\\r\\ny\\r\\n5\\r\\nn\\r\\ns\\r\\n3\\r\\n\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"Order - Breakfast - 3 biscuits\",\"headline\":\"\",\"points\":5,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"----------------------------------------------------------\\r\\n|             FSC Chick-fil-A Ordering System            |\\r\\n----------------------------------------------------------\\r\\n| Please choose from the following menu:                 |\\r\\n|     1. Place a food order.                             |\\r\\n|     2. Nutritional Information.                        |\\r\\n|     3. Exit the Ordering System.                       |\\r\\n----------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n----------------------------------------------------------\\r\\n|                  Placing a Food Order                  |\\r\\n----------------------------------------------------------\\r\\n| Please choose from the following menu:                 |\\r\\n|     Enter \\\"Breakfast\\\" to place a breakfast order       |\\r\\n|     Enter \\\"Lunch\\\" to place a lunch order               |\\r\\n|     Enter \\\"Dinner\\\" to place a dinner order             |\\r\\n|     Or, enter \\\"Return\\\" to return to previous menu      |\\r\\n----------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n--------------------\\u003e Breakfast Menu \\u003c--------------------\\r\\n    1. Chick-fil-A Chicken Biscuit            $3.49\\r\\n    2. Chicken, Egg \\u0026 Cheese Bagel            $3.69\\r\\n    3. Hash Brown Scramble Burrito            $3.79\\r\\n    4. Egg White Grill                        $3.65\\r\\n    5. Hash Browns                            $1.09\\r\\n----------------------------------------------------------\\r\\nEnter your choice (1, 2, 3, 4, or 5): \\r\\n\\r\\nWould you like another item (Y/N): \\r\\n\\r\\n--------------------\\u003e Breakfast Menu \\u003c--------------------\\r\\n    1. Chick-fil-A Chicken Biscuit            $3.49\\r\\n    2. Chicken, Egg \\u0026 Cheese Bagel            $3.69\\r\\n    3. Hash Brown Scramble Burrito            $3.79\\r\\n    4. Egg White Grill                        $3.65\\r\\n    5. Hash Browns                            $1.09\\r\\n----------------------------------------------------------\\r\\nEnter your choice (1, 2, 3, 4, or 5): \\r\\n\\r\\nWould you like another item (Y/N): \\r\\n\\r\\n--------------------\\u003e Breakfast Menu \\u003c--------------------\\r\\n    1. Chick-fil-A Chicken Biscuit            $3.49\\r\\n    2. Chicken, Egg \\u0026 Cheese Bagel            $3.69\\r\\n    3. Hash Brown Scramble Burrito            $3.79\\r\\n    4. Egg White Grill                        $3.65\\r\\n    5. Hash Browns                            $1.09\\r\\n----------------------------------------------------------\\r\\nEnter your choice (1, 2, 3, 4, or 5): \\r\\n\\r\\nWould you like another item (Y/N): \\r\\n\\r\\nFlorida Southern College Discount Program:\\r\\n    Enter \\\"s\\\" for Student or \\\"f\\\" for Faculty/Staff.\\r\\nEnter your choice: \\r\\n\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n+              Breakfast: Order Number 1946              +\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n+    1. Chick-fil-A Chicken Biscuit            $ 3.49    +\\r\\n+    2. Chick-fil-A Chicken Biscuit            $ 3.49    +\\r\\n+    3. Chick-fil-A Chicken Biscuit            $ 3.49    +\\r\\n+    ------------------------------------------------    + \\r\\n+    Subtotal:                                 $10.47    +\\r\\n+    Faculty/Staff Discount:                   $ 3.14    +\\r\\n+    ------------------------------------------------    +\\r\\n+    Total:                                    $ 7.33    +\\r\\n+    ------------------------------------------------    +\\r\\n+                                                        +\\r\\n+         Your order will be ready in 3 minutes.         +\\r\\n+               Thank you for your order!                +\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n\\r\\n----------------------------------------------------------\\r\\n|             FSC Chick-fil-A Ordering System            |\\r\\n----------------------------------------------------------\\r\\n| Please choose from the following menu:                 |\\r\\n|     1. Place a food order.                             |\\r\\n|     2. Nutritional Information.                        |\\r\\n|     3. Exit the Ordering System.                       |\\r\\n----------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n-----------------Exit the Ordering System-----------------\\r\\nGoodbye.\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"1\\r\\nBreakfast\\r\\n1\\r\\nY\\r\\n1\\r\\nY\\r\\n1\\r\\nN\\r\\nf\\r\\n3\\r\\n\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"Order - Lunch - one of each item\",\"headline\":\"\",\"points\":5,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"----------------------------------------------------------\\r\\n|             FSC Chick-fil-A Ordering System            |\\r\\n----------------------------------------------------------\\r\\n| Please choose from the following menu:                 |\\r\\n|     1. Place a food order.                             |\\r\\n|     2. Nutritional Information.                        |\\r\\n|     3. Exit the Ordering System.                       |\\r\\n----------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n----------------------------------------------------------\\r\\n|                  Placing a Food Order                  |\\r\\n----------------------------------------------------------\\r\\n| Please choose from the following menu:                 |\\r\\n|     Enter \\\"Breakfast\\\" to place a breakfast order       |\\r\\n|     Enter \\\"Lunch\\\" to place a lunch order               |\\r\\n|     Enter \\\"Dinner\\\" to place a dinner order             |\\r\\n|     Or, enter \\\"Return\\\" to return to previous menu      |\\r\\n----------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n--------------------\\u003e   Lunch Menu   \\u003c--------------------\\r\\n    1. Chick-fil-A Chicken Sandwich           $3.49\\r\\n    2. Spicy Chicken Sandwich                 $3.75\\r\\n    3. Grilled Chicken Sandwich               $4.75\\r\\n    4. Waffle Potato Fries                    $1.85\\r\\n    5. Milkshake                              $2.99\\r\\n----------------------------------------------------------\\r\\nEnter your choice (1, 2, 3, 4, or 5): \\r\\n\\r\\nWould you like another item (Y/N): \\r\\n\\r\\n--------------------\\u003e   Lunch Menu   \\u003c--------------------\\r\\n    1. Chick-fil-A Chicken Sandwich           $3.49\\r\\n    2. Spicy Chicken Sandwich                 $3.75\\r\\n    3. Grilled Chicken Sandwich               $4.75\\r\\n    4. Waffle Potato Fries                    $1.85\\r\\n    5. Milkshake                              $2.99\\r\\n----------------------------------------------------------\\r\\nEnter your choice (1, 2, 3, 4, or 5): \\r\\n\\r\\nWould you like another item (Y/N): \\r\\n\\r\\n--------------------\\u003e   Lunch Menu   \\u003c--------------------\\r\\n    1. Chick-fil-A Chicken Sandwich           $3.49\\r\\n    2. Spicy Chicken Sandwich                 $3.75\\r\\n    3. Grilled Chicken Sandwich               $4.75\\r\\n    4. Waffle Potato Fries                    $1.85\\r\\n    5. Milkshake                              $2.99\\r\\n----------------------------------------------------------\\r\\nEnter your choice (1, 2, 3, 4, or 5): \\r\\n\\r\\nWould you like another item (Y/N): \\r\\n\\r\\n--------------------\\u003e   Lunch Menu   \\u003c--------------------\\r\\n    1. Chick-fil-A Chicken Sandwich           $3.49\\r\\n    2. Spicy Chicken Sandwich                 $3.75\\r\\n    3. Grilled Chicken Sandwich               $4.75\\r\\n    4. Waffle Potato Fries                    $1.85\\r\\n    5. Milkshake                              $2.99\\r\\n----------------------------------------------------------\\r\\nEnter your choice (1, 2, 3, 4, or 5): \\r\\n\\r\\nWould you like another item (Y/N): \\r\\n\\r\\n--------------------\\u003e   Lunch Menu   \\u003c--------------------\\r\\n    1. Chick-fil-A Chicken Sandwich           $3.49\\r\\n    2. Spicy Chicken Sandwich                 $3.75\\r\\n    3. Grilled Chicken Sandwich               $4.75\\r\\n    4. Waffle Potato Fries                    $1.85\\r\\n    5. Milkshake                              $2.99\\r\\n----------------------------------------------------------\\r\\nEnter your choice (1, 2, 3, 4, or 5): \\r\\n\\r\\nWould you like another item (Y/N): \\r\\n\\r\\nFlorida Southern College Discount Program:\\r\\n    Enter \\\"s\\\" for Student or \\\"f\\\" for Faculty/Staff.\\r\\nEnter your choice: \\r\\n\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n+                Lunch: Order Number 1946                +\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n+    1. Chick-fil-A Chicken Sandwich           $ 3.49    +\\r\\n+    2. Spicy Chicken Sandwich                 $ 3.75    +\\r\\n+    3. Grilled Chicken Sandwich               $ 4.75    +\\r\\n+    4. Waffle Potato Fries                    $ 1.85    +\\r\\n+    5. Milkshake                              $ 2.99    +\\r\\n+    ------------------------------------------------    + \\r\\n+    Subtotal:                                 $16.83    +\\r\\n+    Faculty/Staff Discount:                   $ 5.05    +\\r\\n+    ------------------------------------------------    +\\r\\n+    Total:                                    $11.78    +\\r\\n+    ------------------------------------------------    +\\r\\n+                                                        +\\r\\n+         Your order will be ready in 5 minutes.         +\\r\\n+               Thank you for your order!                +\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n\\r\\n----------------------------------------------------------\\r\\n|             FSC Chick-fil-A Ordering System            |\\r\\n----------------------------------------------------------\\r\\n| Please choose from the following menu:                 |\\r\\n|     1. Place a food order.                             |\\r\\n|     2. Nutritional Information.                        |\\r\\n|     3. Exit the Ordering System.                       |\\r\\n----------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n-----------------Exit the Ordering System-----------------\\r\\nGoodbye.\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"1\\r\\nLunch\\r\\n1\\r\\nY\\r\\n2\\r\\nY\\r\\n3\\r\\nY\\r\\n4\\r\\nY\\r\\n5\\r\\nN\\r\\nf\\r\\n3\\r\\n\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"Order - Lunch - 3 shakes\",\"headline\":\"\",\"points\":5,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"----------------------------------------------------------\\r\\n|             FSC Chick-fil-A Ordering System            |\\r\\n----------------------------------------------------------\\r\\n| Please choose from the following menu:                 |\\r\\n|     1. Place a food order.                             |\\r\\n|     2. Nutritional Information.                        |\\r\\n|     3. Exit the Ordering System.                       |\\r\\n----------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n----------------------------------------------------------\\r\\n|                  Placing a Food Order                  |\\r\\n----------------------------------------------------------\\r\\n| Please choose from the following menu:                 |\\r\\n|     Enter \\\"Breakfast\\\" to place a breakfast order       |\\r\\n|     Enter \\\"Lunch\\\" to place a lunch order               |\\r\\n|     Enter \\\"Dinner\\\" to place a dinner order             |\\r\\n|     Or, enter \\\"Return\\\" to return to previous menu      |\\r\\n----------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n--------------------\\u003e   Lunch Menu   \\u003c--------------------\\r\\n    1. Chick-fil-A Chicken Sandwich           $3.49\\r\\n    2. Spicy Chicken Sandwich                 $3.75\\r\\n    3. Grilled Chicken Sandwich               $4.75\\r\\n    4. Waffle Potato Fries                    $1.85\\r\\n    5. Milkshake                              $2.99\\r\\n----------------------------------------------------------\\r\\nEnter your choice (1, 2, 3, 4, or 5): \\r\\n\\r\\nWould you like another item (Y/N): \\r\\n\\r\\n--------------------\\u003e   Lunch Menu   \\u003c--------------------\\r\\n    1. Chick-fil-A Chicken Sandwich           $3.49\\r\\n    2. Spicy Chicken Sandwich                 $3.75\\r\\n    3. Grilled Chicken Sandwich               $4.75\\r\\n    4. Waffle Potato Fries                    $1.85\\r\\n    5. Milkshake                              $2.99\\r\\n----------------------------------------------------------\\r\\nEnter your choice (1, 2, 3, 4, or 5): \\r\\n\\r\\nWould you like another item (Y/N): \\r\\n\\r\\n--------------------\\u003e   Lunch Menu   \\u003c--------------------\\r\\n    1. Chick-fil-A Chicken Sandwich           $3.49\\r\\n    2. Spicy Chicken Sandwich                 $3.75\\r\\n    3. Grilled Chicken Sandwich               $4.75\\r\\n    4. Waffle Potato Fries                    $1.85\\r\\n    5. Milkshake                              $2.99\\r\\n----------------------------------------------------------\\r\\nEnter your choice (1, 2, 3, 4, or 5): \\r\\n\\r\\nWould you like another item (Y/N): \\r\\n\\r\\nFlorida Southern College Discount Program:\\r\\n    Enter \\\"s\\\" for Student or \\\"f\\\" for Faculty/Staff.\\r\\nEnter your choice: \\r\\n\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n+                Lunch: Order Number 1946                +\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n+    1. Milkshake                              $ 2.99    +\\r\\n+    2. Milkshake                              $ 2.99    +\\r\\n+    3. Milkshake                              $ 2.99    +\\r\\n+    ------------------------------------------------    + \\r\\n+    Subtotal:                                 $ 8.97    +\\r\\n+    Student Discount:                         $ 3.59    +\\r\\n+    ------------------------------------------------    +\\r\\n+    Total:                                    $ 5.38    +\\r\\n+    ------------------------------------------------    +\\r\\n+                                                        +\\r\\n+         Your order will be ready in 3 minutes.         +\\r\\n+               Thank you for your order!                +\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n\\r\\n----------------------------------------------------------\\r\\n|             FSC Chick-fil-A Ordering System            |\\r\\n----------------------------------------------------------\\r\\n| Please choose from the following menu:                 |\\r\\n|     1. Place a food order.                             |\\r\\n|     2. Nutritional Information.                        |\\r\\n|     3. Exit the Ordering System.                       |\\r\\n----------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n-----------------Exit the Ordering System-----------------\\r\\nGoodbye.\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"1\\r\\nLunch\\r\\n5\\r\\nY\\r\\n5\\r\\nY\\r\\n5\\r\\nN\\r\\ns\\r\\n3\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"Order - Dinner - one of each item\",\"headline\":\"\",\"points\":5,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"----------------------------------------------------------\\r\\n|             FSC Chick-fil-A Ordering System            |\\r\\n----------------------------------------------------------\\r\\n| Please choose from the following menu:                 |\\r\\n|     1. Place a food order.                             |\\r\\n|     2. Nutritional Information.                        |\\r\\n|     3. Exit the Ordering System.                       |\\r\\n----------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n----------------------------------------------------------\\r\\n|                  Placing a Food Order                  |\\r\\n----------------------------------------------------------\\r\\n| Please choose from the following menu:                 |\\r\\n|     Enter \\\"Breakfast\\\" to place a breakfast order       |\\r\\n|     Enter \\\"Lunch\\\" to place a lunch order               |\\r\\n|     Enter \\\"Dinner\\\" to place a dinner order             |\\r\\n|     Or, enter \\\"Return\\\" to return to previous menu      |\\r\\n----------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n--------------------\\u003e  Dinner Menu  \\u003c---------------------\\r\\n    1. Chick-fil-A Chicken Sandwich           $3.49\\r\\n    2. Spicy Chicken Sandwich                 $3.75\\r\\n    3. Grilled Chicken Sandwich               $4.75\\r\\n    4. Waffle Potato Fries                    $1.85\\r\\n    5. Milkshake                              $2.99\\r\\n----------------------------------------------------------\\r\\nEnter your choice (1, 2, 3, 4, or 5): \\r\\n\\r\\nWould you like another item (Y/N): \\r\\n\\r\\n--------------------\\u003e  Dinner Menu  \\u003c---------------------\\r\\n    1. Chick-fil-A Chicken Sandwich           $3.49\\r\\n    2. Spicy Chicken Sandwich                 $3.75\\r\\n    3. Grilled Chicken Sandwich               $4.75\\r\\n    4. Waffle Potato Fries                    $1.85\\r\\n    5. Milkshake                              $2.99\\r\\n----------------------------------------------------------\\r\\nEnter your choice (1, 2, 3, 4, or 5): \\r\\n\\r\\nWould you like another item (Y/N): \\r\\n\\r\\n--------------------\\u003e  Dinner Menu  \\u003c---------------------\\r\\n    1. Chick-fil-A Chicken Sandwich           $3.49\\r\\n    2. Spicy Chicken Sandwich                 $3.75\\r\\n    3. Grilled Chicken Sandwich               $4.75\\r\\n    4. Waffle Potato Fries                    $1.85\\r\\n    5. Milkshake                              $2.99\\r\\n----------------------------------------------------------\\r\\nEnter your choice (1, 2, 3, 4, or 5): \\r\\n\\r\\nWould you like another item (Y/N): \\r\\n\\r\\n--------------------\\u003e  Dinner Menu  \\u003c---------------------\\r\\n    1. Chick-fil-A Chicken Sandwich           $3.49\\r\\n    2. Spicy Chicken Sandwich                 $3.75\\r\\n    3. Grilled Chicken Sandwich               $4.75\\r\\n    4. Waffle Potato Fries                    $1.85\\r\\n    5. Milkshake                              $2.99\\r\\n----------------------------------------------------------\\r\\nEnter your choice (1, 2, 3, 4, or 5): \\r\\n\\r\\nWould you like another item (Y/N): \\r\\n\\r\\n--------------------\\u003e  Dinner Menu  \\u003c---------------------\\r\\n    1. Chick-fil-A Chicken Sandwich           $3.49\\r\\n    2. Spicy Chicken Sandwich                 $3.75\\r\\n    3. Grilled Chicken Sandwich               $4.75\\r\\n    4. Waffle Potato Fries                    $1.85\\r\\n    5. Milkshake                              $2.99\\r\\n----------------------------------------------------------\\r\\nEnter your choice (1, 2, 3, 4, or 5): \\r\\n\\r\\nWould you like another item (Y/N): \\r\\n\\r\\nFlorida Southern College Discount Program:\\r\\n    Enter \\\"s\\\" for Student or \\\"f\\\" for Faculty/Staff.\\r\\nEnter your choice: \\r\\n\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n+               Dinner: Order Number 1946                +\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n+    1. Chick-fil-A Chicken Sandwich           $ 3.49    +\\r\\n+    2. Spicy Chicken Sandwich                 $ 3.75    +\\r\\n+    3. Grilled Chicken Sandwich               $ 4.75    +\\r\\n+    4. Waffle Potato Fries                    $ 1.85    +\\r\\n+    5. Milkshake                              $ 2.99    +\\r\\n+    ------------------------------------------------    + \\r\\n+    Subtotal:                                 $16.83    +\\r\\n+    Student Discount:                         $ 6.73    +\\r\\n+    ------------------------------------------------    +\\r\\n+    Total:                                    $10.10    +\\r\\n+    ------------------------------------------------    +\\r\\n+                                                        +\\r\\n+         Your order will be ready in 5 minutes.         +\\r\\n+               Thank you for your order!                +\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n\\r\\n----------------------------------------------------------\\r\\n|             FSC Chick-fil-A Ordering System            |\\r\\n----------------------------------------------------------\\r\\n| Please choose from the following menu:                 |\\r\\n|     1. Place a food order.                             |\\r\\n|     2. Nutritional Information.                        |\\r\\n|     3. Exit the Ordering System.                       |\\r\\n----------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n-----------------Exit the Ordering System-----------------\\r\\nGoodbye.\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"1\\r\\nDinner\\r\\n1\\r\\nY\\r\\n2\\r\\nY\\r\\n3\\r\\nY\\r\\n4\\r\\nY\\r\\n5\\r\\nN\\r\\ns\\r\\n3\\r\\n\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"Order - Dinner - 3 spicy chickens\",\"headline\":\"\",\"points\":5,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"----------------------------------------------------------\\r\\n|             FSC Chick-fil-A Ordering System            |\\r\\n----------------------------------------------------------\\r\\n| Please choose from the following menu:                 |\\r\\n|     1. Place a food order.                             |\\r\\n|     2. Nutritional Information.                        |\\r\\n|     3. Exit the Ordering System.                       |\\r\\n----------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n----------------------------------------------------------\\r\\n|                  Placing a Food Order                  |\\r\\n----------------------------------------------------------\\r\\n| Please choose from the following menu:                 |\\r\\n|     Enter \\\"Breakfast\\\" to place a breakfast order       |\\r\\n|     Enter \\\"Lunch\\\" to place a lunch order               |\\r\\n|     Enter \\\"Dinner\\\" to place a dinner order             |\\r\\n|     Or, enter \\\"Return\\\" to return to previous menu      |\\r\\n----------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n--------------------\\u003e  Dinner Menu  \\u003c---------------------\\r\\n    1. Chick-fil-A Chicken Sandwich           $3.49\\r\\n    2. Spicy Chicken Sandwich                 $3.75\\r\\n    3. Grilled Chicken Sandwich               $4.75\\r\\n    4. Waffle Potato Fries                    $1.85\\r\\n    5. Milkshake                              $2.99\\r\\n----------------------------------------------------------\\r\\nEnter your choice (1, 2, 3, 4, or 5): \\r\\n\\r\\nWould you like another item (Y/N): \\r\\n\\r\\n--------------------\\u003e  Dinner Menu  \\u003c---------------------\\r\\n    1. Chick-fil-A Chicken Sandwich           $3.49\\r\\n    2. Spicy Chicken Sandwich                 $3.75\\r\\n    3. Grilled Chicken Sandwich               $4.75\\r\\n    4. Waffle Potato Fries                    $1.85\\r\\n    5. Milkshake                              $2.99\\r\\n----------------------------------------------------------\\r\\nEnter your choice (1, 2, 3, 4, or 5): \\r\\n\\r\\nWould you like another item (Y/N): \\r\\n\\r\\n--------------------\\u003e  Dinner Menu  \\u003c---------------------\\r\\n    1. Chick-fil-A Chicken Sandwich           $3.49\\r\\n    2. Spicy Chicken Sandwich                 $3.75\\r\\n    3. Grilled Chicken Sandwich               $4.75\\r\\n    4. Waffle Potato Fries                    $1.85\\r\\n    5. Milkshake                              $2.99\\r\\n----------------------------------------------------------\\r\\nEnter your choice (1, 2, 3, 4, or 5): \\r\\n\\r\\nWould you like another item (Y/N): \\r\\n\\r\\nFlorida Southern College Discount Program:\\r\\n    Enter \\\"s\\\" for Student or \\\"f\\\" for Faculty/Staff.\\r\\nEnter your choice: \\r\\n\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n+               Dinner: Order Number 1946                +\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n+    1. Spicy Chicken Sandwich                 $ 3.75    +\\r\\n+    2. Spicy Chicken Sandwich                 $ 3.75    +\\r\\n+    3. Spicy Chicken Sandwich                 $ 3.75    +\\r\\n+    ------------------------------------------------    + \\r\\n+    Subtotal:                                 $11.25    +\\r\\n+    Student Discount:                         $ 4.50    +\\r\\n+    ------------------------------------------------    +\\r\\n+    Total:                                    $ 6.75    +\\r\\n+    ------------------------------------------------    +\\r\\n+                                                        +\\r\\n+         Your order will be ready in 3 minutes.         +\\r\\n+               Thank you for your order!                +\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n\\r\\n----------------------------------------------------------\\r\\n|             FSC Chick-fil-A Ordering System            |\\r\\n----------------------------------------------------------\\r\\n| Please choose from the following menu:                 |\\r\\n|     1. Place a food order.                             |\\r\\n|     2. Nutritional Information.                        |\\r\\n|     3. Exit the Ordering System.                       |\\r\\n----------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n-----------------Exit the Ordering System-----------------\\r\\nGoodbye.\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"1\\r\\nDinner\\r\\n2\\r\\nY\\r\\n2\\r\\nY\\r\\n2\\r\\nN\\r\\ns\\r\\n3\\r\\n\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"Order - Multiple Breakfast Orders\",\"headline\":\"\",\"points\":5,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"----------------------------------------------------------\\r\\n|             FSC Chick-fil-A Ordering System            |\\r\\n----------------------------------------------------------\\r\\n| Please choose from the following menu:                 |\\r\\n|     1. Place a food order.                             |\\r\\n|     2. Nutritional Information.                        |\\r\\n|     3. Exit the Ordering System.                       |\\r\\n----------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n----------------------------------------------------------\\r\\n|                  Placing a Food Order                  |\\r\\n----------------------------------------------------------\\r\\n| Please choose from the following menu:                 |\\r\\n|     Enter \\\"Breakfast\\\" to place a breakfast order       |\\r\\n|     Enter \\\"Lunch\\\" to place a lunch order               |\\r\\n|     Enter \\\"Dinner\\\" to place a dinner order             |\\r\\n|     Or, enter \\\"Return\\\" to return to previous menu      |\\r\\n----------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n--------------------\\u003e Breakfast Menu \\u003c--------------------\\r\\n    1. Chick-fil-A Chicken Biscuit            $3.49\\r\\n    2. Chicken, Egg \\u0026 Cheese Bagel            $3.69\\r\\n    3. Hash Brown Scramble Burrito            $3.79\\r\\n    4. Egg White Grill                        $3.65\\r\\n    5. Hash Browns                            $1.09\\r\\n----------------------------------------------------------\\r\\nEnter your choice (1, 2, 3, 4, or 5): \\r\\n\\r\\nWould you like another item (Y/N): \\r\\n\\r\\n--------------------\\u003e Breakfast Menu \\u003c--------------------\\r\\n    1. Chick-fil-A Chicken Biscuit            $3.49\\r\\n    2. Chicken, Egg \\u0026 Cheese Bagel            $3.69\\r\\n    3. Hash Brown Scramble Burrito            $3.79\\r\\n    4. Egg White Grill                        $3.65\\r\\n    5. Hash Browns                            $1.09\\r\\n----------------------------------------------------------\\r\\nEnter your choice (1, 2, 3, 4, or 5): \\r\\n\\r\\nWould you like another item (Y/N): \\r\\n\\r\\nFlorida Southern College Discount Program:\\r\\n    Enter \\\"s\\\" for Student or \\\"f\\\" for Faculty/Staff.\\r\\nEnter your choice: \\r\\n\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n+              Breakfast: Order Number 1946              +\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n+    1. Chick-fil-A Chicken Biscuit            $ 3.49    +\\r\\n+    2. Hash Browns                            $ 1.09    +\\r\\n+    ------------------------------------------------    + \\r\\n+    Subtotal:                                 $ 4.58    +\\r\\n+    Faculty/Staff Discount:                   $ 1.37    +\\r\\n+    ------------------------------------------------    +\\r\\n+    Total:                                    $ 3.21    +\\r\\n+    ------------------------------------------------    +\\r\\n+                                                        +\\r\\n+         Your order will be ready in 2 minutes.         +\\r\\n+               Thank you for your order!                +\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n\\r\\n----------------------------------------------------------\\r\\n|             FSC Chick-fil-A Ordering System            |\\r\\n----------------------------------------------------------\\r\\n| Please choose from the following menu:                 |\\r\\n|     1. Place a food order.                             |\\r\\n|     2. Nutritional Information.                        |\\r\\n|     3. Exit the Ordering System.                       |\\r\\n----------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n----------------------------------------------------------\\r\\n|                  Placing a Food Order                  |\\r\\n----------------------------------------------------------\\r\\n| Please choose from the following menu:                 |\\r\\n|     Enter \\\"Breakfast\\\" to place a breakfast order       |\\r\\n|     Enter \\\"Lunch\\\" to place a lunch order               |\\r\\n|     Enter \\\"Dinner\\\" to place a dinner order             |\\r\\n|     Or, enter \\\"Return\\\" to return to previous menu      |\\r\\n----------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n--------------------\\u003e Breakfast Menu \\u003c--------------------\\r\\n    1. Chick-fil-A Chicken Biscuit            $3.49\\r\\n    2. Chicken, Egg \\u0026 Cheese Bagel            $3.69\\r\\n    3. Hash Brown Scramble Burrito            $3.79\\r\\n    4. Egg White Grill                        $3.65\\r\\n    5. Hash Browns                            $1.09\\r\\n----------------------------------------------------------\\r\\nEnter your choice (1, 2, 3, 4, or 5): \\r\\n\\r\\nWould you like another item (Y/N): \\r\\n\\r\\n--------------------\\u003e Breakfast Menu \\u003c--------------------\\r\\n    1. Chick-fil-A Chicken Biscuit            $3.49\\r\\n    2. Chicken, Egg \\u0026 Cheese Bagel            $3.69\\r\\n    3. Hash Brown Scramble Burrito            $3.79\\r\\n    4. Egg White Grill                        $3.65\\r\\n    5. Hash Browns                            $1.09\\r\\n----------------------------------------------------------\\r\\nEnter your choice (1, 2, 3, 4, or 5): \\r\\n\\r\\nWould you like another item (Y/N): \\r\\n\\r\\nFlorida Southern College Discount Program:\\r\\n    Enter \\\"s\\\" for Student or \\\"f\\\" for Faculty/Staff.\\r\\nEnter your choice: \\r\\n\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n+              Breakfast: Order Number 1947              +\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n+    1. Chicken, Egg \\u0026 Cheese Bagel            $ 3.69    +\\r\\n+    2. Hash Browns                            $ 1.09    +\\r\\n+    ------------------------------------------------    + \\r\\n+    Subtotal:                                 $ 4.78    +\\r\\n+    Student Discount:                         $ 1.91    +\\r\\n+    ------------------------------------------------    +\\r\\n+    Total:                                    $ 2.87    +\\r\\n+    ------------------------------------------------    +\\r\\n+                                                        +\\r\\n+         Your order will be ready in 2 minutes.         +\\r\\n+               Thank you for your order!                +\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n\\r\\n----------------------------------------------------------\\r\\n|             FSC Chick-fil-A Ordering System            |\\r\\n----------------------------------------------------------\\r\\n| Please choose from the following menu:                 |\\r\\n|     1. Place a food order.                             |\\r\\n|     2. Nutritional Information.                        |\\r\\n|     3. Exit the Ordering System.                       |\\r\\n----------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n----------------------------------------------------------\\r\\n|                  Placing a Food Order                  |\\r\\n----------------------------------------------------------\\r\\n| Please choose from the following menu:                 |\\r\\n|     Enter \\\"Breakfast\\\" to place a breakfast order       |\\r\\n|     Enter \\\"Lunch\\\" to place a lunch order               |\\r\\n|     Enter \\\"Dinner\\\" to place a dinner order             |\\r\\n|     Or, enter \\\"Return\\\" to return to previous menu      |\\r\\n----------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n--------------------\\u003e Breakfast Menu \\u003c--------------------\\r\\n    1. Chick-fil-A Chicken Biscuit            $3.49\\r\\n    2. Chicken, Egg \\u0026 Cheese Bagel            $3.69\\r\\n    3. Hash Brown Scramble Burrito            $3.79\\r\\n    4. Egg White Grill                        $3.65\\r\\n    5. Hash Browns                            $1.09\\r\\n----------------------------------------------------------\\r\\nEnter your choice (1, 2, 3, 4, or 5): \\r\\n\\r\\nWould you like another item (Y/N): \\r\\n\\r\\n--------------------\\u003e Breakfast Menu \\u003c--------------------\\r\\n    1. Chick-fil-A Chicken Biscuit            $3.49\\r\\n    2. Chicken, Egg \\u0026 Cheese Bagel            $3.69\\r\\n    3. Hash Brown Scramble Burrito            $3.79\\r\\n    4. Egg White Grill                        $3.65\\r\\n    5. Hash Browns                            $1.09\\r\\n----------------------------------------------------------\\r\\nEnter your choice (1, 2, 3, 4, or 5): \\r\\n\\r\\nWould you like another item (Y/N): \\r\\n\\r\\nFlorida Southern College Discount Program:\\r\\n    Enter \\\"s\\\" for Student or \\\"f\\\" for Faculty/Staff.\\r\\nEnter your choice: \\r\\n\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n+              Breakfast: Order Number 1948              +\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n+    1. Egg White Grill                        $ 3.65    +\\r\\n+    2. Hash Browns                            $ 1.09    +\\r\\n+    ------------------------------------------------    + \\r\\n+    Subtotal:                                 $ 4.74    +\\r\\n+    Faculty/Staff Discount:                   $ 1.42    +\\r\\n+    ------------------------------------------------    +\\r\\n+    Total:                                    $ 3.32    +\\r\\n+    ------------------------------------------------    +\\r\\n+                                                        +\\r\\n+         Your order will be ready in 2 minutes.         +\\r\\n+               Thank you for your order!                +\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n\\r\\n----------------------------------------------------------\\r\\n|             FSC Chick-fil-A Ordering System            |\\r\\n----------------------------------------------------------\\r\\n| Please choose from the following menu:                 |\\r\\n|     1. Place a food order.                             |\\r\\n|     2. Nutritional Information.                        |\\r\\n|     3. Exit the Ordering System.                       |\\r\\n----------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n-----------------Exit the Ordering System-----------------\\r\\nGoodbye.\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"1\\r\\nBreakfast\\r\\n1\\r\\nY\\r\\n5\\r\\nN\\r\\nf\\r\\n1\\r\\nBreakfast\\r\\n2\\r\\nY\\r\\n5\\r\\nN\\r\\ns\\r\\n1\\r\\nBreakfast\\r\\n4\\r\\nY\\r\\n5\\r\\nN\\r\\nf\\r\\n3\\r\\n\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"Order - Multiple Lunch Orders\",\"headline\":\"\",\"points\":5,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"----------------------------------------------------------\\r\\n|             FSC Chick-fil-A Ordering System            |\\r\\n----------------------------------------------------------\\r\\n| Please choose from the following menu:                 |\\r\\n|     1. Place a food order.                             |\\r\\n|     2. Nutritional Information.                        |\\r\\n|     3. Exit the Ordering System.                       |\\r\\n----------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n----------------------------------------------------------\\r\\n|                  Placing a Food Order                  |\\r\\n----------------------------------------------------------\\r\\n| Please choose from the following menu:                 |\\r\\n|     Enter \\\"Breakfast\\\" to place a breakfast order       |\\r\\n|     Enter \\\"Lunch\\\" to place a lunch order               |\\r\\n|     Enter \\\"Dinner\\\" to place a dinner order             |\\r\\n|     Or, enter \\\"Return\\\" to return to previous menu      |\\r\\n----------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n--------------------\\u003e   Lunch Menu   \\u003c--------------------\\r\\n    1. Chick-fil-A Chicken Sandwich           $3.49\\r\\n    2. Spicy Chicken Sandwich                 $3.75\\r\\n    3. Grilled Chicken Sandwich               $4.75\\r\\n    4. Waffle Potato Fries                    $1.85\\r\\n    5. Milkshake                              $2.99\\r\\n----------------------------------------------------------\\r\\nEnter your choice (1, 2, 3, 4, or 5): \\r\\n\\r\\nWould you like another item (Y/N): \\r\\n\\r\\n--------------------\\u003e   Lunch Menu   \\u003c--------------------\\r\\n    1. Chick-fil-A Chicken Sandwich           $3.49\\r\\n    2. Spicy Chicken Sandwich                 $3.75\\r\\n    3. Grilled Chicken Sandwich               $4.75\\r\\n    4. Waffle Potato Fries                    $1.85\\r\\n    5. Milkshake                              $2.99\\r\\n----------------------------------------------------------\\r\\nEnter your choice (1, 2, 3, 4, or 5): \\r\\n\\r\\nWould you like another item (Y/N): \\r\\n\\r\\nFlorida Southern College Discount Program:\\r\\n    Enter \\\"s\\\" for Student or \\\"f\\\" for Faculty/Staff.\\r\\nEnter your choice: \\r\\n\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n+                Lunch: Order Number 1946                +\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n+    1. Chick-fil-A Chicken Sandwich           $ 3.49    +\\r\\n+    2. Waffle Potato Fries                    $ 1.85    +\\r\\n+    ------------------------------------------------    + \\r\\n+    Subtotal:                                 $ 5.34    +\\r\\n+    Faculty/Staff Discount:                   $ 1.60    +\\r\\n+    ------------------------------------------------    +\\r\\n+    Total:                                    $ 3.74    +\\r\\n+    ------------------------------------------------    +\\r\\n+                                                        +\\r\\n+         Your order will be ready in 2 minutes.         +\\r\\n+               Thank you for your order!                +\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n\\r\\n----------------------------------------------------------\\r\\n|             FSC Chick-fil-A Ordering System            |\\r\\n----------------------------------------------------------\\r\\n| Please choose from the following menu:                 |\\r\\n|     1. Place a food order.                             |\\r\\n|     2. Nutritional Information.                        |\\r\\n|     3. Exit the Ordering System.                       |\\r\\n----------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n----------------------------------------------------------\\r\\n|                  Placing a Food Order                  |\\r\\n----------------------------------------------------------\\r\\n| Please choose from the following menu:                 |\\r\\n|     Enter \\\"Breakfast\\\" to place a breakfast order       |\\r\\n|     Enter \\\"Lunch\\\" to place a lunch order               |\\r\\n|     Enter \\\"Dinner\\\" to place a dinner order             |\\r\\n|     Or, enter \\\"Return\\\" to return to previous menu      |\\r\\n----------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n--------------------\\u003e   Lunch Menu   \\u003c--------------------\\r\\n    1. Chick-fil-A Chicken Sandwich           $3.49\\r\\n    2. Spicy Chicken Sandwich                 $3.75\\r\\n    3. Grilled Chicken Sandwich               $4.75\\r\\n    4. Waffle Potato Fries                    $1.85\\r\\n    5. Milkshake                              $2.99\\r\\n----------------------------------------------------------\\r\\nEnter your choice (1, 2, 3, 4, or 5): \\r\\n\\r\\nWould you like another item (Y/N): \\r\\n\\r\\n--------------------\\u003e   Lunch Menu   \\u003c--------------------\\r\\n    1. Chick-fil-A Chicken Sandwich           $3.49\\r\\n    2. Spicy Chicken Sandwich                 $3.75\\r\\n    3. Grilled Chicken Sandwich               $4.75\\r\\n    4. Waffle Potato Fries                    $1.85\\r\\n    5. Milkshake                              $2.99\\r\\n----------------------------------------------------------\\r\\nEnter your choice (1, 2, 3, 4, or 5): \\r\\n\\r\\nWould you like another item (Y/N): \\r\\n\\r\\n--------------------\\u003e   Lunch Menu   \\u003c--------------------\\r\\n    1. Chick-fil-A Chicken Sandwich           $3.49\\r\\n    2. Spicy Chicken Sandwich                 $3.75\\r\\n    3. Grilled Chicken Sandwich               $4.75\\r\\n    4. Waffle Potato Fries                    $1.85\\r\\n    5. Milkshake                              $2.99\\r\\n----------------------------------------------------------\\r\\nEnter your choice (1, 2, 3, 4, or 5): \\r\\n\\r\\nWould you like another item (Y/N): \\r\\n\\r\\nFlorida Southern College Discount Program:\\r\\n    Enter \\\"s\\\" for Student or \\\"f\\\" for Faculty/Staff.\\r\\nEnter your choice: \\r\\n\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n+                Lunch: Order Number 1947                +\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n+    1. Spicy Chicken Sandwich                 $ 3.75    +\\r\\n+    2. Waffle Potato Fries                    $ 1.85    +\\r\\n+    3. Milkshake                              $ 2.99    +\\r\\n+    ------------------------------------------------    + \\r\\n+    Subtotal:                                 $ 8.59    +\\r\\n+    Student Discount:                         $ 3.44    +\\r\\n+    ------------------------------------------------    +\\r\\n+    Total:                                    $ 5.15    +\\r\\n+    ------------------------------------------------    +\\r\\n+                                                        +\\r\\n+         Your order will be ready in 3 minutes.         +\\r\\n+               Thank you for your order!                +\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n\\r\\n----------------------------------------------------------\\r\\n|             FSC Chick-fil-A Ordering System            |\\r\\n----------------------------------------------------------\\r\\n| Please choose from the following menu:                 |\\r\\n|     1. Place a food order.                             |\\r\\n|     2. Nutritional Information.                        |\\r\\n|     3. Exit the Ordering System.                       |\\r\\n----------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n----------------------------------------------------------\\r\\n|                  Placing a Food Order                  |\\r\\n----------------------------------------------------------\\r\\n| Please choose from the following menu:                 |\\r\\n|     Enter \\\"Breakfast\\\" to place a breakfast order       |\\r\\n|     Enter \\\"Lunch\\\" to place a lunch order               |\\r\\n|     Enter \\\"Dinner\\\" to place a dinner order             |\\r\\n|     Or, enter \\\"Return\\\" to return to previous menu      |\\r\\n----------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n--------------------\\u003e   Lunch Menu   \\u003c--------------------\\r\\n    1. Chick-fil-A Chicken Sandwich           $3.49\\r\\n    2. Spicy Chicken Sandwich                 $3.75\\r\\n    3. Grilled Chicken Sandwich               $4.75\\r\\n    4. Waffle Potato Fries                    $1.85\\r\\n    5. Milkshake                              $2.99\\r\\n----------------------------------------------------------\\r\\nEnter your choice (1, 2, 3, 4, or 5): \\r\\n\\r\\nWould you like another item (Y/N): \\r\\n\\r\\n--------------------\\u003e   Lunch Menu   \\u003c--------------------\\r\\n    1. Chick-fil-A Chicken Sandwich           $3.49\\r\\n    2. Spicy Chicken Sandwich                 $3.75\\r\\n    3. Grilled Chicken Sandwich               $4.75\\r\\n    4. Waffle Potato Fries                    $1.85\\r\\n    5. Milkshake                              $2.99\\r\\n----------------------------------------------------------\\r\\nEnter your choice (1, 2, 3, 4, or 5): \\r\\n\\r\\nWould you like another item (Y/N): \\r\\n\\r\\nFlorida Southern College Discount Program:\\r\\n    Enter \\\"s\\\" for Student or \\\"f\\\" for Faculty/Staff.\\r\\nEnter your choice: \\r\\n\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n+                Lunch: Order Number 1948                +\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n+    1. Grilled Chicken Sandwich               $ 4.75    +\\r\\n+    2. Waffle Potato Fries                    $ 1.85    +\\r\\n+    ------------------------------------------------    + \\r\\n+    Subtotal:                                 $ 6.60    +\\r\\n+    Faculty/Staff Discount:                   $ 1.98    +\\r\\n+    ------------------------------------------------    +\\r\\n+    Total:                                    $ 4.62    +\\r\\n+    ------------------------------------------------    +\\r\\n+                                                        +\\r\\n+         Your order will be ready in 2 minutes.         +\\r\\n+               Thank you for your order!                +\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n\\r\\n----------------------------------------------------------\\r\\n|             FSC Chick-fil-A Ordering System            |\\r\\n----------------------------------------------------------\\r\\n| Please choose from the following menu:                 |\\r\\n|     1. Place a food order.                             |\\r\\n|     2. Nutritional Information.                        |\\r\\n|     3. Exit the Ordering System.                       |\\r\\n----------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n-----------------Exit the Ordering System-----------------\\r\\nGoodbye.\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"1\\r\\nLunch\\r\\n1\\r\\nY\\r\\n4\\r\\nN\\r\\nf\\r\\n1\\r\\nLunch\\r\\n2\\r\\nY\\r\\n4\\r\\nY\\r\\n5\\r\\nN\\r\\ns\\r\\n1\\r\\nLunch\\r\\n3\\r\\nY\\r\\n4\\r\\nN\\r\\nf\\r\\n3\\r\\n\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"Order - Multiple Dinner Orders\",\"headline\":\"\",\"points\":5,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"----------------------------------------------------------\\r\\n|             FSC Chick-fil-A Ordering System            |\\r\\n----------------------------------------------------------\\r\\n| Please choose from the following menu:                 |\\r\\n|     1. Place a food order.                             |\\r\\n|     2. Nutritional Information.                        |\\r\\n|     3. Exit the Ordering System.                       |\\r\\n----------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n----------------------------------------------------------\\r\\n|                  Placing a Food Order                  |\\r\\n----------------------------------------------------------\\r\\n| Please choose from the following menu:                 |\\r\\n|     Enter \\\"Breakfast\\\" to place a breakfast order       |\\r\\n|     Enter \\\"Lunch\\\" to place a lunch order               |\\r\\n|     Enter \\\"Dinner\\\" to place a dinner order             |\\r\\n|     Or, enter \\\"Return\\\" to return to previous menu      |\\r\\n----------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n--------------------\\u003e  Dinner Menu  \\u003c---------------------\\r\\n    1. Chick-fil-A Chicken Sandwich           $3.49\\r\\n    2. Spicy Chicken Sandwich                 $3.75\\r\\n    3. Grilled Chicken Sandwich               $4.75\\r\\n    4. Waffle Potato Fries                    $1.85\\r\\n    5. Milkshake                              $2.99\\r\\n----------------------------------------------------------\\r\\nEnter your choice (1, 2, 3, 4, or 5): \\r\\n\\r\\nWould you like another item (Y/N): \\r\\n\\r\\n--------------------\\u003e  Dinner Menu  \\u003c---------------------\\r\\n    1. Chick-fil-A Chicken Sandwich           $3.49\\r\\n    2. Spicy Chicken Sandwich                 $3.75\\r\\n    3. Grilled Chicken Sandwich               $4.75\\r\\n    4. Waffle Potato Fries                    $1.85\\r\\n    5. Milkshake                              $2.99\\r\\n----------------------------------------------------------\\r\\nEnter your choice (1, 2, 3, 4, or 5): \\r\\n\\r\\nWould you like another item (Y/N): \\r\\n\\r\\nFlorida Southern College Discount Program:\\r\\n    Enter \\\"s\\\" for Student or \\\"f\\\" for Faculty/Staff.\\r\\nEnter your choice: \\r\\n\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n+               Dinner: Order Number 1946                +\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n+    1. Chick-fil-A Chicken Sandwich           $ 3.49    +\\r\\n+    2. Waffle Potato Fries                    $ 1.85    +\\r\\n+    ------------------------------------------------    + \\r\\n+    Subtotal:                                 $ 5.34    +\\r\\n+    Faculty/Staff Discount:                   $ 1.60    +\\r\\n+    ------------------------------------------------    +\\r\\n+    Total:                                    $ 3.74    +\\r\\n+    ------------------------------------------------    +\\r\\n+                                                        +\\r\\n+         Your order will be ready in 2 minutes.         +\\r\\n+               Thank you for your order!                +\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n\\r\\n----------------------------------------------------------\\r\\n|             FSC Chick-fil-A Ordering System            |\\r\\n----------------------------------------------------------\\r\\n| Please choose from the following menu:                 |\\r\\n|     1. Place a food order.                             |\\r\\n|     2. Nutritional Information.                        |\\r\\n|     3. Exit the Ordering System.                       |\\r\\n----------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n----------------------------------------------------------\\r\\n|                  Placing a Food Order                  |\\r\\n----------------------------------------------------------\\r\\n| Please choose from the following menu:                 |\\r\\n|     Enter \\\"Breakfast\\\" to place a breakfast order       |\\r\\n|     Enter \\\"Lunch\\\" to place a lunch order               |\\r\\n|     Enter \\\"Dinner\\\" to place a dinner order             |\\r\\n|     Or, enter \\\"Return\\\" to return to previous menu      |\\r\\n----------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n--------------------\\u003e  Dinner Menu  \\u003c---------------------\\r\\n    1. Chick-fil-A Chicken Sandwich           $3.49\\r\\n    2. Spicy Chicken Sandwich                 $3.75\\r\\n    3. Grilled Chicken Sandwich               $4.75\\r\\n    4. Waffle Potato Fries                    $1.85\\r\\n    5. Milkshake                              $2.99\\r\\n----------------------------------------------------------\\r\\nEnter your choice (1, 2, 3, 4, or 5): \\r\\n\\r\\nWould you like another item (Y/N): \\r\\n\\r\\n--------------------\\u003e  Dinner Menu  \\u003c---------------------\\r\\n    1. Chick-fil-A Chicken Sandwich           $3.49\\r\\n    2. Spicy Chicken Sandwich                 $3.75\\r\\n    3. Grilled Chicken Sandwich               $4.75\\r\\n    4. Waffle Potato Fries                    $1.85\\r\\n    5. Milkshake                              $2.99\\r\\n----------------------------------------------------------\\r\\nEnter your choice (1, 2, 3, 4, or 5): \\r\\n\\r\\nWould you like another item (Y/N): \\r\\n\\r\\n--------------------\\u003e  Dinner Menu  \\u003c---------------------\\r\\n    1. Chick-fil-A Chicken Sandwich           $3.49\\r\\n    2. Spicy Chicken Sandwich                 $3.75\\r\\n    3. Grilled Chicken Sandwich               $4.75\\r\\n    4. Waffle Potato Fries                    $1.85\\r\\n    5. Milkshake                              $2.99\\r\\n----------------------------------------------------------\\r\\nEnter your choice (1, 2, 3, 4, or 5): \\r\\n\\r\\nWould you like another item (Y/N): \\r\\n\\r\\nFlorida Southern College Discount Program:\\r\\n    Enter \\\"s\\\" for Student or \\\"f\\\" for Faculty/Staff.\\r\\nEnter your choice: \\r\\n\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n+               Dinner: Order Number 1947                +\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n+    1. Spicy Chicken Sandwich                 $ 3.75    +\\r\\n+    2. Waffle Potato Fries                    $ 1.85    +\\r\\n+    3. Milkshake                              $ 2.99    +\\r\\n+    ------------------------------------------------    + \\r\\n+    Subtotal:                                 $ 8.59    +\\r\\n+    Student Discount:                         $ 3.44    +\\r\\n+    ------------------------------------------------    +\\r\\n+    Total:                                    $ 5.15    +\\r\\n+    ------------------------------------------------    +\\r\\n+                                                        +\\r\\n+         Your order will be ready in 3 minutes.         +\\r\\n+               Thank you for your order!                +\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n\\r\\n----------------------------------------------------------\\r\\n|             FSC Chick-fil-A Ordering System            |\\r\\n----------------------------------------------------------\\r\\n| Please choose from the following menu:                 |\\r\\n|     1. Place a food order.                             |\\r\\n|     2. Nutritional Information.                        |\\r\\n|     3. Exit the Ordering System.                       |\\r\\n----------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n----------------------------------------------------------\\r\\n|                  Placing a Food Order                  |\\r\\n----------------------------------------------------------\\r\\n| Please choose from the following menu:                 |\\r\\n|     Enter \\\"Breakfast\\\" to place a breakfast order       |\\r\\n|     Enter \\\"Lunch\\\" to place a lunch order               |\\r\\n|     Enter \\\"Dinner\\\" to place a dinner order             |\\r\\n|     Or, enter \\\"Return\\\" to return to previous menu      |\\r\\n----------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n--------------------\\u003e  Dinner Menu  \\u003c---------------------\\r\\n    1. Chick-fil-A Chicken Sandwich           $3.49\\r\\n    2. Spicy Chicken Sandwich                 $3.75\\r\\n    3. Grilled Chicken Sandwich               $4.75\\r\\n    4. Waffle Potato Fries                    $1.85\\r\\n    5. Milkshake                              $2.99\\r\\n----------------------------------------------------------\\r\\nEnter your choice (1, 2, 3, 4, or 5): \\r\\n\\r\\nWould you like another item (Y/N): \\r\\n\\r\\n--------------------\\u003e  Dinner Menu  \\u003c---------------------\\r\\n    1. Chick-fil-A Chicken Sandwich           $3.49\\r\\n    2. Spicy Chicken Sandwich                 $3.75\\r\\n    3. Grilled Chicken Sandwich               $4.75\\r\\n    4. Waffle Potato Fries                    $1.85\\r\\n    5. Milkshake                              $2.99\\r\\n----------------------------------------------------------\\r\\nEnter your choice (1, 2, 3, 4, or 5): \\r\\n\\r\\nWould you like another item (Y/N): \\r\\n\\r\\nFlorida Southern College Discount Program:\\r\\n    Enter \\\"s\\\" for Student or \\\"f\\\" for Faculty/Staff.\\r\\nEnter your choice: \\r\\n\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n+               Dinner: Order Number 1948                +\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n+    1. Grilled Chicken Sandwich               $ 4.75    +\\r\\n+    2. Waffle Potato Fries                    $ 1.85    +\\r\\n+    ------------------------------------------------    + \\r\\n+    Subtotal:                                 $ 6.60    +\\r\\n+    Faculty/Staff Discount:                   $ 1.98    +\\r\\n+    ------------------------------------------------    +\\r\\n+    Total:                                    $ 4.62    +\\r\\n+    ------------------------------------------------    +\\r\\n+                                                        +\\r\\n+         Your order will be ready in 2 minutes.         +\\r\\n+               Thank you for your order!                +\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n\\r\\n----------------------------------------------------------\\r\\n|             FSC Chick-fil-A Ordering System            |\\r\\n----------------------------------------------------------\\r\\n| Please choose from the following menu:                 |\\r\\n|     1. Place a food order.                             |\\r\\n|     2. Nutritional Information.                        |\\r\\n|     3. Exit the Ordering System.                       |\\r\\n----------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n-----------------Exit the Ordering System-----------------\\r\\nGoodbye.\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"1\\r\\nDinner\\r\\n1\\r\\nY\\r\\n4\\r\\nN\\r\\nf\\r\\n1\\r\\nDinner\\r\\n2\\r\\nY\\r\\n4\\r\\nY\\r\\n5\\r\\nN\\r\\ns\\r\\n1\\r\\nDinner\\r\\n3\\r\\nY\\r\\n4\\r\\nN\\r\\nf\\r\\n3\\r\\n\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"Order - Multiple Order Types\",\"headline\":\"\",\"points\":10,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"----------------------------------------------------------\\r\\n|             FSC Chick-fil-A Ordering System            |\\r\\n----------------------------------------------------------\\r\\n| Please choose from the following menu:                 |\\r\\n|     1. Place a food order.                             |\\r\\n|     2. Nutritional Information.                        |\\r\\n|     3. Exit the Ordering System.                       |\\r\\n----------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n----------------------------------------------------------\\r\\n|                  Placing a Food Order                  |\\r\\n----------------------------------------------------------\\r\\n| Please choose from the following menu:                 |\\r\\n|     Enter \\\"Breakfast\\\" to place a breakfast order       |\\r\\n|     Enter \\\"Lunch\\\" to place a lunch order               |\\r\\n|     Enter \\\"Dinner\\\" to place a dinner order             |\\r\\n|     Or, enter \\\"Return\\\" to return to previous menu      |\\r\\n----------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n--------------------\\u003e Breakfast Menu \\u003c--------------------\\r\\n    1. Chick-fil-A Chicken Biscuit            $3.49\\r\\n    2. Chicken, Egg \\u0026 Cheese Bagel            $3.69\\r\\n    3. Hash Brown Scramble Burrito            $3.79\\r\\n    4. Egg White Grill                        $3.65\\r\\n    5. Hash Browns                            $1.09\\r\\n----------------------------------------------------------\\r\\nEnter your choice (1, 2, 3, 4, or 5): \\r\\n\\r\\nWould you like another item (Y/N): \\r\\n\\r\\n--------------------\\u003e Breakfast Menu \\u003c--------------------\\r\\n    1. Chick-fil-A Chicken Biscuit            $3.49\\r\\n    2. Chicken, Egg \\u0026 Cheese Bagel            $3.69\\r\\n    3. Hash Brown Scramble Burrito            $3.79\\r\\n    4. Egg White Grill                        $3.65\\r\\n    5. Hash Browns                            $1.09\\r\\n----------------------------------------------------------\\r\\nEnter your choice (1, 2, 3, 4, or 5): \\r\\n\\r\\nWould you like another item (Y/N): \\r\\n\\r\\n--------------------\\u003e Breakfast Menu \\u003c--------------------\\r\\n    1. Chick-fil-A Chicken Biscuit            $3.49\\r\\n    2. Chicken, Egg \\u0026 Cheese Bagel            $3.69\\r\\n    3. Hash Brown Scramble Burrito            $3.79\\r\\n    4. Egg White Grill                        $3.65\\r\\n    5. Hash Browns                            $1.09\\r\\n----------------------------------------------------------\\r\\nEnter your choice (1, 2, 3, 4, or 5): \\r\\n\\r\\nWould you like another item (Y/N): \\r\\n\\r\\nFlorida Southern College Discount Program:\\r\\n    Enter \\\"s\\\" for Student or \\\"f\\\" for Faculty/Staff.\\r\\nEnter your choice: \\r\\n\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n+              Breakfast: Order Number 1946              +\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n+    1. Chick-fil-A Chicken Biscuit            $ 3.49    +\\r\\n+    2. Chick-fil-A Chicken Biscuit            $ 3.49    +\\r\\n+    3. Hash Browns                            $ 1.09    +\\r\\n+    ------------------------------------------------    + \\r\\n+    Subtotal:                                 $ 8.07    +\\r\\n+    Faculty/Staff Discount:                   $ 2.42    +\\r\\n+    ------------------------------------------------    +\\r\\n+    Total:                                    $ 5.65    +\\r\\n+    ------------------------------------------------    +\\r\\n+                                                        +\\r\\n+         Your order will be ready in 3 minutes.         +\\r\\n+               Thank you for your order!                +\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n\\r\\n----------------------------------------------------------\\r\\n|             FSC Chick-fil-A Ordering System            |\\r\\n----------------------------------------------------------\\r\\n| Please choose from the following menu:                 |\\r\\n|     1. Place a food order.                             |\\r\\n|     2. Nutritional Information.                        |\\r\\n|     3. Exit the Ordering System.                       |\\r\\n----------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n----------------------------------------------------------\\r\\n|                  Placing a Food Order                  |\\r\\n----------------------------------------------------------\\r\\n| Please choose from the following menu:                 |\\r\\n|     Enter \\\"Breakfast\\\" to place a breakfast order       |\\r\\n|     Enter \\\"Lunch\\\" to place a lunch order               |\\r\\n|     Enter \\\"Dinner\\\" to place a dinner order             |\\r\\n|     Or, enter \\\"Return\\\" to return to previous menu      |\\r\\n----------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n--------------------\\u003e   Lunch Menu   \\u003c--------------------\\r\\n    1. Chick-fil-A Chicken Sandwich           $3.49\\r\\n    2. Spicy Chicken Sandwich                 $3.75\\r\\n    3. Grilled Chicken Sandwich               $4.75\\r\\n    4. Waffle Potato Fries                    $1.85\\r\\n    5. Milkshake                              $2.99\\r\\n----------------------------------------------------------\\r\\nEnter your choice (1, 2, 3, 4, or 5): \\r\\n\\r\\nWould you like another item (Y/N): \\r\\n\\r\\n--------------------\\u003e   Lunch Menu   \\u003c--------------------\\r\\n    1. Chick-fil-A Chicken Sandwich           $3.49\\r\\n    2. Spicy Chicken Sandwich                 $3.75\\r\\n    3. Grilled Chicken Sandwich               $4.75\\r\\n    4. Waffle Potato Fries                    $1.85\\r\\n    5. Milkshake                              $2.99\\r\\n----------------------------------------------------------\\r\\nEnter your choice (1, 2, 3, 4, or 5): \\r\\n\\r\\nWould you like another item (Y/N): \\r\\n\\r\\n--------------------\\u003e   Lunch Menu   \\u003c--------------------\\r\\n    1. Chick-fil-A Chicken Sandwich           $3.49\\r\\n    2. Spicy Chicken Sandwich                 $3.75\\r\\n    3. Grilled Chicken Sandwich               $4.75\\r\\n    4. Waffle Potato Fries                    $1.85\\r\\n    5. Milkshake                              $2.99\\r\\n----------------------------------------------------------\\r\\nEnter your choice (1, 2, 3, 4, or 5): \\r\\n\\r\\nWould you like another item (Y/N): \\r\\n\\r\\n--------------------\\u003e   Lunch Menu   \\u003c--------------------\\r\\n    1. Chick-fil-A Chicken Sandwich           $3.49\\r\\n    2. Spicy Chicken Sandwich                 $3.75\\r\\n    3. Grilled Chicken Sandwich               $4.75\\r\\n    4. Waffle Potato Fries                    $1.85\\r\\n    5. Milkshake                              $2.99\\r\\n----------------------------------------------------------\\r\\nEnter your choice (1, 2, 3, 4, or 5): \\r\\n\\r\\nWould you like another item (Y/N): \\r\\n\\r\\nFlorida Southern College Discount Program:\\r\\n    Enter \\\"s\\\" for Student or \\\"f\\\" for Faculty/Staff.\\r\\nEnter your choice: \\r\\n\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n+                Lunch: Order Number 1947                +\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n+    1. Chick-fil-A Chicken Sandwich           $ 3.49    +\\r\\n+    2. Chick-fil-A Chicken Sandwich           $ 3.49    +\\r\\n+    3. Waffle Potato Fries                    $ 1.85    +\\r\\n+    4. Milkshake                              $ 2.99    +\\r\\n+    ------------------------------------------------    + \\r\\n+    Subtotal:                                 $11.82    +\\r\\n+    Student Discount:                         $ 4.73    +\\r\\n+    ------------------------------------------------    +\\r\\n+    Total:                                    $ 7.09    +\\r\\n+    ------------------------------------------------    +\\r\\n+                                                        +\\r\\n+         Your order will be ready in 4 minutes.         +\\r\\n+               Thank you for your order!                +\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n\\r\\n----------------------------------------------------------\\r\\n|             FSC Chick-fil-A Ordering System            |\\r\\n----------------------------------------------------------\\r\\n| Please choose from the following menu:                 |\\r\\n|     1. Place a food order.                             |\\r\\n|     2. Nutritional Information.                        |\\r\\n|     3. Exit the Ordering System.                       |\\r\\n----------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n\\r\\n----------------------------------------------------------\\r\\n|                  Placing a Food Order                  |\\r\\n----------------------------------------------------------\\r\\n| Please choose from the following menu:                 |\\r\\n|     Enter \\\"Breakfast\\\" to place a breakfast order       |\\r\\n|     Enter \\\"Lunch\\\" to place a lunch order               |\\r\\n|     Enter \\\"Dinner\\\" to place a dinner order             |\\r\\n|     Or, enter \\\"Return\\\" to return to previous menu      |\\r\\n----------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n--------------------\\u003e  Dinner Menu  \\u003c---------------------\\r\\n    1. Chick-fil-A Chicken Sandwich           $3.49\\r\\n    2. Spicy Chicken Sandwich                 $3.75\\r\\n    3. Grilled Chicken Sandwich               $4.75\\r\\n    4. Waffle Potato Fries                    $1.85\\r\\n    5. Milkshake                              $2.99\\r\\n----------------------------------------------------------\\r\\nEnter your choice (1, 2, 3, 4, or 5): \\r\\n\\r\\nWould you like another item (Y/N): \\r\\n\\r\\n--------------------\\u003e  Dinner Menu  \\u003c---------------------\\r\\n    1. Chick-fil-A Chicken Sandwich           $3.49\\r\\n    2. Spicy Chicken Sandwich                 $3.75\\r\\n    3. Grilled Chicken Sandwich               $4.75\\r\\n    4. Waffle Potato Fries                    $1.85\\r\\n    5. Milkshake                              $2.99\\r\\n----------------------------------------------------------\\r\\nEnter your choice (1, 2, 3, 4, or 5): \\r\\n\\r\\nWould you like another item (Y/N): \\r\\n\\r\\n--------------------\\u003e  Dinner Menu  \\u003c---------------------\\r\\n    1. Chick-fil-A Chicken Sandwich           $3.49\\r\\n    2. Spicy Chicken Sandwich                 $3.75\\r\\n    3. Grilled Chicken Sandwich               $4.75\\r\\n    4. Waffle Potato Fries                    $1.85\\r\\n    5. Milkshake                              $2.99\\r\\n----------------------------------------------------------\\r\\nEnter your choice (1, 2, 3, 4, or 5): \\r\\n\\r\\nWould you like another item (Y/N): \\r\\n\\r\\nFlorida Southern College Discount Program:\\r\\n    Enter \\\"s\\\" for Student or \\\"f\\\" for Faculty/Staff.\\r\\nEnter your choice: \\r\\n\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n+               Dinner: Order Number 1948                +\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n+    1. Chick-fil-A Chicken Sandwich           $ 3.49    +\\r\\n+    2. Spicy Chicken Sandwich                 $ 3.75    +\\r\\n+    3. Milkshake                              $ 2.99    +\\r\\n+    ------------------------------------------------    + \\r\\n+    Subtotal:                                 $10.23    +\\r\\n+    Faculty/Staff Discount:                   $ 3.07    +\\r\\n+    ------------------------------------------------    +\\r\\n+    Total:                                    $ 7.16    +\\r\\n+    ------------------------------------------------    +\\r\\n+                                                        +\\r\\n+         Your order will be ready in 3 minutes.         +\\r\\n+               Thank you for your order!                +\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n\\r\\n----------------------------------------------------------\\r\\n|             FSC Chick-fil-A Ordering System            |\\r\\n----------------------------------------------------------\\r\\n| Please choose from the following menu:                 |\\r\\n|     1. Place a food order.                             |\\r\\n|     2. Nutritional Information.                        |\\r\\n|     3. Exit the Ordering System.                       |\\r\\n----------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n-----------------Exit the Ordering System-----------------\\r\\nGoodbye.\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"1\\r\\nBreakfast\\r\\n1\\r\\nY\\r\\n1\\r\\nY\\r\\n5\\r\\nN\\r\\nf\\r\\n1\\r\\nLunch\\r\\n1\\r\\nY\\r\\n1\\r\\nY\\r\\n4\\r\\nY\\r\\n5\\r\\nN\\r\\ns\\r\\n1\\r\\nDinner\\r\\n1\\r\\nY\\r\\n2\\r\\nY\\r\\n5\\r\\nN\\r\\nf\\r\\n3\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"readVerifyMAIN\",\"headline\":\"\",\"points\":5,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"----------------------------------------------------------\\r\\n|             FSC Chick-fil-A Ordering System            |\\r\\n----------------------------------------------------------\\r\\n| Please choose from the following menu:                 |\\r\\n|     1. Place a food order.                             |\\r\\n|     2. Nutritional Information.                        |\\r\\n|     3. Exit the Ordering System.                       |\\r\\n----------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n\\u003e You entered an invalid option. Please try again.\\r\\n\\r\\n----------------------------------------------------------\\r\\n|             FSC Chick-fil-A Ordering System            |\\r\\n----------------------------------------------------------\\r\\n| Please choose from the following menu:                 |\\r\\n|     1. Place a food order.                             |\\r\\n|     2. Nutritional Information.                        |\\r\\n|     3. Exit the Ordering System.                       |\\r\\n----------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n\\u003e You entered an invalid option. Please try again.\\r\\n\\r\\n----------------------------------------------------------\\r\\n|             FSC Chick-fil-A Ordering System            |\\r\\n----------------------------------------------------------\\r\\n| Please choose from the following menu:                 |\\r\\n|     1. Place a food order.                             |\\r\\n|     2. Nutritional Information.                        |\\r\\n|     3. Exit the Ordering System.                       |\\r\\n----------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n\\u003e You entered an invalid option. Please try again.\\r\\n\\r\\n----------------------------------------------------------\\r\\n|             FSC Chick-fil-A Ordering System            |\\r\\n----------------------------------------------------------\\r\\n| Please choose from the following menu:                 |\\r\\n|     1. Place a food order.                             |\\r\\n|     2. Nutritional Information.                        |\\r\\n|     3. Exit the Ordering System.                       |\\r\\n----------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n\\u003e You entered an invalid option. Please try again.\\r\\n\\r\\n----------------------------------------------------------\\r\\n|             FSC Chick-fil-A Ordering System            |\\r\\n----------------------------------------------------------\\r\\n| Please choose from the following menu:                 |\\r\\n|     1. Place a food order.                             |\\r\\n|     2. Nutritional Information.                        |\\r\\n|     3. Exit the Ordering System.                       |\\r\\n----------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n-----------------Exit the Ordering System-----------------\\r\\nGoodbye.\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"will this input crash your program???\\r\\nGuess not. Great job!\\r\\n0\\r\\n4\\r\\n3\\r\\n\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"readVerifyBLDchoice\",\"headline\":\"\",\"points\":4,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"----------------------------------------------------------\\r\\n|             FSC Chick-fil-A Ordering System            |\\r\\n----------------------------------------------------------\\r\\n| Please choose from the following menu:                 |\\r\\n|     1. Place a food order.                             |\\r\\n|     2. Nutritional Information.                        |\\r\\n|     3. Exit the Ordering System.                       |\\r\\n----------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n----------------------------------------------------------\\r\\n|                  Placing a Food Order                  |\\r\\n----------------------------------------------------------\\r\\n| Please choose from the following menu:                 |\\r\\n|     Enter \\\"Breakfast\\\" to place a breakfast order       |\\r\\n|     Enter \\\"Lunch\\\" to place a lunch order               |\\r\\n|     Enter \\\"Dinner\\\" to place a dinner order             |\\r\\n|     Or, enter \\\"Return\\\" to return to previous menu      |\\r\\n----------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n\\u003e You entered an invalid option. Please try again.\\r\\n\\r\\n----------------------------------------------------------\\r\\n|                  Placing a Food Order                  |\\r\\n----------------------------------------------------------\\r\\n| Please choose from the following menu:                 |\\r\\n|     Enter \\\"Breakfast\\\" to place a breakfast order       |\\r\\n|     Enter \\\"Lunch\\\" to place a lunch order               |\\r\\n|     Enter \\\"Dinner\\\" to place a dinner order             |\\r\\n|     Or, enter \\\"Return\\\" to return to previous menu      |\\r\\n----------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n----------------------------------------------------------\\r\\n|             FSC Chick-fil-A Ordering System            |\\r\\n----------------------------------------------------------\\r\\n| Please choose from the following menu:                 |\\r\\n|     1. Place a food order.                             |\\r\\n|     2. Nutritional Information.                        |\\r\\n|     3. Exit the Ordering System.                       |\\r\\n----------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n-----------------Exit the Ordering System-----------------\\r\\nGoodbye.\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"1\\r\\nWill this crash your program???\\r\\nReturn\\r\\n3\\r\\n\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"readVerifyBLDchoice-CAPS\",\"headline\":\"\",\"points\":1,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"----------------------------------------------------------\\r\\n|             FSC Chick-fil-A Ordering System            |\\r\\n----------------------------------------------------------\\r\\n| Please choose from the following menu:                 |\\r\\n|     1. Place a food order.                             |\\r\\n|     2. Nutritional Information.                        |\\r\\n|     3. Exit the Ordering System.                       |\\r\\n----------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n----------------------------------------------------------\\r\\n|                  Placing a Food Order                  |\\r\\n----------------------------------------------------------\\r\\n| Please choose from the following menu:                 |\\r\\n|     Enter \\\"Breakfast\\\" to place a breakfast order       |\\r\\n|     Enter \\\"Lunch\\\" to place a lunch order               |\\r\\n|     Enter \\\"Dinner\\\" to place a dinner order             |\\r\\n|     Or, enter \\\"Return\\\" to return to previous menu      |\\r\\n----------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n----------------------------------------------------------\\r\\n|             FSC Chick-fil-A Ordering System            |\\r\\n----------------------------------------------------------\\r\\n| Please choose from the following menu:                 |\\r\\n|     1. Place a food order.                             |\\r\\n|     2. Nutritional Information.                        |\\r\\n|     3. Exit the Ordering System.                       |\\r\\n----------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n-----------------Exit the Ordering System-----------------\\r\\nGoodbye.\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"1\\r\\nRETurN\\r\\n3\\r\\n\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"readVerifyNMchoice\",\"headline\":\"\",\"points\":4,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"----------------------------------------------------------\\r\\n|             FSC Chick-fil-A Ordering System            |\\r\\n----------------------------------------------------------\\r\\n| Please choose from the following menu:                 |\\r\\n|     1. Place a food order.                             |\\r\\n|     2. Nutritional Information.                        |\\r\\n|     3. Exit the Ordering System.                       |\\r\\n----------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n------------------Nutritional Information-----------------\\r\\nPlease choose from the following:\\r\\n    Enter \\\"Breakfast\\\" to view breakfast nutritional info.\\r\\n    Enter \\\"Lunch\\\" to view lunch nutritional info.\\r\\n    Enter \\\"Dinner\\\" to view dinner nutritional info.\\r\\n    Or, enter \\\"Return\\\" to return to previous menu.\\r\\nEnter your choice: \\r\\n\\r\\n\\u003e You entered an invalid option. Please try again.\\r\\n\\r\\n------------------Nutritional Information-----------------\\r\\nPlease choose from the following:\\r\\n    Enter \\\"Breakfast\\\" to view breakfast nutritional info.\\r\\n    Enter \\\"Lunch\\\" to view lunch nutritional info.\\r\\n    Enter \\\"Dinner\\\" to view dinner nutritional info.\\r\\n    Or, enter \\\"Return\\\" to return to previous menu.\\r\\nEnter your choice: \\r\\n\\r\\n----------------------------------------------------------\\r\\n|             FSC Chick-fil-A Ordering System            |\\r\\n----------------------------------------------------------\\r\\n| Please choose from the following menu:                 |\\r\\n|     1. Place a food order.                             |\\r\\n|     2. Nutritional Information.                        |\\r\\n|     3. Exit the Ordering System.                       |\\r\\n----------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n-----------------Exit the Ordering System-----------------\\r\\nGoodbye.\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"2\\r\\nWill this crash your program???\\r\\nReturn\\r\\n3\\r\\n\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"readVerifyNMchoice-CAPS\",\"headline\":\"\",\"points\":1,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"----------------------------------------------------------\\r\\n|             FSC Chick-fil-A Ordering System            |\\r\\n----------------------------------------------------------\\r\\n| Please choose from the following menu:                 |\\r\\n|     1. Place a food order.                             |\\r\\n|     2. Nutritional Information.                        |\\r\\n|     3. Exit the Ordering System.                       |\\r\\n----------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n------------------Nutritional Information-----------------\\r\\nPlease choose from the following:\\r\\n    Enter \\\"Breakfast\\\" to view breakfast nutritional info.\\r\\n    Enter \\\"Lunch\\\" to view lunch nutritional info.\\r\\n    Enter \\\"Dinner\\\" to view dinner nutritional info.\\r\\n    Or, enter \\\"Return\\\" to return to previous menu.\\r\\nEnter your choice: \\r\\n\\r\\n----------------------------------------------------------\\r\\n|             FSC Chick-fil-A Ordering System            |\\r\\n----------------------------------------------------------\\r\\n| Please choose from the following menu:                 |\\r\\n|     1. Place a food order.                             |\\r\\n|     2. Nutritional Information.                        |\\r\\n|     3. Exit the Ordering System.                       |\\r\\n----------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n-----------------Exit the Ordering System-----------------\\r\\nGoodbye.\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"2\\r\\nREtuRn\\r\\n3\\r\\n\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"readVerifyYesNo\",\"headline\":\"\",\"points\":4,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"----------------------------------------------------------\\r\\n|             FSC Chick-fil-A Ordering System            |\\r\\n----------------------------------------------------------\\r\\n| Please choose from the following menu:                 |\\r\\n|     1. Place a food order.                             |\\r\\n|     2. Nutritional Information.                        |\\r\\n|     3. Exit the Ordering System.                       |\\r\\n----------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n----------------------------------------------------------\\r\\n|                  Placing a Food Order                  |\\r\\n----------------------------------------------------------\\r\\n| Please choose from the following menu:                 |\\r\\n|     Enter \\\"Breakfast\\\" to place a breakfast order       |\\r\\n|     Enter \\\"Lunch\\\" to place a lunch order               |\\r\\n|     Enter \\\"Dinner\\\" to place a dinner order             |\\r\\n|     Or, enter \\\"Return\\\" to return to previous menu      |\\r\\n----------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n--------------------\\u003e   Lunch Menu   \\u003c--------------------\\r\\n    1. Chick-fil-A Chicken Sandwich           $3.49\\r\\n    2. Spicy Chicken Sandwich                 $3.75\\r\\n    3. Grilled Chicken Sandwich               $4.75\\r\\n    4. Waffle Potato Fries                    $1.85\\r\\n    5. Milkshake                              $2.99\\r\\n----------------------------------------------------------\\r\\nEnter your choice (1, 2, 3, 4, or 5): \\r\\n\\r\\nWould you like another item (Y/N): \\r\\n\\r\\n\\u003e You entered an invalid option. Please try again.\\r\\n\\r\\nWould you like another item (Y/N): \\r\\n\\r\\n\\u003e You entered an invalid option. Please try again.\\r\\n\\r\\nWould you like another item (Y/N): \\r\\n\\r\\nFlorida Southern College Discount Program:\\r\\n    Enter \\\"s\\\" for Student or \\\"f\\\" for Faculty/Staff.\\r\\nEnter your choice: \\r\\n\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n+                Lunch: Order Number 1946                +\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n+    1. Chick-fil-A Chicken Sandwich           $ 3.49    +\\r\\n+    ------------------------------------------------    + \\r\\n+    Subtotal:                                 $ 3.49    +\\r\\n+    Student Discount:                         $ 1.40    +\\r\\n+    ------------------------------------------------    +\\r\\n+    Total:                                    $ 2.09    +\\r\\n+    ------------------------------------------------    +\\r\\n+                                                        +\\r\\n+         Your order will be ready in 1 minutes.         +\\r\\n+               Thank you for your order!                +\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n\\r\\n----------------------------------------------------------\\r\\n|             FSC Chick-fil-A Ordering System            |\\r\\n----------------------------------------------------------\\r\\n| Please choose from the following menu:                 |\\r\\n|     1. Place a food order.                             |\\r\\n|     2. Nutritional Information.                        |\\r\\n|     3. Exit the Ordering System.                       |\\r\\n----------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n-----------------Exit the Ordering System-----------------\\r\\nGoodbye.\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"1\\r\\nLunch\\r\\n1\\r\\nwhat happens here\\r\\nCool, it works!\\r\\nN\\r\\ns\\r\\n3\\r\\n\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"readVerifyYesNo-CAPS\",\"headline\":\"\",\"points\":1,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"----------------------------------------------------------\\r\\n|             FSC Chick-fil-A Ordering System            |\\r\\n----------------------------------------------------------\\r\\n| Please choose from the following menu:                 |\\r\\n|     1. Place a food order.                             |\\r\\n|     2. Nutritional Information.                        |\\r\\n|     3. Exit the Ordering System.                       |\\r\\n----------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n----------------------------------------------------------\\r\\n|                  Placing a Food Order                  |\\r\\n----------------------------------------------------------\\r\\n| Please choose from the following menu:                 |\\r\\n|     Enter \\\"Breakfast\\\" to place a breakfast order       |\\r\\n|     Enter \\\"Lunch\\\" to place a lunch order               |\\r\\n|     Enter \\\"Dinner\\\" to place a dinner order             |\\r\\n|     Or, enter \\\"Return\\\" to return to previous menu      |\\r\\n----------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n--------------------\\u003e   Lunch Menu   \\u003c--------------------\\r\\n    1. Chick-fil-A Chicken Sandwich           $3.49\\r\\n    2. Spicy Chicken Sandwich                 $3.75\\r\\n    3. Grilled Chicken Sandwich               $4.75\\r\\n    4. Waffle Potato Fries                    $1.85\\r\\n    5. Milkshake                              $2.99\\r\\n----------------------------------------------------------\\r\\nEnter your choice (1, 2, 3, 4, or 5): \\r\\n\\r\\nWould you like another item (Y/N): \\r\\n\\r\\n--------------------\\u003e   Lunch Menu   \\u003c--------------------\\r\\n    1. Chick-fil-A Chicken Sandwich           $3.49\\r\\n    2. Spicy Chicken Sandwich                 $3.75\\r\\n    3. Grilled Chicken Sandwich               $4.75\\r\\n    4. Waffle Potato Fries                    $1.85\\r\\n    5. Milkshake                              $2.99\\r\\n----------------------------------------------------------\\r\\nEnter your choice (1, 2, 3, 4, or 5): \\r\\n\\r\\nWould you like another item (Y/N): \\r\\n\\r\\nFlorida Southern College Discount Program:\\r\\n    Enter \\\"s\\\" for Student or \\\"f\\\" for Faculty/Staff.\\r\\nEnter your choice: \\r\\n\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n+                Lunch: Order Number 1946                +\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n+    1. Chick-fil-A Chicken Sandwich           $ 3.49    +\\r\\n+    2. Spicy Chicken Sandwich                 $ 3.75    +\\r\\n+    ------------------------------------------------    + \\r\\n+    Subtotal:                                 $ 7.24    +\\r\\n+    Student Discount:                         $ 2.90    +\\r\\n+    ------------------------------------------------    +\\r\\n+    Total:                                    $ 4.34    +\\r\\n+    ------------------------------------------------    +\\r\\n+                                                        +\\r\\n+         Your order will be ready in 2 minutes.         +\\r\\n+               Thank you for your order!                +\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n\\r\\n----------------------------------------------------------\\r\\n|             FSC Chick-fil-A Ordering System            |\\r\\n----------------------------------------------------------\\r\\n| Please choose from the following menu:                 |\\r\\n|     1. Place a food order.                             |\\r\\n|     2. Nutritional Information.                        |\\r\\n|     3. Exit the Ordering System.                       |\\r\\n----------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n-----------------Exit the Ordering System-----------------\\r\\nGoodbye.\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"1\\r\\nLunch\\r\\n1\\r\\ny\\r\\n2\\r\\nn\\r\\ns\\r\\n3\\r\\n\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"readVerifyDiscountType\",\"headline\":\"\",\"points\":5,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"----------------------------------------------------------\\r\\n|             FSC Chick-fil-A Ordering System            |\\r\\n----------------------------------------------------------\\r\\n| Please choose from the following menu:                 |\\r\\n|     1. Place a food order.                             |\\r\\n|     2. Nutritional Information.                        |\\r\\n|     3. Exit the Ordering System.                       |\\r\\n----------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n----------------------------------------------------------\\r\\n|                  Placing a Food Order                  |\\r\\n----------------------------------------------------------\\r\\n| Please choose from the following menu:                 |\\r\\n|     Enter \\\"Breakfast\\\" to place a breakfast order       |\\r\\n|     Enter \\\"Lunch\\\" to place a lunch order               |\\r\\n|     Enter \\\"Dinner\\\" to place a dinner order             |\\r\\n|     Or, enter \\\"Return\\\" to return to previous menu      |\\r\\n----------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n--------------------\\u003e  Dinner Menu  \\u003c---------------------\\r\\n    1. Chick-fil-A Chicken Sandwich           $3.49\\r\\n    2. Spicy Chicken Sandwich                 $3.75\\r\\n    3. Grilled Chicken Sandwich               $4.75\\r\\n    4. Waffle Potato Fries                    $1.85\\r\\n    5. Milkshake                              $2.99\\r\\n----------------------------------------------------------\\r\\nEnter your choice (1, 2, 3, 4, or 5): \\r\\n\\r\\nWould you like another item (Y/N): \\r\\n\\r\\n--------------------\\u003e  Dinner Menu  \\u003c---------------------\\r\\n    1. Chick-fil-A Chicken Sandwich           $3.49\\r\\n    2. Spicy Chicken Sandwich                 $3.75\\r\\n    3. Grilled Chicken Sandwich               $4.75\\r\\n    4. Waffle Potato Fries                    $1.85\\r\\n    5. Milkshake                              $2.99\\r\\n----------------------------------------------------------\\r\\nEnter your choice (1, 2, 3, 4, or 5): \\r\\n\\r\\nWould you like another item (Y/N): \\r\\n\\r\\nFlorida Southern College Discount Program:\\r\\n    Enter \\\"s\\\" for Student or \\\"f\\\" for Faculty/Staff.\\r\\nEnter your choice: \\r\\n\\r\\n\\u003e You entered an invalid option. Please try again.\\r\\n\\r\\nFlorida Southern College Discount Program:\\r\\n    Enter \\\"s\\\" for Student or \\\"f\\\" for Faculty/Staff.\\r\\nEnter your choice: \\r\\n\\r\\n\\u003e You entered an invalid option. Please try again.\\r\\n\\r\\nFlorida Southern College Discount Program:\\r\\n    Enter \\\"s\\\" for Student or \\\"f\\\" for Faculty/Staff.\\r\\nEnter your choice: \\r\\n\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n+               Dinner: Order Number 1946                +\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n+    1. Chick-fil-A Chicken Sandwich           $ 3.49    +\\r\\n+    2. Milkshake                              $ 2.99    +\\r\\n+    ------------------------------------------------    + \\r\\n+    Subtotal:                                 $ 6.48    +\\r\\n+    Faculty/Staff Discount:                   $ 1.94    +\\r\\n+    ------------------------------------------------    +\\r\\n+    Total:                                    $ 4.54    +\\r\\n+    ------------------------------------------------    +\\r\\n+                                                        +\\r\\n+         Your order will be ready in 2 minutes.         +\\r\\n+               Thank you for your order!                +\\r\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\n\\r\\n----------------------------------------------------------\\r\\n|             FSC Chick-fil-A Ordering System            |\\r\\n----------------------------------------------------------\\r\\n| Please choose from the following menu:                 |\\r\\n|     1. Place a food order.                             |\\r\\n|     2. Nutritional Information.                        |\\r\\n|     3. Exit the Ordering System.                       |\\r\\n----------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n-----------------Exit the Ordering System-----------------\\r\\nGoodbye.\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"1\\r\\nDinner\\r\\n1\\r\\nY\\r\\n5\\r\\nN\\r\\nWhat happens here?\\r\\nCool, this also works!\\r\\nf\\r\\n3\\r\\n\",\"sourceFile\":\"\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"public class Main {\\n\\n    public static void main(String[] args) {\\n        // Prints \\\"Hello, World\\\" to the terminal window.\\n        System.out.println(\\\"Hello, World\\\");\\n    }\\n\\n}\\n\"],\"t\":1614183852000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 21662,
    "title": "TestAssignment",
    "prompt_md": "## Problem Statement\n\nRead an integer n, which tells the user how many integers are to follow, one per line. Sum up those n integers and print the resulting sum.\n\n### Sample Input\n\n```plaintext\n5\n1\n2\n3\n4\n5\n```\n\n### Sample Output\n\n```plaintext\n15\n```",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"public class Main {\\n\\n    public static void main(String[] args) {\\n        \\n    }\\n\\n}\\n\",\"defaultFilePath\":\"\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"stdout\",\"title\":\"tc1\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"15\\r\\n\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"5\\r\\n1\\r\\n2\\r\\n3\\r\\n4\\r\\n5\\r\\n\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"tc2\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"60\\r\\n\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"2\\r\\n10\\r\\n50\\r\\n\",\"sourceFile\":\"\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"import java.util.*;\\n\\npublic class Main {\\n\\n    public static void main(String[] args) {\\n        Scanner in = new Scanner(System.in);\\n\\n        int n = in.nextInt();\\n        int sum = 0;\\n\\n        for (int i = 0; i \\u003c n; i++) {\\n            sum += in.nextInt();\\n        }\\n        \\n        System.out.println(sum);\\n    }\\n\\n}\\n\",\"defaultFilePath\":\"\",\"extraFiles\":{}}},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"public class Main {\\n\\n    public static void main(String[] args) {\\n        // Prints \\\"Hello, World\\\" to the terminal window.\\n        System.out.println(\\\"Hello, World\\\");\\n    }\\n\\n}\\n\"],\"t\":1614343524000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 22433,
    "title": "Program 2",
    "prompt_md": "### Important comments on your submission of Program 2\n\nYou Must submit your program at two locations:\n\n1.  Most important is that you submit your Program on Canvas.\n2.  You must **also** submit your solution here and pass the test cases.\n\n**Simply copy/paste your code into the submission window…BUT do make sure you ERASE the “package” and change the class name to Main.**\n\n\\*\\*\\*There are many test cases. So be patient when you click submit…it may take a minute to show the results of your submission.",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"// ******* IMPORTANT: READ THE 3 POITNS BELOW *******\\n// 1. PASTE your solution below...just copy/paste from NetBeans\\n// 2. Do DELETE the package line (package fsc_chickfila;)\\n// 3. Do make sure your class name is Main, as in...\\n\\n\\n// PLEASE...READ the above three points carefully.\\n// Some of you were unable to get results from Coding Rooms ONLY because you. did. not. read.\\n\\n// COPY/PASTE your entire netbeans code into this window, then delete the package,\\n// and then rename your class to Main with a CAPITAL \\\"M\\\"...Main\\n\\n\\n\",\"defaultFilePath\":\"\",\"defaultFileType\":\"\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"stdout\",\"title\":\"Valid Main Input\",\"headline\":\"\",\"points\":3,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"---------------------------------------------------------------------\\n|                           FSC Gradebook                           |\\n---------------------------------------------------------------------\\n| Please choose from the following menu:                            |\\n|     1. Add a student record                                       |\\n|     2. Search for a student by ID number                          |\\n|     3. Search for a student by name                               |\\n|     4. Display all student records                                |\\n|     5. Display statistics                                         |\\n|     6. Quit                                                       |\\n---------------------------------------------------------------------\\n\\u003e Enter your choice: \\n\\nInvalid choice. Please try again.\\n\\n---------------------------------------------------------------------\\n|                           FSC Gradebook                           |\\n---------------------------------------------------------------------\\n| Please choose from the following menu:                            |\\n|     1. Add a student record                                       |\\n|     2. Search for a student by ID number                          |\\n|     3. Search for a student by name                               |\\n|     4. Display all student records                                |\\n|     5. Display statistics                                         |\\n|     6. Quit                                                       |\\n---------------------------------------------------------------------\\n\\u003e Enter your choice: \\n\\nThank you for using the FSC Gradebook\\n\\nGoodbye!\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"make sure this does not crash your program\\n6\\n\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"Main Menu - Wrong Numbers\",\"headline\":\"\",\"points\":2,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"---------------------------------------------------------------------\\r\\n|                           FSC Gradebook                           |\\r\\n---------------------------------------------------------------------\\r\\n| Please choose from the following menu:                            |\\r\\n|     1. Add a student record                                       |\\r\\n|     2. Search for a student by ID number                          |\\r\\n|     3. Search for a student by name                               |\\r\\n|     4. Display all student records                                |\\r\\n|     5. Display statistics                                         |\\r\\n|     6. Quit                                                       |\\r\\n---------------------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\nInvalid choice. Please try again.\\r\\n\\r\\n---------------------------------------------------------------------\\r\\n|                           FSC Gradebook                           |\\r\\n---------------------------------------------------------------------\\r\\n| Please choose from the following menu:                            |\\r\\n|     1. Add a student record                                       |\\r\\n|     2. Search for a student by ID number                          |\\r\\n|     3. Search for a student by name                               |\\r\\n|     4. Display all student records                                |\\r\\n|     5. Display statistics                                         |\\r\\n|     6. Quit                                                       |\\r\\n---------------------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\nInvalid choice. Please try again.\\r\\n\\r\\n---------------------------------------------------------------------\\r\\n|                           FSC Gradebook                           |\\r\\n---------------------------------------------------------------------\\r\\n| Please choose from the following menu:                            |\\r\\n|     1. Add a student record                                       |\\r\\n|     2. Search for a student by ID number                          |\\r\\n|     3. Search for a student by name                               |\\r\\n|     4. Display all student records                                |\\r\\n|     5. Display statistics                                         |\\r\\n|     6. Quit                                                       |\\r\\n---------------------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\nThank you for using the FSC Gradebook\\r\\n\\r\\nGoodbye!\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"0\\r\\n7\\r\\n6\\r\\n\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"2-3-4-5 Before Adding\",\"headline\":\"\",\"points\":5,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"---------------------------------------------------------------------\\n|                           FSC Gradebook                           |\\n---------------------------------------------------------------------\\n| Please choose from the following menu:                            |\\n|     1. Add a student record                                       |\\n|     2. Search for a student by ID number                          |\\n|     3. Search for a student by name                               |\\n|     4. Display all student records                                |\\n|     5. Display statistics                                         |\\n|     6. Quit                                                       |\\n---------------------------------------------------------------------\\n\\u003e Enter your choice: \\n\\n***Searching by Student ID***\\n   There are currently no students in the FSC Grade Book.\\n\\n---------------------------------------------------------------------\\n|                           FSC Gradebook                           |\\n---------------------------------------------------------------------\\n| Please choose from the following menu:                            |\\n|     1. Add a student record                                       |\\n|     2. Search for a student by ID number                          |\\n|     3. Search for a student by name                               |\\n|     4. Display all student records                                |\\n|     5. Display statistics                                         |\\n|     6. Quit                                                       |\\n---------------------------------------------------------------------\\n\\u003e Enter your choice: \\n\\n***Searching by Student Name***\\n   There are currently no students in the FSC Grade Book.\\n\\n---------------------------------------------------------------------\\n|                           FSC Gradebook                           |\\n---------------------------------------------------------------------\\n| Please choose from the following menu:                            |\\n|     1. Add a student record                                       |\\n|     2. Search for a student by ID number                          |\\n|     3. Search for a student by name                               |\\n|     4. Display all student records                                |\\n|     5. Display statistics                                         |\\n|     6. Quit                                                       |\\n---------------------------------------------------------------------\\n\\u003e Enter your choice: \\n\\n***Displaying ALL Students***\\n   There are currently no students in the FSC Grade Book.\\n\\n---------------------------------------------------------------------\\n|                           FSC Gradebook                           |\\n---------------------------------------------------------------------\\n| Please choose from the following menu:                            |\\n|     1. Add a student record                                       |\\n|     2. Search for a student by ID number                          |\\n|     3. Search for a student by name                               |\\n|     4. Display all student records                                |\\n|     5. Display statistics                                         |\\n|     6. Quit                                                       |\\n---------------------------------------------------------------------\\n\\u003e Enter your choice: \\n\\n***Displaying Statistics***\\n   There are currently no students in the FSC Grade Book.\\n\\n---------------------------------------------------------------------\\n|                           FSC Gradebook                           |\\n---------------------------------------------------------------------\\n| Please choose from the following menu:                            |\\n|     1. Add a student record                                       |\\n|     2. Search for a student by ID number                          |\\n|     3. Search for a student by name                               |\\n|     4. Display all student records                                |\\n|     5. Display statistics                                         |\\n|     6. Quit                                                       |\\n---------------------------------------------------------------------\\n\\u003e Enter your choice: \\n\\nThank you for using the FSC Gradebook\\n\\nGoodbye!\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"2\\n3\\n4\\n5\\n6\\n\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"readAndVerifyID - Line Input\",\"headline\":\"\",\"points\":5,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"---------------------------------------------------------------------\\r\\n|                           FSC Gradebook                           |\\r\\n---------------------------------------------------------------------\\r\\n| Please choose from the following menu:                            |\\r\\n|     1. Add a student record                                       |\\r\\n|     2. Search for a student by ID number                          |\\r\\n|     3. Search for a student by name                               |\\r\\n|     4. Display all student records                                |\\r\\n|     5. Display statistics                                         |\\r\\n|     6. Quit                                                       |\\r\\n---------------------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n***Adding a Student Record***\\r\\n   Enter the student's ID Number: \\r\\n\\r\\n   Invalid input. Please try again.\\r\\n\\r\\n   Enter the student's ID Number: \\r\\n   Enter the student's First Name: \\r\\n   Enter the student's Last Name: \\r\\n   Enter the student's grade for Exam 1: \\r\\n   Enter the student's grade for Exam 2: \\r\\n   Enter the student's grade for Exam 3: \\r\\n\\r\\n   ---Add SUCCESS---\\r\\n   a a (ID# 1) has been added to the FSC Grade Book.\\r\\n   Final Grade: 100.00 (A)\\r\\n\\r\\n---------------------------------------------------------------------\\r\\n|                           FSC Gradebook                           |\\r\\n---------------------------------------------------------------------\\r\\n| Please choose from the following menu:                            |\\r\\n|     1. Add a student record                                       |\\r\\n|     2. Search for a student by ID number                          |\\r\\n|     3. Search for a student by name                               |\\r\\n|     4. Display all student records                                |\\r\\n|     5. Display statistics                                         |\\r\\n|     6. Quit                                                       |\\r\\n---------------------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\nThank you for using the FSC Gradebook\\r\\n\\r\\nGoodbye!\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"1\\r\\nmake sure this doesn't cause a crash\\r\\n1\\r\\na\\r\\na\\r\\n100\\r\\n100\\r\\n100\\r\\n6\\r\\n\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"readAndVerifyGrade\",\"headline\":\"\",\"points\":10,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"---------------------------------------------------------------------\\n|                           FSC Gradebook                           |\\n---------------------------------------------------------------------\\n| Please choose from the following menu:                            |\\n|     1. Add a student record                                       |\\n|     2. Search for a student by ID number                          |\\n|     3. Search for a student by name                               |\\n|     4. Display all student records                                |\\n|     5. Display statistics                                         |\\n|     6. Quit                                                       |\\n---------------------------------------------------------------------\\n\\u003e Enter your choice: \\n\\n***Adding a Student Record***\\n   Enter the student's ID Number: \\n   Enter the student's First Name: \\n   Enter the student's Last Name: \\n   Enter the student's grade for Exam 1: \\n\\n   Invalid input. Please try again.\\n\\n   Enter the student's grade for Exam 1: \\n\\n   Invalid input. Please try again.\\n\\n   Enter the student's grade for Exam 1: \\n\\n   Invalid input. Please try again.\\n\\n   Enter the student's grade for Exam 1: \\n   Enter the student's grade for Exam 2: \\n\\n   Invalid input. Please try again.\\n\\n   Enter the student's grade for Exam 2: \\n\\n   Invalid input. Please try again.\\n\\n   Enter the student's grade for Exam 2: \\n   Enter the student's grade for Exam 3: \\n\\n   Invalid input. Please try again.\\n\\n   Enter the student's grade for Exam 3: \\n\\n   Invalid input. Please try again.\\n\\n   Enter the student's grade for Exam 3: \\n\\n   Invalid input. Please try again.\\n\\n   Enter the student's grade for Exam 3: \\n\\n   ---Add SUCCESS---\\n   a a (ID# 111) has been added to the FSC Grade Book.\\n   Final Grade: 89.20 (B)\\n\\n---------------------------------------------------------------------\\n|                           FSC Gradebook                           |\\n---------------------------------------------------------------------\\n| Please choose from the following menu:                            |\\n|     1. Add a student record                                       |\\n|     2. Search for a student by ID number                          |\\n|     3. Search for a student by name                               |\\n|     4. Display all student records                                |\\n|     5. Display statistics                                         |\\n|     6. Quit                                                       |\\n---------------------------------------------------------------------\\n\\u003e Enter your choice: \\n\\nThank you for using the FSC Gradebook\\n\\nGoodbye!\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"1\\n111\\na\\na\\nmake sure this doesn't cause a crash\\n-1\\n121\\n120\\ntesting again\\n-1\\n120\\nand one final time\\n-1\\n121\\n43\\n6\\n\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"SearchByID - validateID\",\"headline\":\"\",\"points\":5,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"---------------------------------------------------------------------\\n|                           FSC Gradebook                           |\\n---------------------------------------------------------------------\\n| Please choose from the following menu:                            |\\n|     1. Add a student record                                       |\\n|     2. Search for a student by ID number                          |\\n|     3. Search for a student by name                               |\\n|     4. Display all student records                                |\\n|     5. Display statistics                                         |\\n|     6. Quit                                                       |\\n---------------------------------------------------------------------\\n\\u003e Enter your choice: \\n\\n***Adding a Student Record***\\n   Enter the student's ID Number: \\n   Enter the student's First Name: \\n   Enter the student's Last Name: \\n   Enter the student's grade for Exam 1: \\n   Enter the student's grade for Exam 2: \\n   Enter the student's grade for Exam 3: \\n\\n   ---Add SUCCESS---\\n   a a (ID# 111) has been added to the FSC Grade Book.\\n   Final Grade: 100.00 (A)\\n\\n---------------------------------------------------------------------\\n|                           FSC Gradebook                           |\\n---------------------------------------------------------------------\\n| Please choose from the following menu:                            |\\n|     1. Add a student record                                       |\\n|     2. Search for a student by ID number                          |\\n|     3. Search for a student by name                               |\\n|     4. Display all student records                                |\\n|     5. Display statistics                                         |\\n|     6. Quit                                                       |\\n---------------------------------------------------------------------\\n\\u003e Enter your choice: \\n\\n***Searching by Student ID***\\n   Enter the student's ID Number: \\n\\n   Invalid input. Please try again.\\n\\n   Enter the student's ID Number: \\n\\n   Invalid input. Please try again.\\n\\n   Enter the student's ID Number: \\n   The entered student ID was not found in the system.\\n\\n---------------------------------------------------------------------\\n|                           FSC Gradebook                           |\\n---------------------------------------------------------------------\\n| Please choose from the following menu:                            |\\n|     1. Add a student record                                       |\\n|     2. Search for a student by ID number                          |\\n|     3. Search for a student by name                               |\\n|     4. Display all student records                                |\\n|     5. Display statistics                                         |\\n|     6. Quit                                                       |\\n---------------------------------------------------------------------\\n\\u003e Enter your choice: \\n\\n***Searching by Student ID***\\n   Enter the student's ID Number: \\n   Student Record for A A (ID # 111):\\n      Exam 1:       100\\n      Exam 2:       100\\n      Exam 3:       100\\n      Final Grade:  100.00\\n      Letter Grade: A\\n\\n---------------------------------------------------------------------\\n|                           FSC Gradebook                           |\\n---------------------------------------------------------------------\\n| Please choose from the following menu:                            |\\n|     1. Add a student record                                       |\\n|     2. Search for a student by ID number                          |\\n|     3. Search for a student by name                               |\\n|     4. Display all student records                                |\\n|     5. Display statistics                                         |\\n|     6. Quit                                                       |\\n---------------------------------------------------------------------\\n\\u003e Enter your choice: \\n\\nThank you for using the FSC Gradebook\\n\\nGoodbye!\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"1\\n111\\na\\na\\n100\\n100\\n100\\n2\\nmake sure this doesn't crash the program\\n1234567891\\n222\\n2\\n111\\n6\\n\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"5 Students Added\",\"headline\":\"\",\"points\":25,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"---------------------------------------------------------------------\\r\\n|                           FSC Gradebook                           |\\r\\n---------------------------------------------------------------------\\r\\n| Please choose from the following menu:                            |\\r\\n|     1. Add a student record                                       |\\r\\n|     2. Search for a student by ID number                          |\\r\\n|     3. Search for a student by name                               |\\r\\n|     4. Display all student records                                |\\r\\n|     5. Display statistics                                         |\\r\\n|     6. Quit                                                       |\\r\\n---------------------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n***Adding a Student Record***\\r\\n   Enter the student's ID Number: \\r\\n   Enter the student's First Name: \\r\\n   Enter the student's Last Name: \\r\\n   Enter the student's grade for Exam 1: \\r\\n   Enter the student's grade for Exam 2: \\r\\n   Enter the student's grade for Exam 3: \\r\\n\\r\\n   ---Add SUCCESS---\\r\\n   a a (ID# 111) has been added to the FSC Grade Book.\\r\\n   Final Grade: 94.30 (A)\\r\\n\\r\\n---------------------------------------------------------------------\\r\\n|                           FSC Gradebook                           |\\r\\n---------------------------------------------------------------------\\r\\n| Please choose from the following menu:                            |\\r\\n|     1. Add a student record                                       |\\r\\n|     2. Search for a student by ID number                          |\\r\\n|     3. Search for a student by name                               |\\r\\n|     4. Display all student records                                |\\r\\n|     5. Display statistics                                         |\\r\\n|     6. Quit                                                       |\\r\\n---------------------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n***Adding a Student Record***\\r\\n   Enter the student's ID Number: \\r\\n   Enter the student's First Name: \\r\\n   Enter the student's Last Name: \\r\\n   Enter the student's grade for Exam 1: \\r\\n   Enter the student's grade for Exam 2: \\r\\n   Enter the student's grade for Exam 3: \\r\\n\\r\\n   ---Add SUCCESS---\\r\\n   b b (ID# 222) has been added to the FSC Grade Book.\\r\\n   Final Grade: 85.30 (B)\\r\\n\\r\\n---------------------------------------------------------------------\\r\\n|                           FSC Gradebook                           |\\r\\n---------------------------------------------------------------------\\r\\n| Please choose from the following menu:                            |\\r\\n|     1. Add a student record                                       |\\r\\n|     2. Search for a student by ID number                          |\\r\\n|     3. Search for a student by name                               |\\r\\n|     4. Display all student records                                |\\r\\n|     5. Display statistics                                         |\\r\\n|     6. Quit                                                       |\\r\\n---------------------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n***Adding a Student Record***\\r\\n   Enter the student's ID Number: \\r\\n   Enter the student's First Name: \\r\\n   Enter the student's Last Name: \\r\\n   Enter the student's grade for Exam 1: \\r\\n   Enter the student's grade for Exam 2: \\r\\n   Enter the student's grade for Exam 3: \\r\\n\\r\\n   ---Add SUCCESS---\\r\\n   c c (ID# 333) has been added to the FSC Grade Book.\\r\\n   Final Grade: 75.90 (C)\\r\\n\\r\\n---------------------------------------------------------------------\\r\\n|                           FSC Gradebook                           |\\r\\n---------------------------------------------------------------------\\r\\n| Please choose from the following menu:                            |\\r\\n|     1. Add a student record                                       |\\r\\n|     2. Search for a student by ID number                          |\\r\\n|     3. Search for a student by name                               |\\r\\n|     4. Display all student records                                |\\r\\n|     5. Display statistics                                         |\\r\\n|     6. Quit                                                       |\\r\\n---------------------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n***Adding a Student Record***\\r\\n   Enter the student's ID Number: \\r\\n   Enter the student's First Name: \\r\\n   Enter the student's Last Name: \\r\\n   Enter the student's grade for Exam 1: \\r\\n   Enter the student's grade for Exam 2: \\r\\n   Enter the student's grade for Exam 3: \\r\\n\\r\\n   ---Add SUCCESS---\\r\\n   d d (ID# 444) has been added to the FSC Grade Book.\\r\\n   Final Grade: 65.90 (D)\\r\\n\\r\\n---------------------------------------------------------------------\\r\\n|                           FSC Gradebook                           |\\r\\n---------------------------------------------------------------------\\r\\n| Please choose from the following menu:                            |\\r\\n|     1. Add a student record                                       |\\r\\n|     2. Search for a student by ID number                          |\\r\\n|     3. Search for a student by name                               |\\r\\n|     4. Display all student records                                |\\r\\n|     5. Display statistics                                         |\\r\\n|     6. Quit                                                       |\\r\\n---------------------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n***Adding a Student Record***\\r\\n   Enter the student's ID Number: \\r\\n   Enter the student's First Name: \\r\\n   Enter the student's Last Name: \\r\\n   Enter the student's grade for Exam 1: \\r\\n   Enter the student's grade for Exam 2: \\r\\n   Enter the student's grade for Exam 3: \\r\\n\\r\\n   ---Add SUCCESS---\\r\\n   f f (ID# 555) has been added to the FSC Grade Book.\\r\\n   Final Grade: 54.80 (F)\\r\\n\\r\\n---------------------------------------------------------------------\\r\\n|                           FSC Gradebook                           |\\r\\n---------------------------------------------------------------------\\r\\n| Please choose from the following menu:                            |\\r\\n|     1. Add a student record                                       |\\r\\n|     2. Search for a student by ID number                          |\\r\\n|     3. Search for a student by name                               |\\r\\n|     4. Display all student records                                |\\r\\n|     5. Display statistics                                         |\\r\\n|     6. Quit                                                       |\\r\\n---------------------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n***Displaying Statistics***\\r\\n   Total number of student records: 5\\r\\n   Average Grade: 75.24\\r\\n   Highest Grade: 94.30\\r\\n   Lowest Grade:  54.80\\r\\n   Total 'A' Grades:  1  ( 20.00% of class)\\r\\n   Total 'B' Grades:  1  ( 20.00% of class)\\r\\n   Total 'C' Grades:  1  ( 20.00% of class)\\r\\n   Total 'D' Grades:  1  ( 20.00% of class)\\r\\n   Total 'F' Grades:  1  ( 20.00% of class)\\r\\n\\r\\n---------------------------------------------------------------------\\r\\n|                           FSC Gradebook                           |\\r\\n---------------------------------------------------------------------\\r\\n| Please choose from the following menu:                            |\\r\\n|     1. Add a student record                                       |\\r\\n|     2. Search for a student by ID number                          |\\r\\n|     3. Search for a student by name                               |\\r\\n|     4. Display all student records                                |\\r\\n|     5. Display statistics                                         |\\r\\n|     6. Quit                                                       |\\r\\n---------------------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n***Displaying ALL Students***\\r\\n   Student Record for A A (ID # 111):\\r\\n      Exam 1:       98\\r\\n      Exam 2:       91\\r\\n      Exam 3:       94\\r\\n      Final Grade:  94.30\\r\\n      Letter Grade: A\\r\\n   Student Record for B B (ID # 222):\\r\\n      Exam 1:       87\\r\\n      Exam 2:       88\\r\\n      Exam 3:       82\\r\\n      Final Grade:  85.30\\r\\n      Letter Grade: B\\r\\n   Student Record for C C (ID # 333):\\r\\n      Exam 1:       70\\r\\n      Exam 2:       79\\r\\n      Exam 3:       78\\r\\n      Final Grade:  75.90\\r\\n      Letter Grade: C\\r\\n   Student Record for D D (ID # 444):\\r\\n      Exam 1:       67\\r\\n      Exam 2:       62\\r\\n      Exam 3:       68\\r\\n      Final Grade:  65.90\\r\\n      Letter Grade: D\\r\\n   Student Record for F F (ID # 555):\\r\\n      Exam 1:       28\\r\\n      Exam 2:       76\\r\\n      Exam 3:       59\\r\\n      Final Grade:  54.80\\r\\n      Letter Grade: F\\r\\n\\r\\n---------------------------------------------------------------------\\r\\n|                           FSC Gradebook                           |\\r\\n---------------------------------------------------------------------\\r\\n| Please choose from the following menu:                            |\\r\\n|     1. Add a student record                                       |\\r\\n|     2. Search for a student by ID number                          |\\r\\n|     3. Search for a student by name                               |\\r\\n|     4. Display all student records                                |\\r\\n|     5. Display statistics                                         |\\r\\n|     6. Quit                                                       |\\r\\n---------------------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n***Searching by Student ID***\\r\\n   Enter the student's ID Number: \\r\\n   Student Record for F F (ID # 555):\\r\\n      Exam 1:       28\\r\\n      Exam 2:       76\\r\\n      Exam 3:       59\\r\\n      Final Grade:  54.80\\r\\n      Letter Grade: F\\r\\n\\r\\n---------------------------------------------------------------------\\r\\n|                           FSC Gradebook                           |\\r\\n---------------------------------------------------------------------\\r\\n| Please choose from the following menu:                            |\\r\\n|     1. Add a student record                                       |\\r\\n|     2. Search for a student by ID number                          |\\r\\n|     3. Search for a student by name                               |\\r\\n|     4. Display all student records                                |\\r\\n|     5. Display statistics                                         |\\r\\n|     6. Quit                                                       |\\r\\n---------------------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n***Searching by Student ID***\\r\\n   Enter the student's ID Number: \\r\\n   Student Record for C C (ID # 333):\\r\\n      Exam 1:       70\\r\\n      Exam 2:       79\\r\\n      Exam 3:       78\\r\\n      Final Grade:  75.90\\r\\n      Letter Grade: C\\r\\n\\r\\n---------------------------------------------------------------------\\r\\n|                           FSC Gradebook                           |\\r\\n---------------------------------------------------------------------\\r\\n| Please choose from the following menu:                            |\\r\\n|     1. Add a student record                                       |\\r\\n|     2. Search for a student by ID number                          |\\r\\n|     3. Search for a student by name                               |\\r\\n|     4. Display all student records                                |\\r\\n|     5. Display statistics                                         |\\r\\n|     6. Quit                                                       |\\r\\n---------------------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n***Searching by Student Name***\\r\\n   Enter the student first name: \\r\\n   Enter the student last name: \\r\\n   Student Record for D D (ID # 444):\\r\\n      Exam 1:       67\\r\\n      Exam 2:       62\\r\\n      Exam 3:       68\\r\\n      Final Grade:  65.90\\r\\n      Letter Grade: D\\r\\n\\r\\n---------------------------------------------------------------------\\r\\n|                           FSC Gradebook                           |\\r\\n---------------------------------------------------------------------\\r\\n| Please choose from the following menu:                            |\\r\\n|     1. Add a student record                                       |\\r\\n|     2. Search for a student by ID number                          |\\r\\n|     3. Search for a student by name                               |\\r\\n|     4. Display all student records                                |\\r\\n|     5. Display statistics                                         |\\r\\n|     6. Quit                                                       |\\r\\n---------------------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n***Searching by Student Name***\\r\\n   Enter the student first name: \\r\\n   Enter the student last name: \\r\\n   Student Record for B B (ID # 222):\\r\\n      Exam 1:       87\\r\\n      Exam 2:       88\\r\\n      Exam 3:       82\\r\\n      Final Grade:  85.30\\r\\n      Letter Grade: B\\r\\n\\r\\n---------------------------------------------------------------------\\r\\n|                           FSC Gradebook                           |\\r\\n---------------------------------------------------------------------\\r\\n| Please choose from the following menu:                            |\\r\\n|     1. Add a student record                                       |\\r\\n|     2. Search for a student by ID number                          |\\r\\n|     3. Search for a student by name                               |\\r\\n|     4. Display all student records                                |\\r\\n|     5. Display statistics                                         |\\r\\n|     6. Quit                                                       |\\r\\n---------------------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n***Searching by Student ID***\\r\\n   Enter the student's ID Number: \\r\\n   Student Record for A A (ID # 111):\\r\\n      Exam 1:       98\\r\\n      Exam 2:       91\\r\\n      Exam 3:       94\\r\\n      Final Grade:  94.30\\r\\n      Letter Grade: A\\r\\n\\r\\n---------------------------------------------------------------------\\r\\n|                           FSC Gradebook                           |\\r\\n---------------------------------------------------------------------\\r\\n| Please choose from the following menu:                            |\\r\\n|     1. Add a student record                                       |\\r\\n|     2. Search for a student by ID number                          |\\r\\n|     3. Search for a student by name                               |\\r\\n|     4. Display all student records                                |\\r\\n|     5. Display statistics                                         |\\r\\n|     6. Quit                                                       |\\r\\n---------------------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\nThank you for using the FSC Gradebook\\r\\n\\r\\nGoodbye!\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"1\\r\\n111\\r\\na\\r\\na\\r\\n98\\r\\n91\\r\\n94\\r\\n1\\r\\n222\\r\\nb\\r\\nb\\r\\n87\\r\\n88\\r\\n82\\r\\n1\\r\\n333\\r\\nc\\r\\nc\\r\\n70\\r\\n79\\r\\n78\\r\\n1\\r\\n444\\r\\nd\\r\\nd\\r\\n67\\r\\n62\\r\\n68\\r\\n1\\r\\n555\\r\\nf\\r\\nf\\r\\n28\\r\\n76\\r\\n59\\r\\n5\\r\\n4\\r\\n2\\r\\n555\\r\\n2\\r\\n333\\r\\n3\\r\\nd\\r\\nd\\r\\n3\\r\\nb\\r\\nb\\r\\n2\\r\\n111\\r\\n6\\r\\n\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"Comprehensive Run\",\"headline\":\"\",\"points\":35,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"---------------------------------------------------------------------\\n|                           FSC Gradebook                           |\\n---------------------------------------------------------------------\\n| Please choose from the following menu:                            |\\n|     1. Add a student record                                       |\\n|     2. Search for a student by ID number                          |\\n|     3. Search for a student by name                               |\\n|     4. Display all student records                                |\\n|     5. Display statistics                                         |\\n|     6. Quit                                                       |\\n---------------------------------------------------------------------\\n\\u003e Enter your choice: \\n\\n***Adding a Student Record***\\n   Enter the student's ID Number: \\n   Enter the student's First Name: \\n   Enter the student's Last Name: \\n   Enter the student's grade for Exam 1: \\n   Enter the student's grade for Exam 2: \\n   Enter the student's grade for Exam 3: \\n\\n   ---Add SUCCESS---\\n   a a (ID# 111) has been added to the FSC Grade Book.\\n   Final Grade: 100.00 (A)\\n\\n---------------------------------------------------------------------\\n|                           FSC Gradebook                           |\\n---------------------------------------------------------------------\\n| Please choose from the following menu:                            |\\n|     1. Add a student record                                       |\\n|     2. Search for a student by ID number                          |\\n|     3. Search for a student by name                               |\\n|     4. Display all student records                                |\\n|     5. Display statistics                                         |\\n|     6. Quit                                                       |\\n---------------------------------------------------------------------\\n\\u003e Enter your choice: \\n\\n***Adding a Student Record***\\n   Enter the student's ID Number: \\n   Enter the student's First Name: \\n   Enter the student's Last Name: \\n   Enter the student's grade for Exam 1: \\n   Enter the student's grade for Exam 2: \\n   Enter the student's grade for Exam 3: \\n\\n   ---Add SUCCESS---\\n   aa aa (ID# 222) has been added to the FSC Grade Book.\\n   Final Grade: 100.00 (A)\\n\\n---------------------------------------------------------------------\\n|                           FSC Gradebook                           |\\n---------------------------------------------------------------------\\n| Please choose from the following menu:                            |\\n|     1. Add a student record                                       |\\n|     2. Search for a student by ID number                          |\\n|     3. Search for a student by name                               |\\n|     4. Display all student records                                |\\n|     5. Display statistics                                         |\\n|     6. Quit                                                       |\\n---------------------------------------------------------------------\\n\\u003e Enter your choice: \\n\\n***Displaying Statistics***\\n   Total number of student records: 2\\n   Average Grade: 100.00\\n   Highest Grade: 100.00\\n   Lowest Grade:  100.00\\n   Total 'A' Grades:  2  (100.00% of class)\\n   Total 'B' Grades:  0  (  0.00% of class)\\n   Total 'C' Grades:  0  (  0.00% of class)\\n   Total 'D' Grades:  0  (  0.00% of class)\\n   Total 'F' Grades:  0  (  0.00% of class)\\n\\n---------------------------------------------------------------------\\n|                           FSC Gradebook                           |\\n---------------------------------------------------------------------\\n| Please choose from the following menu:                            |\\n|     1. Add a student record                                       |\\n|     2. Search for a student by ID number                          |\\n|     3. Search for a student by name                               |\\n|     4. Display all student records                                |\\n|     5. Display statistics                                         |\\n|     6. Quit                                                       |\\n---------------------------------------------------------------------\\n\\u003e Enter your choice: \\n\\n***Displaying ALL Students***\\n   Student Record for A A (ID # 111):\\n      Exam 1:       100\\n      Exam 2:       100\\n      Exam 3:       100\\n      Final Grade:  100.00\\n      Letter Grade: A\\n   Student Record for AA AA (ID # 222):\\n      Exam 1:       100\\n      Exam 2:       100\\n      Exam 3:       100\\n      Final Grade:  100.00\\n      Letter Grade: A\\n\\n---------------------------------------------------------------------\\n|                           FSC Gradebook                           |\\n---------------------------------------------------------------------\\n| Please choose from the following menu:                            |\\n|     1. Add a student record                                       |\\n|     2. Search for a student by ID number                          |\\n|     3. Search for a student by name                               |\\n|     4. Display all student records                                |\\n|     5. Display statistics                                         |\\n|     6. Quit                                                       |\\n---------------------------------------------------------------------\\n\\u003e Enter your choice: \\n\\n***Adding a Student Record***\\n   Enter the student's ID Number: \\n   Enter the student's First Name: \\n   Enter the student's Last Name: \\n   Enter the student's grade for Exam 1: \\n   Enter the student's grade for Exam 2: \\n   Enter the student's grade for Exam 3: \\n\\n   ---Add SUCCESS---\\n   b b (ID# 333) has been added to the FSC Grade Book.\\n   Final Grade: 86.60 (B)\\n\\n---------------------------------------------------------------------\\n|                           FSC Gradebook                           |\\n---------------------------------------------------------------------\\n| Please choose from the following menu:                            |\\n|     1. Add a student record                                       |\\n|     2. Search for a student by ID number                          |\\n|     3. Search for a student by name                               |\\n|     4. Display all student records                                |\\n|     5. Display statistics                                         |\\n|     6. Quit                                                       |\\n---------------------------------------------------------------------\\n\\u003e Enter your choice: \\n\\n***Displaying Statistics***\\n   Total number of student records: 3\\n   Average Grade: 95.53\\n   Highest Grade: 100.00\\n   Lowest Grade:  86.60\\n   Total 'A' Grades:  2  ( 66.67% of class)\\n   Total 'B' Grades:  1  ( 33.33% of class)\\n   Total 'C' Grades:  0  (  0.00% of class)\\n   Total 'D' Grades:  0  (  0.00% of class)\\n   Total 'F' Grades:  0  (  0.00% of class)\\n\\n---------------------------------------------------------------------\\n|                           FSC Gradebook                           |\\n---------------------------------------------------------------------\\n| Please choose from the following menu:                            |\\n|     1. Add a student record                                       |\\n|     2. Search for a student by ID number                          |\\n|     3. Search for a student by name                               |\\n|     4. Display all student records                                |\\n|     5. Display statistics                                         |\\n|     6. Quit                                                       |\\n---------------------------------------------------------------------\\n\\u003e Enter your choice: \\n\\n***Displaying ALL Students***\\n   Student Record for A A (ID # 111):\\n      Exam 1:       100\\n      Exam 2:       100\\n      Exam 3:       100\\n      Final Grade:  100.00\\n      Letter Grade: A\\n   Student Record for AA AA (ID # 222):\\n      Exam 1:       100\\n      Exam 2:       100\\n      Exam 3:       100\\n      Final Grade:  100.00\\n      Letter Grade: A\\n   Student Record for B B (ID # 333):\\n      Exam 1:       87\\n      Exam 2:       87\\n      Exam 3:       86\\n      Final Grade:  86.60\\n      Letter Grade: B\\n\\n---------------------------------------------------------------------\\n|                           FSC Gradebook                           |\\n---------------------------------------------------------------------\\n| Please choose from the following menu:                            |\\n|     1. Add a student record                                       |\\n|     2. Search for a student by ID number                          |\\n|     3. Search for a student by name                               |\\n|     4. Display all student records                                |\\n|     5. Display statistics                                         |\\n|     6. Quit                                                       |\\n---------------------------------------------------------------------\\n\\u003e Enter your choice: \\n\\n***Adding a Student Record***\\n   Enter the student's ID Number: \\n   Enter the student's First Name: \\n   Enter the student's Last Name: \\n   Enter the student's grade for Exam 1: \\n   Enter the student's grade for Exam 2: \\n   Enter the student's grade for Exam 3: \\n\\n   ---Add SUCCESS---\\n   c c (ID# 444) has been added to the FSC Grade Book.\\n   Final Grade: 72.90 (C)\\n\\n---------------------------------------------------------------------\\n|                           FSC Gradebook                           |\\n---------------------------------------------------------------------\\n| Please choose from the following menu:                            |\\n|     1. Add a student record                                       |\\n|     2. Search for a student by ID number                          |\\n|     3. Search for a student by name                               |\\n|     4. Display all student records                                |\\n|     5. Display statistics                                         |\\n|     6. Quit                                                       |\\n---------------------------------------------------------------------\\n\\u003e Enter your choice: \\n\\n***Displaying Statistics***\\n   Total number of student records: 4\\n   Average Grade: 89.88\\n   Highest Grade: 100.00\\n   Lowest Grade:  72.90\\n   Total 'A' Grades:  2  ( 50.00% of class)\\n   Total 'B' Grades:  1  ( 25.00% of class)\\n   Total 'C' Grades:  1  ( 25.00% of class)\\n   Total 'D' Grades:  0  (  0.00% of class)\\n   Total 'F' Grades:  0  (  0.00% of class)\\n\\n---------------------------------------------------------------------\\n|                           FSC Gradebook                           |\\n---------------------------------------------------------------------\\n| Please choose from the following menu:                            |\\n|     1. Add a student record                                       |\\n|     2. Search for a student by ID number                          |\\n|     3. Search for a student by name                               |\\n|     4. Display all student records                                |\\n|     5. Display statistics                                         |\\n|     6. Quit                                                       |\\n---------------------------------------------------------------------\\n\\u003e Enter your choice: \\n\\n***Displaying ALL Students***\\n   Student Record for A A (ID # 111):\\n      Exam 1:       100\\n      Exam 2:       100\\n      Exam 3:       100\\n      Final Grade:  100.00\\n      Letter Grade: A\\n   Student Record for AA AA (ID # 222):\\n      Exam 1:       100\\n      Exam 2:       100\\n      Exam 3:       100\\n      Final Grade:  100.00\\n      Letter Grade: A\\n   Student Record for B B (ID # 333):\\n      Exam 1:       87\\n      Exam 2:       87\\n      Exam 3:       86\\n      Final Grade:  86.60\\n      Letter Grade: B\\n   Student Record for C C (ID # 444):\\n      Exam 1:       74\\n      Exam 2:       73\\n      Exam 3:       72\\n      Final Grade:  72.90\\n      Letter Grade: C\\n\\n---------------------------------------------------------------------\\n|                           FSC Gradebook                           |\\n---------------------------------------------------------------------\\n| Please choose from the following menu:                            |\\n|     1. Add a student record                                       |\\n|     2. Search for a student by ID number                          |\\n|     3. Search for a student by name                               |\\n|     4. Display all student records                                |\\n|     5. Display statistics                                         |\\n|     6. Quit                                                       |\\n---------------------------------------------------------------------\\n\\u003e Enter your choice: \\n\\n***Adding a Student Record***\\n   Enter the student's ID Number: \\n   Enter the student's First Name: \\n   Enter the student's Last Name: \\n   Enter the student's grade for Exam 1: \\n   Enter the student's grade for Exam 2: \\n   Enter the student's grade for Exam 3: \\n\\n   ---Add SUCCESS---\\n   f f (ID# 555) has been added to the FSC Grade Book.\\n   Final Grade: 50.50 (F)\\n\\n---------------------------------------------------------------------\\n|                           FSC Gradebook                           |\\n---------------------------------------------------------------------\\n| Please choose from the following menu:                            |\\n|     1. Add a student record                                       |\\n|     2. Search for a student by ID number                          |\\n|     3. Search for a student by name                               |\\n|     4. Display all student records                                |\\n|     5. Display statistics                                         |\\n|     6. Quit                                                       |\\n---------------------------------------------------------------------\\n\\u003e Enter your choice: \\n\\n***Displaying Statistics***\\n   Total number of student records: 5\\n   Average Grade: 82.00\\n   Highest Grade: 100.00\\n   Lowest Grade:  50.50\\n   Total 'A' Grades:  2  ( 40.00% of class)\\n   Total 'B' Grades:  1  ( 20.00% of class)\\n   Total 'C' Grades:  1  ( 20.00% of class)\\n   Total 'D' Grades:  0  (  0.00% of class)\\n   Total 'F' Grades:  1  ( 20.00% of class)\\n\\n---------------------------------------------------------------------\\n|                           FSC Gradebook                           |\\n---------------------------------------------------------------------\\n| Please choose from the following menu:                            |\\n|     1. Add a student record                                       |\\n|     2. Search for a student by ID number                          |\\n|     3. Search for a student by name                               |\\n|     4. Display all student records                                |\\n|     5. Display statistics                                         |\\n|     6. Quit                                                       |\\n---------------------------------------------------------------------\\n\\u003e Enter your choice: \\n\\n***Adding a Student Record***\\n   Enter the student's ID Number: \\n   Enter the student's First Name: \\n   Enter the student's Last Name: \\n   Enter the student's grade for Exam 1: \\n   Enter the student's grade for Exam 2: \\n   Enter the student's grade for Exam 3: \\n\\n   ---Add SUCCESS---\\n   cc cc (ID# 666) has been added to the FSC Grade Book.\\n   Final Grade: 75.20 (C)\\n\\n---------------------------------------------------------------------\\n|                           FSC Gradebook                           |\\n---------------------------------------------------------------------\\n| Please choose from the following menu:                            |\\n|     1. Add a student record                                       |\\n|     2. Search for a student by ID number                          |\\n|     3. Search for a student by name                               |\\n|     4. Display all student records                                |\\n|     5. Display statistics                                         |\\n|     6. Quit                                                       |\\n---------------------------------------------------------------------\\n\\u003e Enter your choice: \\n\\n***Displaying Statistics***\\n   Total number of student records: 6\\n   Average Grade: 80.87\\n   Highest Grade: 100.00\\n   Lowest Grade:  50.50\\n   Total 'A' Grades:  2  ( 33.33% of class)\\n   Total 'B' Grades:  1  ( 16.67% of class)\\n   Total 'C' Grades:  2  ( 33.33% of class)\\n   Total 'D' Grades:  0  (  0.00% of class)\\n   Total 'F' Grades:  1  ( 16.67% of class)\\n\\n---------------------------------------------------------------------\\n|                           FSC Gradebook                           |\\n---------------------------------------------------------------------\\n| Please choose from the following menu:                            |\\n|     1. Add a student record                                       |\\n|     2. Search for a student by ID number                          |\\n|     3. Search for a student by name                               |\\n|     4. Display all student records                                |\\n|     5. Display statistics                                         |\\n|     6. Quit                                                       |\\n---------------------------------------------------------------------\\n\\u003e Enter your choice: \\n\\n***Displaying ALL Students***\\n   Student Record for A A (ID # 111):\\n      Exam 1:       100\\n      Exam 2:       100\\n      Exam 3:       100\\n      Final Grade:  100.00\\n      Letter Grade: A\\n   Student Record for AA AA (ID # 222):\\n      Exam 1:       100\\n      Exam 2:       100\\n      Exam 3:       100\\n      Final Grade:  100.00\\n      Letter Grade: A\\n   Student Record for B B (ID # 333):\\n      Exam 1:       87\\n      Exam 2:       87\\n      Exam 3:       86\\n      Final Grade:  86.60\\n      Letter Grade: B\\n   Student Record for C C (ID # 444):\\n      Exam 1:       74\\n      Exam 2:       73\\n      Exam 3:       72\\n      Final Grade:  72.90\\n      Letter Grade: C\\n   Student Record for F F (ID # 555):\\n      Exam 1:       50\\n      Exam 2:       49\\n      Exam 3:       52\\n      Final Grade:  50.50\\n      Letter Grade: F\\n   Student Record for CC CC (ID # 666):\\n      Exam 1:       78\\n      Exam 2:       78\\n      Exam 3:       71\\n      Final Grade:  75.20\\n      Letter Grade: C\\n\\n---------------------------------------------------------------------\\n|                           FSC Gradebook                           |\\n---------------------------------------------------------------------\\n| Please choose from the following menu:                            |\\n|     1. Add a student record                                       |\\n|     2. Search for a student by ID number                          |\\n|     3. Search for a student by name                               |\\n|     4. Display all student records                                |\\n|     5. Display statistics                                         |\\n|     6. Quit                                                       |\\n---------------------------------------------------------------------\\n\\u003e Enter your choice: \\n\\n***Adding a Student Record***\\n   Enter the student's ID Number: \\n   Enter the student's First Name: \\n   Enter the student's Last Name: \\n   Enter the student's grade for Exam 1: \\n   Enter the student's grade for Exam 2: \\n   Enter the student's grade for Exam 3: \\n\\n   ---Add SUCCESS---\\n   a a (ID# 0) has been added to the FSC Grade Book.\\n   Final Grade: 97.90 (A)\\n\\n---------------------------------------------------------------------\\n|                           FSC Gradebook                           |\\n---------------------------------------------------------------------\\n| Please choose from the following menu:                            |\\n|     1. Add a student record                                       |\\n|     2. Search for a student by ID number                          |\\n|     3. Search for a student by name                               |\\n|     4. Display all student records                                |\\n|     5. Display statistics                                         |\\n|     6. Quit                                                       |\\n---------------------------------------------------------------------\\n\\u003e Enter your choice: \\n\\n***Displaying Statistics***\\n   Total number of student records: 7\\n   Average Grade: 83.30\\n   Highest Grade: 100.00\\n   Lowest Grade:  50.50\\n   Total 'A' Grades:  3  ( 42.86% of class)\\n   Total 'B' Grades:  1  ( 14.29% of class)\\n   Total 'C' Grades:  2  ( 28.57% of class)\\n   Total 'D' Grades:  0  (  0.00% of class)\\n   Total 'F' Grades:  1  ( 14.29% of class)\\n\\n---------------------------------------------------------------------\\n|                           FSC Gradebook                           |\\n---------------------------------------------------------------------\\n| Please choose from the following menu:                            |\\n|     1. Add a student record                                       |\\n|     2. Search for a student by ID number                          |\\n|     3. Search for a student by name                               |\\n|     4. Display all student records                                |\\n|     5. Display statistics                                         |\\n|     6. Quit                                                       |\\n---------------------------------------------------------------------\\n\\u003e Enter your choice: \\n\\n***Displaying ALL Students***\\n   Student Record for A A (ID # 111):\\n      Exam 1:       100\\n      Exam 2:       100\\n      Exam 3:       100\\n      Final Grade:  100.00\\n      Letter Grade: A\\n   Student Record for AA AA (ID # 222):\\n      Exam 1:       100\\n      Exam 2:       100\\n      Exam 3:       100\\n      Final Grade:  100.00\\n      Letter Grade: A\\n   Student Record for B B (ID # 333):\\n      Exam 1:       87\\n      Exam 2:       87\\n      Exam 3:       86\\n      Final Grade:  86.60\\n      Letter Grade: B\\n   Student Record for C C (ID # 444):\\n      Exam 1:       74\\n      Exam 2:       73\\n      Exam 3:       72\\n      Final Grade:  72.90\\n      Letter Grade: C\\n   Student Record for F F (ID # 555):\\n      Exam 1:       50\\n      Exam 2:       49\\n      Exam 3:       52\\n      Final Grade:  50.50\\n      Letter Grade: F\\n   Student Record for CC CC (ID # 666):\\n      Exam 1:       78\\n      Exam 2:       78\\n      Exam 3:       71\\n      Final Grade:  75.20\\n      Letter Grade: C\\n   Student Record for A A (ID # 0):\\n      Exam 1:       98\\n      Exam 2:       99\\n      Exam 3:       97\\n      Final Grade:  97.90\\n      Letter Grade: A\\n\\n---------------------------------------------------------------------\\n|                           FSC Gradebook                           |\\n---------------------------------------------------------------------\\n| Please choose from the following menu:                            |\\n|     1. Add a student record                                       |\\n|     2. Search for a student by ID number                          |\\n|     3. Search for a student by name                               |\\n|     4. Display all student records                                |\\n|     5. Display statistics                                         |\\n|     6. Quit                                                       |\\n---------------------------------------------------------------------\\n\\u003e Enter your choice: \\n\\nThank you for using the FSC Gradebook\\n\\nGoodbye!\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"1\\n111\\na\\na\\n100\\n100\\n100\\n1\\n222\\naa\\naa\\n100\\n100\\n100\\n5\\n4\\n1\\n333\\nb\\nb\\n87\\n87\\n86\\n5\\n4\\n1\\n444\\nc\\nc\\n74\\n73\\n72\\n5\\n4\\n1\\n555\\nf\\nf\\n50\\n49\\n52\\n5\\n1\\n666\\ncc\\ncc\\n78\\n78\\n71\\n5\\n4\\n1\\n0\\na\\na\\n98\\n99\\n97\\n5\\n4\\n6\\n\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"readAndVerifyID - 10 numbers\",\"headline\":\"\",\"points\":5,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"---------------------------------------------------------------------\\r\\n|                           FSC Gradebook                           |\\r\\n---------------------------------------------------------------------\\r\\n| Please choose from the following menu:                            |\\r\\n|     1. Add a student record                                       |\\r\\n|     2. Search for a student by ID number                          |\\r\\n|     3. Search for a student by name                               |\\r\\n|     4. Display all student records                                |\\r\\n|     5. Display statistics                                         |\\r\\n|     6. Quit                                                       |\\r\\n---------------------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n***Adding a Student Record***\\r\\n   Enter the student's ID Number: \\r\\n\\r\\n   Invalid input. Please try again.\\r\\n\\r\\n   Enter the student's ID Number: \\r\\n   Enter the student's First Name: \\r\\n   Enter the student's Last Name: \\r\\n   Enter the student's grade for Exam 1: \\r\\n   Enter the student's grade for Exam 2: \\r\\n   Enter the student's grade for Exam 3: \\r\\n\\r\\n   ---Add SUCCESS---\\r\\n   a a (ID# 1) has been added to the FSC Grade Book.\\r\\n   Final Grade: 100.00 (A)\\r\\n\\r\\n---------------------------------------------------------------------\\r\\n|                           FSC Gradebook                           |\\r\\n---------------------------------------------------------------------\\r\\n| Please choose from the following menu:                            |\\r\\n|     1. Add a student record                                       |\\r\\n|     2. Search for a student by ID number                          |\\r\\n|     3. Search for a student by name                               |\\r\\n|     4. Display all student records                                |\\r\\n|     5. Display statistics                                         |\\r\\n|     6. Quit                                                       |\\r\\n---------------------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\nThank you for using the FSC Gradebook\\r\\n\\r\\nGoodbye!\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"1\\r\\n1234567891\\r\\n1\\r\\na\\r\\na\\r\\n100\\r\\n100\\r\\n100\\r\\n6\\r\\n\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"searchByID - not found\",\"headline\":\"\",\"points\":2,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"---------------------------------------------------------------------\\r\\n|                           FSC Gradebook                           |\\r\\n---------------------------------------------------------------------\\r\\n| Please choose from the following menu:                            |\\r\\n|     1. Add a student record                                       |\\r\\n|     2. Search for a student by ID number                          |\\r\\n|     3. Search for a student by name                               |\\r\\n|     4. Display all student records                                |\\r\\n|     5. Display statistics                                         |\\r\\n|     6. Quit                                                       |\\r\\n---------------------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n***Adding a Student Record***\\r\\n   Enter the student's ID Number: \\r\\n   Enter the student's First Name: \\r\\n   Enter the student's Last Name: \\r\\n   Enter the student's grade for Exam 1: \\r\\n   Enter the student's grade for Exam 2: \\r\\n   Enter the student's grade for Exam 3: \\r\\n\\r\\n   ---Add SUCCESS---\\r\\n   Christian Roberson (ID# 111) has been added to the FSC Grade Book.\\r\\n   Final Grade: 100.00 (A)\\r\\n\\r\\n---------------------------------------------------------------------\\r\\n|                           FSC Gradebook                           |\\r\\n---------------------------------------------------------------------\\r\\n| Please choose from the following menu:                            |\\r\\n|     1. Add a student record                                       |\\r\\n|     2. Search for a student by ID number                          |\\r\\n|     3. Search for a student by name                               |\\r\\n|     4. Display all student records                                |\\r\\n|     5. Display statistics                                         |\\r\\n|     6. Quit                                                       |\\r\\n---------------------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n***Searching by Student ID***\\r\\n   Enter the student's ID Number: \\r\\n   The entered student ID was not found in the system.\\r\\n\\r\\n---------------------------------------------------------------------\\r\\n|                           FSC Gradebook                           |\\r\\n---------------------------------------------------------------------\\r\\n| Please choose from the following menu:                            |\\r\\n|     1. Add a student record                                       |\\r\\n|     2. Search for a student by ID number                          |\\r\\n|     3. Search for a student by name                               |\\r\\n|     4. Display all student records                                |\\r\\n|     5. Display statistics                                         |\\r\\n|     6. Quit                                                       |\\r\\n---------------------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\n***Searching by Student ID***\\r\\n   Enter the student's ID Number: \\r\\n   Student Record for CHRISTIAN ROBERSON (ID # 111):\\r\\n      Exam 1:       100\\r\\n      Exam 2:       100\\r\\n      Exam 3:       100\\r\\n      Final Grade:  100.00\\r\\n      Letter Grade: A\\r\\n\\r\\n---------------------------------------------------------------------\\r\\n|                           FSC Gradebook                           |\\r\\n---------------------------------------------------------------------\\r\\n| Please choose from the following menu:                            |\\r\\n|     1. Add a student record                                       |\\r\\n|     2. Search for a student by ID number                          |\\r\\n|     3. Search for a student by name                               |\\r\\n|     4. Display all student records                                |\\r\\n|     5. Display statistics                                         |\\r\\n|     6. Quit                                                       |\\r\\n---------------------------------------------------------------------\\r\\n\\u003e Enter your choice: \\r\\n\\r\\nThank you for using the FSC Gradebook\\r\\n\\r\\nGoodbye!\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"1\\r\\n111\\r\\nChristian\\r\\nRoberson\\r\\n100\\r\\n100\\r\\n100\\r\\n2\\r\\n1111\\r\\n2\\r\\n111\\r\\n6\\r\\n\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"searchByName - not found\",\"headline\":\"\",\"points\":3,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"---------------------------------------------------------------------\\n|                           FSC Gradebook                           |\\n---------------------------------------------------------------------\\n| Please choose from the following menu:                            |\\n|     1. Add a student record                                       |\\n|     2. Search for a student by ID number                          |\\n|     3. Search for a student by name                               |\\n|     4. Display all student records                                |\\n|     5. Display statistics                                         |\\n|     6. Quit                                                       |\\n---------------------------------------------------------------------\\n\\u003e Enter your choice: \\n\\n***Adding a Student Record***\\n   Enter the student's ID Number: \\n   Enter the student's First Name: \\n   Enter the student's Last Name: \\n   Enter the student's grade for Exam 1: \\n   Enter the student's grade for Exam 2: \\n   Enter the student's grade for Exam 3: \\n\\n   ---Add SUCCESS---\\n   Jonathan Cazalas (ID# 777) has been added to the FSC Grade Book.\\n   Final Grade: 100.00 (A)\\n\\n---------------------------------------------------------------------\\n|                           FSC Gradebook                           |\\n---------------------------------------------------------------------\\n| Please choose from the following menu:                            |\\n|     1. Add a student record                                       |\\n|     2. Search for a student by ID number                          |\\n|     3. Search for a student by name                               |\\n|     4. Display all student records                                |\\n|     5. Display statistics                                         |\\n|     6. Quit                                                       |\\n---------------------------------------------------------------------\\n\\u003e Enter your choice: \\n\\n***Searching by Student Name***\\n   Enter the student first name: \\n   Enter the student last name: \\n   The entered student name was not found in the system.\\n\\n---------------------------------------------------------------------\\n|                           FSC Gradebook                           |\\n---------------------------------------------------------------------\\n| Please choose from the following menu:                            |\\n|     1. Add a student record                                       |\\n|     2. Search for a student by ID number                          |\\n|     3. Search for a student by name                               |\\n|     4. Display all student records                                |\\n|     5. Display statistics                                         |\\n|     6. Quit                                                       |\\n---------------------------------------------------------------------\\n\\u003e Enter your choice: \\n\\n***Searching by Student Name***\\n   Enter the student first name: \\n   Enter the student last name: \\n   The entered student name was not found in the system.\\n\\n---------------------------------------------------------------------\\n|                           FSC Gradebook                           |\\n---------------------------------------------------------------------\\n| Please choose from the following menu:                            |\\n|     1. Add a student record                                       |\\n|     2. Search for a student by ID number                          |\\n|     3. Search for a student by name                               |\\n|     4. Display all student records                                |\\n|     5. Display statistics                                         |\\n|     6. Quit                                                       |\\n---------------------------------------------------------------------\\n\\u003e Enter your choice: \\n\\n***Searching by Student Name***\\n   Enter the student first name: \\n   Enter the student last name: \\n   Student Record for JONATHAN CAZALAS (ID # 777):\\n      Exam 1:       100\\n      Exam 2:       100\\n      Exam 3:       100\\n      Final Grade:  100.00\\n      Letter Grade: A\\n\\n---------------------------------------------------------------------\\n|                           FSC Gradebook                           |\\n---------------------------------------------------------------------\\n| Please choose from the following menu:                            |\\n|     1. Add a student record                                       |\\n|     2. Search for a student by ID number                          |\\n|     3. Search for a student by name                               |\\n|     4. Display all student records                                |\\n|     5. Display statistics                                         |\\n|     6. Quit                                                       |\\n---------------------------------------------------------------------\\n\\u003e Enter your choice: \\n\\nThank you for using the FSC Gradebook\\n\\nGoodbye!\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"1\\n777\\nJonathan\\nCazalas\\n100\\n100\\n100\\n3\\nJonathan\\nCazalesaaaaa\\n3\\nJonathannnnnn\\nCazalas\\n3\\nJonathan\\nCazalas\\n6\",\"sourceFile\":\"\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"public class Main {\\n\\n    public static void main(String[] args) {\\n        // Prints \\\"Hello, World\\\" to the terminal window.\\n        System.out.println(\\\"Hello, World\\\");\\n    }\\n\\n}\\n\"],\"t\":1615087287000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 26429,
    "title": "Lab07_Problem02: MyInteger Class",
    "prompt_md": "## IMPORTANT: Read the instructions carefully, so as to not miss any steps.\n\nInstructions:\n\n1.  You should only put code in MyInteger.java\n2.  You _can_ use Main.java to make test objects and test your class if you like. Just make sure no errors are present within your testing code.\n3.  The test cases are only testing the code within Person.java (but your Main.java must be free from errors in order to run).\n\nWithin MyInteger.java, do the following:\n\n### Declare the following two **private** data members:\n\n1.  an int called _num_\n2.  a **static** int called _numMyIntegers_\n\n*   NOTE: the variable names, AND the capitalization, should be **exactly** as shown above\n\n### Write **two constructors**:\n\n1.  a constructor that receives all data members values as parameters\n    *   this constructor should also increment the static _numMyIntegers_ variable\n2.  a no-argument constructor\n    *   and even this constructor should also increment the static _numMyIntegers_ variable\n\n### Write **all accessor** (getter) methods and **all mutator** (setter) methods.\n\n*   Be very careful that you use the EXACT naming conventions shown in class\n*   Your program will not pass the test cases if your style is different than the styles shown in class.\n\n### Your class should also include the following **two** methods:\n\n1.  **public boolean isEven()**\n    *   Parameters: none\n    *   Returns: boolean\n    *   Description: method returns true if the data member, num, is Even and returns false if it is Odd\n2.  **public boolean isOdd()**\n    *   Parameters: none\n    *   Returns: boolean\n    *   Description: method returns true if the data member, num, is Odd and returns false if it is Even\n3.  **public boolean isPrime()**\n    *   Parameters: none\n    *   Returns: boolean\n    *   Description: method returns true if the data member, num, is a prime number and returns false otherwise\n    *   Note: negative numbers, 0, and 1 are _not_ prime numbers\n4.  **public boolean isPerfectSquare()**\n    *   Parameters: none\n    *   Returns: boolean\n    *   Description: method returns true if the data member, num, is a perfect square and returns false otherwise\n5.  **public String toString()**\n    *   Parameters: none\n    *   Returns: String\n    *   Description: this is a toString() method, which should return a String representation of the given object.\n    *   Please see examples below to see EXACTLY how this returned String should look.\n    *   Want a hint on how to start? Make a String variable, called s, for example, and set that variable equal to the empty String (\"\"). Then, for each line of output below, concatenate to that s String the appropriate data needed for each line. Oh, and be sure to use String.format() to make your life a bit easier!\n    *   WARNING: the returned String must have the EXACT format/look as shown in the samples. (space for space, colon for colon…everything must be identical in order for it to pass the test case).\n\n_**\\*Important: make sure the values in your constructor are given in the SAME order as shown in the original list of data members above. While not important in theory, this is the only way to confirm your program works and have it tested by the system. So if you want a constructor with make, model, and price, you need to list them in that order exactly...not model, make, and price.**_\n\nTest your code with the Main.java class by creating several Car objects using all four Constructors and print their fields/states to make sure it's correct.\n\n### Sample Main.java #1\n\n```plaintext\npublic class Main {\n    public static void main(String[] args) {\n        MyInteger i = new MyInteger(49);\n\n        System.out.println(i.isEven());\n        System.out.println(i.isOdd());\n        System.out.println(i.isPrime());\n        System.out.println(i.isPerfectSquare());\n\n        System.out.println(MyInteger.getNumMyIntegers());\n        MyInteger x = new MyInteger(49);\n        System.out.println(MyInteger.getNumMyIntegers());\n    }\n}\n```\n\n### Corresponding Output #1\n\n```plaintext\nfalse\ntrue\nfalse\ntrue\n1\n2\n```\n\n### Sample Main.java #2\n\n```plaintext\npublic class Main {\n    public static void main(String[] args) {\n        MyInteger i = new MyInteger(64);\n        System.out.println(i);\n    }\n}\n```\n\n### Corresponding Output #2\n\n```plaintext\nMyInteger: 64\nEven: yes\nOdd: no\nPrime: no\nPerfect Square: yes\n```\n\n### Sample Main.java #3\n\n```plaintext\npublic class Main {\n    public static void main(String[] args) {\n        MyInteger i = new MyInteger(-4);\n        System.out.println(i);\n    }\n}\n```\n\n### Corresponding Output #3\n\n```plaintext\nMyInteger: -4\nEven: yes\nOdd: no\nPrime: no\nPerfect Square: no\n```",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main {\\n    public static void main(String[] args) {\\n\\n        // You *CAN* include code here in your main if you want to test the Dog.java class.\\n        // You can make new Dog objects. You can print things.\\n\\n        // The code here in main will NOT be graded.\\n\\n        // HOWEVER, if any code here in main has an error, that could cause your\\n        // program to fail. So be careful.\\n        \\n    }\\n}\\n\",\"defaultFilePath\":\"\",\"defaultFileType\":\"\",\"extraFiles\":{\"TXlJbnRlZ2VyLmphdmE=\":{\"contents\":\"class MyInteger {\\n\\t// Data Members:\\n\\t\\n\\t\\n\\n\\t\\n\\t// Constructors:\\n\\t\\n    \\n\\n\\n    // Accessor and Mutator Methods:\\n\\n\\n\\n\\n    // Other Methods\\n\\n\\n    \\n\\t\\n}\",\"language\":\"java\",\"type\":\"\"}}}},\"grading\":{\"testCases\":[{\"type\":\"unit_test\",\"title\":\"constructor\",\"headline\":\"\",\"points\":5,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n    @Before\\n    public void setUp() {\\n        // Setup code here (if required)\\n    }\\n\\n    @After\\n    public void tearDown() {\\n        // Teardown code here (if required)\\n    }\\n\\n    @Test\\n    public void testDefaultCase() {\\n        MyInteger i = new MyInteger(7);\\n        \\n        assertEquals(7, i.getNum());\\n    }\\n}\\n\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"unit_test\",\"title\":\"isEven\",\"headline\":\"\",\"points\":7,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n    @Before\\n    public void setUp() {\\n        // Setup code here (if required)\\n    }\\n\\n    @After\\n    public void tearDown() {\\n        // Teardown code here (if required)\\n    }\\n\\n    @Test\\n    public void testDefaultCase() {\\n        MyInteger a = new MyInteger(7);\\n        MyInteger b = new MyInteger(10);\\n        MyInteger c = new MyInteger(0);\\n        MyInteger d = new MyInteger(-1);\\n        MyInteger e = new MyInteger(-2);\\n        \\n        assertEquals(false, a.isEven());\\n        assertEquals(true, b.isEven());\\n        assertEquals(true, c.isEven());\\n        assertEquals(false, d.isEven());\\n        assertEquals(true, e.isEven());\\n    }\\n}\\n\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"unit_test\",\"title\":\"isOdd\",\"headline\":\"\",\"points\":8,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n    @Before\\n    public void setUp() {\\n        // Setup code here (if required)\\n    }\\n\\n    @After\\n    public void tearDown() {\\n        // Teardown code here (if required)\\n    }\\n\\n    @Test\\n    public void testDefaultCase() {\\n        MyInteger a = new MyInteger(7);\\n        MyInteger b = new MyInteger(10);\\n        MyInteger c = new MyInteger(0);\\n        MyInteger d = new MyInteger(-1);\\n        MyInteger e = new MyInteger(-2);\\n        \\n        assertEquals(true, a.isOdd());\\n        assertEquals(false, b.isOdd());\\n        assertEquals(false, c.isOdd());\\n        assertEquals(true, d.isOdd());\\n        assertEquals(false, e.isOdd());\\n    }\\n}\\n\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"unit_test\",\"title\":\"isPrime\",\"headline\":\"\",\"points\":20,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n    @Before\\n    public void setUp() {\\n        // Setup code here (if required)\\n    }\\n\\n    @After\\n    public void tearDown() {\\n        // Teardown code here (if required)\\n    }\\n\\n    @Test\\n    public void testDefaultCase() {\\n        MyInteger a = new MyInteger(-1);\\n        MyInteger b = new MyInteger(0);\\n        MyInteger c = new MyInteger(1);\\n        MyInteger d = new MyInteger(19);\\n        MyInteger e = new MyInteger(81);\\n        MyInteger f = new MyInteger(23);\\n        \\n        assertEquals(false, a.isPrime());\\n        assertEquals(false, b.isPrime());\\n        assertEquals(false, c.isPrime());\\n        assertEquals(true, d.isPrime());\\n        assertEquals(false, e.isPrime());\\n        assertEquals(true, f.isPrime());\\n    }\\n}\\n\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"unit_test\",\"title\":\"isPerfectSquare\",\"headline\":\"\",\"points\":20,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n    @Before\\n    public void setUp() {\\n        // Setup code here (if required)\\n    }\\n\\n    @After\\n    public void tearDown() {\\n        // Teardown code here (if required)\\n    }\\n\\n    @Test\\n    public void testDefaultCase() {\\n        MyInteger a = new MyInteger(1);\\n        MyInteger b = new MyInteger(3);\\n        MyInteger c = new MyInteger(4);\\n        MyInteger d = new MyInteger(81);\\n        MyInteger e = new MyInteger(82);\\n        MyInteger f = new MyInteger(10000);\\n        \\n        assertEquals(true, a.isPerfectSquare());\\n        assertEquals(false, b.isPerfectSquare());\\n        assertEquals(true, c.isPerfectSquare());\\n        assertEquals(true, d.isPerfectSquare());\\n        assertEquals(false, e.isPerfectSquare());\\n        assertEquals(true, f.isPerfectSquare());\\n    }\\n}\\n\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"unit_test\",\"title\":\"toString 1\",\"headline\":\"\",\"points\":10,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n    @Before\\n    public void setUp() {\\n        // Setup code here (if required)\\n    }\\n\\n    @After\\n    public void tearDown() {\\n        // Teardown code here (if required)\\n    }\\n\\n    @Test\\n    public void testDefaultCase() {\\n        MyInteger i = new MyInteger(100);\\n        String s = \\\"MyInteger: 100\\\\nEven: yes\\\\nOdd: no\\\\nPrime: no\\\\nPerfect Square: yes\\\\n\\\";\\n        assertEquals(s, i.toString());\\n    }\\n}\\n\\n\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"unit_test\",\"title\":\"toString 2\",\"headline\":\"\",\"points\":10,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n    @Before\\n    public void setUp() {\\n        // Setup code here (if required)\\n    }\\n\\n    @After\\n    public void tearDown() {\\n        // Teardown code here (if required)\\n    }\\n\\n    @Test\\n    public void testDefaultCase() {\\n        MyInteger i = new MyInteger(937);\\n        String s = \\\"MyInteger: 937\\\\nEven: no\\\\nOdd: yes\\\\nPrime: yes\\\\nPerfect Square: no\\\\n\\\";\\n        assertEquals(s, i.toString());\\n    }\\n}\\n\\n\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"unit_test\",\"title\":\"toString 3\",\"headline\":\"\",\"points\":10,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n    @Before\\n    public void setUp() {\\n        // Setup code here (if required)\\n    }\\n\\n    @After\\n    public void tearDown() {\\n        // Teardown code here (if required)\\n    }\\n\\n    @Test\\n    public void testDefaultCase() {\\n        MyInteger i = new MyInteger(12);\\n        String s = \\\"MyInteger: 12\\\\nEven: yes\\\\nOdd: no\\\\nPrime: no\\\\nPerfect Square: no\\\\n\\\";\\n        assertEquals(s, i.toString());\\n    }\\n}\\n\\n\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"unit_test\",\"title\":\"static numMyIntegers\",\"headline\":\"\",\"points\":10,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n    @Before\\n    public void setUp() {\\n        // Setup code here (if required)\\n    }\\n\\n    @After\\n    public void tearDown() {\\n        // Teardown code here (if required)\\n    }\\n\\n    @Test\\n    public void testDefaultCase() {\\n        assertEquals(0, MyInteger.getNumMyIntegers());\\n        MyInteger a = new MyInteger(1);\\n        assertEquals(1, MyInteger.getNumMyIntegers());\\n        MyInteger b = new MyInteger(3);\\n        assertEquals(2, MyInteger.getNumMyIntegers());\\n        MyInteger c = new MyInteger(4);\\n        assertEquals(3, MyInteger.getNumMyIntegers());\\n        MyInteger d = new MyInteger(81);\\n        assertEquals(4, MyInteger.getNumMyIntegers());\\n        MyInteger e = new MyInteger(82);\\n        assertEquals(5, MyInteger.getNumMyIntegers());\\n        MyInteger f = new MyInteger(10000);\\n        assertEquals(6, MyInteger.getNumMyIntegers());\\n    }\\n}\\n\\n\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main {\\n    public static void main(String[] args) {\\n\\n        // You *CAN* include code here in your main if you want to test the Dog.java class.\\n        // You can make new Dog objects. You can print things.\\n\\n        // The code here in main will NOT be graded.\\n\\n        // HOWEVER, if any code here in main has an error, that could cause your\\n        // program to fail. So be careful.\\n        \\n    }\\n}\\n\",\"defaultFilePath\":\"\",\"defaultFileType\":\"\",\"extraFiles\":{\"TXlJbnRlZ2VyLmphdmE=\":{\"contents\":\"\\npublic class MyInteger {\\n\\n\\t// Data Members:\\n\\tprivate int num;\\n\\tprivate static int numMyIntegers = 0;\\n\\n\\t// Constructors:\\n\\tpublic MyInteger() {\\n\\t\\tnumMyIntegers++;\\n\\t}\\n\\n\\tpublic MyInteger(int num) {\\n\\t\\tthis.num = num;\\n\\t\\tnumMyIntegers++;\\n\\t}\\n\\n\\t// Accessor and Mutator Methods:\\n\\tpublic int getNum() {\\n\\t\\treturn num;\\n\\t}\\n\\n\\tpublic void setNum(int num) {\\n\\t\\tthis.num = num;\\n\\t}\\n\\n\\tpublic static int getNumMyIntegers() {\\n\\t\\treturn numMyIntegers;\\n\\t}\\n\\n\\tpublic static void setNumMyIntegers(int aNumMyIntegers) {\\n\\t\\tnumMyIntegers = aNumMyIntegers;\\n\\t}\\n\\n\\t// Other Methods\\n\\tpublic boolean isEven() {\\n\\t\\treturn num % 2 == 0;\\n\\t}\\n\\n\\tpublic boolean isOdd() {\\n\\t\\treturn num % 2 != 0;\\n\\t}\\n\\n\\tpublic boolean isPrime() {\\n\\t\\tif (num \\u003c 2) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t\\t\\n\\t\\tint topRange = (int) Math.ceil(Math.sqrt(num));\\n\\n\\t\\tfor (int i = 2; i \\u003c= topRange; i++) {\\n\\t\\t\\tif (num % i == 0) {\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t\\n\\t\\t// If we never returned false, then this number is prime; return true.\\n\\t\\treturn true;\\n\\t}\\n\\t\\n\\tpublic boolean isPerfectSquare() {\\n\\t\\tint count = 1;\\n\\t\\t\\n\\t\\twhile (true) {\\n\\t\\t\\tif (count * count == num) {\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t\\tif (count * count \\u003e num) {\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t\\tcount++;\\n\\t\\t}\\n\\t\\t\\n\\t\\t// If we never returned, this means it is not a perfect square\\n\\t\\treturn false;\\n\\t}\\n\\t\\n\\t@Override\\n\\tpublic String toString() {\\n\\t\\tString s = \\\"\\\";\\n\\t\\t\\n\\t\\ts += String.format(\\\"MyInteger: %d\\\\n\\\", num);\\n\\t\\ts += String.format(\\\"Even: %s\\\\n\\\", (isEven() ? \\\"yes\\\" : \\\"no\\\"));\\n\\t\\ts += String.format(\\\"Odd: %s\\\\n\\\", (isOdd() ? \\\"yes\\\" : \\\"no\\\"));\\n\\t\\ts += String.format(\\\"Prime: %s\\\\n\\\", (isPrime() ? \\\"yes\\\" : \\\"no\\\"));\\n\\t\\ts += String.format(\\\"Perfect Square: %s\\\\n\\\", (isPerfectSquare() ? \\\"yes\\\" : \\\"no\\\"));\\n\\t\\t\\n\\t\\treturn s;\\n\\t}\\n}\\n\",\"language\":\"java\",\"type\":\"\"}}}},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"public class Main {\\n\\n    public static void main(String[] args) {\\n        // Prints \\\"Hello, World\\\" to the terminal window.\\n        System.out.println(\\\"Hello, World\\\");\\n    }\\n\\n}\\n\"],\"t\":1616716885000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 26431,
    "title": "Lab07_Problem03: Array of Students",
    "prompt_md": "## IMPORTANT: Read the instructions carefully, so as to not miss any steps.\n\nInstructions:\n\n1.  You should only put code in Student.java and BirthDate.java\n2.  **For this problem, \\*\\*\\*\\*\\*\\*\\*\\*\\*\\*do NOT touch Main.java\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*, as this has already been coded for you to include an array of Student object references.**\n\n## Within BirthDate.java, do the following:\n\n### Declare the following three private data members:\n\n1.  int birthMonth\n2.  int birthDay\n3.  int birthYear\n    *   NOTE: the variable names, AND the capitalization, should be **exactly** as shown above\n\n### Write one constructor:\n\n1.  a constructor that receives all data members values as parameters\n\n### Write **all accessor** (getter) methods and **all mutator** (setter) methods.\n\n*   Be very careful that you use the EXACT naming conventions shown in class\n*   Your program will not pass the test cases if your style is different than the styles shown in class.\n\n### Your class should also include the following method:\n\n1.  **public String toString()**\n    *   Parameters: none\n    *   Returns: String\n    *   Description: this is a toString() method, which should return a String representation of the given object.\n    *   Assume a student was born on July 17, 2002. The toString() method should return the following String:\n    *   “7/17/2002”\n\n## Within Student.java, do the following:\n\n### Declare the following two **private** data members:\n\n1.  an int called _ID_\n2.  a String called _firstName_\n3.  a String called _lastName_\n4.  a BirthDate reference variable called _bd_\n5.  a **static** int called _numStudents_\n\n*   NOTE: the variable names, AND the capitalization, should be **exactly** as shown above\n\n### Write one **constructor**:\n\n1.  a constructor that receives SIX parameters and in this order: ID, firstName, lastName, birthMonth, birthDay, and birthYear\n    *   the first three parameters should be assigned to the data members of this object\n    *   **the constructor should then create a NEW BirthDate object by invoking the three-parameter constructor of BirthDate**\n    *   when making this new BirthDate object, your program should _forward_ the birthMonth, birthDay, and birthYear parameters over to the BirthDate constructor\n    *   finally, this constructor should also increment the static _numStudents_ variable\n\n### Write **all accessor** (getter) methods and **all mutator** (setter) methods.\n\n*   Be very careful that you use the EXACT naming conventions shown in class\n*   In fact, do this automatically in NetBeans\n*   Your program will not pass the test cases if your style is different than the styles shown in class.\n\n### Your class should also include the following method:\n\n1.  **public String toString()**\n    *   Parameters: none\n    *   Returns: String\n    *   Description: this is a toString() method, which should return a String representation of the given object.\n    *   Please see examples below to see EXACTLY how this returned String should look.\n    *   Want a hint on how to start? Make a String variable, called s, for example, and set that variable equal to the empty String (\"\"). Then, for each line of output below, concatenate to that s String the appropriate data needed for each line. Oh, and be sure to use String.format() to make your life a bit easier!\n    *   WARNING: the returned String must have the EXACT format/look as shown in the samples. (space for space, colon for colon…everything must be identical in order for it to pass the test case).\n\n_**\\*Important: make sure the values in your constructor are given in the SAME order as shown in the original list of data members above. While not important in theory, this is the only way to confirm your program works and have it tested by the system. So if you want a constructor with make, model, and price, you need to list them in that order exactly...not model, make, and price.**_\n\n### Sample Main.java #1\n\n```plaintext\npublic class Main {\n    public static void main(String[] args) {\n        Student s = new Student(333, \"Peter\", \"Parker\", 8, 10, 2001);\n\n        System.out.println(s.getID());\n        System.out.println(s.getFirstName());\n        System.out.println(s.getLastName());\n        System.out.println(s.getBd());    // Note that the toString() method of this BirthDate object gets invoked automatically\n    }\n}\n```\n\n### Corresponding Output #1\n\n```plaintext\n333\nPeter\nParker\n8/10/2001\n```\n\n### Sample Main.java #2\n\n```plaintext\npublic class Main {\n    public static void main(String[] args) {\n        Student s = new Student(333, \"Peter\", \"Parker\", 8, 10, 2001);\n\n        System.out.println(s);    // Note that the toString() method of this Student object gets invoked automatically\n    }\n}\n```\n\n### Corresponding Output #2\n\n```plaintext\nStudent Information:\nStudent ID: 333\nFirst Name: Peter\nLast Name: Parker\nBirth Date: 8/10/2001\n```\n\n### Sample Main.java #3\n\n```plaintext\npublic class Main {\n    public static void main(String[] args) {\n        Student[] students = new Student[10];\n\n        students[Student.getNumStudents()] = new Student(111, \"Bruce\", \"Banner\", 12, 18, 1969);\n\n        Student temp = new Student(222, \"Natasha\", \"Romanoff \", 11, 22, 1984);\n        students[Student.getNumStudents() - 1] = temp;\n\n        students[Student.getNumStudents()] = new Student(333, \"Peter\", \"Parker\", 8, 10, 2001);\n\n        for (int i = 0; i < Student.getNumStudents(); i++) {\n            System.out.println(students[i]);\n        }\n    }\n}\n```\n\n### Corresponding Output #3\n\n```plaintext\nStudent Information:\nStudent ID: 111\nFirst Name: Bruce\nLast Name: Banner\nBirth Date: 12/18/1969\n\nStudent Information:\nStudent ID: 222\nFirst Name: Natasha\nLast Name: Romanoff \nBirth Date: 11/22/1984\n\nStudent Information:\nStudent ID: 333\nFirst Name: Peter\nLast Name: Parker\nBirth Date: 8/10/2001\n```",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"public class Main {\\n\\n    public static void main(String[] args) {\\n        // ********************************************************** //\\n        // NOTE:  do NOT make any changes to this main() method       //\\n        // DO read through the comments to understand what's going on //\\n        // ********************************************************** //\\n\\n        // Here we make an array of size 10 Student object REFERENCES\\n        Student[] students = new Student[10];\\n\\t\\t\\n\\t\\t// Here's one way we can make a new Student object and save it DIRECTLY\\n\\t\\t// into the appropriate index of the students array...\\n\\t\\t// The right side of the assignment has \\\"new Student(....)\\n\\t\\t// That results in a reference variable which points to a NEW Student object\\n\\t\\t// We then save that reference into students[0]\\n\\t\\tstudents[Student.getNumStudents()] = new Student(111, \\\"Bruce\\\", \\\"Banner\\\", 12, 18, 1969);\\n\\t\\t// NOTE:\\n\\t\\t// - this reference variable did get saved at index ZERO...but how did that happen?\\n\\t\\t// - we did *not* hardcode the 0 as the index\\n\\t\\t// - instead, we used the STATIC getNumStudents() method to access the\\n\\t\\t//   STATIC numStudents variable.\\n\\t\\t// - do note that AFTER this statement finishes, numStudents will equal 1\\n\\t\\t// - Now, since we JUST NOW made a new Student, numStudents will equal 1.\\n\\t\\t// - Thus, we save this new Student object into index:\\n\\t\\t//   [Student.getNumStudents() - 1]  ...which equates to\\n\\t\\t//   [1 - 1] ... which is zero, precisely the index we want to save it.\\n\\t\\t\\n\\t\\t// Now let's make another Student object and save it just slightly differently\\n\\t\\tStudent temp = new Student(222, \\\"Natasha\\\", \\\"Romanoff \\\", 11, 22, 1984);\\n\\t\\tstudents[Student.getNumStudents() - 1] = temp;\\n\\t\\t// The right side of the assignment has \\\"new Student(....)\\n\\t\\t// That results in a reference variable which points to a NEW Student object\\n\\t\\t// We then save that reference into the variable \\\"temp\\\"\\n\\t\\t// Finally, the reference, which is saved in \\\"temp\\\", is then saved into \\n\\t\\t// students[Student.getNumStudents() - 1] = temp;\\n\\t\\t// NOTE:\\n\\t\\t// - this is the 2nd student being added, which means it should go at index 1.\\n\\t\\t// - since two students have been CONSTRUCTED, the static variable numStudents equals 2\\n\\t\\t// - this we save it at index getNumStudents() - 1 for this particular way of adding a student\\n\\t\\t// - once again, that is because we made the FULLY made the student on line 26 above\\n\\t\\t// - thus numStudents is 2, and we need to save at index 1...so we save at index getNumStudents() - 1\\n\\t\\t\\n\\t\\t// Finally, here is one more Student being created\\n\\t\\tstudents[Student.getNumStudents()] = new Student(333, \\\"Peter\\\", \\\"Parker\\\", 8, 10, 2001);\\n\\t\\t// NOTE:\\n\\t\\t// - this is the 3rd student and got saved into index 2.\\n\\t\\t\\n        // Now, let's print each of these Student objects using the overridden toString() method\\n\\t\\tfor (int i = 0; i \\u003c Student.getNumStudents(); i++) {\\n\\t\\t\\tSystem.out.println(students[i]);\\n\\t\\t}\\n    }\\n}\\n\",\"defaultFilePath\":\"\",\"defaultFileType\":\"\",\"extraFiles\":{\"QmlydGhEYXRlLmphdmE=\":{\"contents\":\"class BirthDate {\\n\\t// Data Members:\\n\\t\\n\\t\\n\\n\\t\\n\\t// Constructors:\\n\\t\\n    \\n\\n\\n    // Accessor and Mutator Methods:\\n\\n\\n\\n\\n    // Other Methods\\n\\n\\n    \\n\\t\\n}\",\"language\":\"java\",\"type\":\"\"},\"U3R1ZGVudC5qYXZh\":{\"contents\":\"class Student {\\n\\t// Data Members:\\n\\t\\n\\t\\n\\n\\t\\n\\t// Constructors:\\n\\t\\n    \\n\\n\\n    // Accessor and Mutator Methods:\\n\\n\\n\\n\\n    // Other Methods\\n\\n\\n    \\n\\t\\n}\",\"language\":\"java\",\"type\":\"\"}}}},\"grading\":{\"testCases\":[{\"type\":\"unit_test\",\"title\":\"constructor Student\",\"headline\":\"\",\"points\":20,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n    @Before\\n    public void setUp() {\\n        // Setup code here (if required)\\n    }\\n\\n    @After\\n    public void tearDown() {\\n        // Teardown code here (if required)\\n    }\\n\\n    @Test\\n    public void testDefaultCase() {\\n        Student s = new Student(222, \\\"Natasha\\\", \\\"Romanoff\\\", 11, 22, 1984);\\n        \\n        assertEquals(222, s.getID());\\n        assertEquals(\\\"Natasha\\\", s.getFirstName());\\n        assertEquals(\\\"Romanoff\\\", s.getLastName());\\n        assertEquals(\\\"11/22/1984\\\", s.getBd().toString());\\n    }\\n}\\n\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"unit_test\",\"title\":\"constructor BirthDate\",\"headline\":\"\",\"points\":10,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n    @Before\\n    public void setUp() {\\n        // Setup code here (if required)\\n    }\\n\\n    @After\\n    public void tearDown() {\\n        // Teardown code here (if required)\\n    }\\n\\n    @Test\\n    public void testDefaultCase() {\\n        BirthDate bd = new BirthDate(11, 22, 1984);\\n        \\n        assertEquals(11, bd.getBirthMonth());\\n        assertEquals(22, bd.getBirthDay());\\n        assertEquals(1984, bd.getBirthYear());\\n    }\\n}\\n\\n\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"unit_test\",\"title\":\"toString BirthDate\",\"headline\":\"\",\"points\":5,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n    @Before\\n    public void setUp() {\\n        // Setup code here (if required)\\n    }\\n\\n    @After\\n    public void tearDown() {\\n        // Teardown code here (if required)\\n    }\\n\\n    @Test\\n    public void testDefaultCase() {\\n        BirthDate bd = new BirthDate(11, 22, 1984);\\n        \\n        assertEquals(\\\"11/22/1984\\\", bd.toString());\\n    }\\n}\\n\\n\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"unit_test\",\"title\":\"toString Student\",\"headline\":\"\",\"points\":20,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n    @Before\\n    public void setUp() {\\n        // Setup code here (if required)\\n    }\\n\\n    @After\\n    public void tearDown() {\\n        // Teardown code here (if required)\\n    }\\n\\n    @Test\\n    public void testDefaultCase() {\\n        Student s = new Student(333, \\\"Peter\\\", \\\"Parker\\\", 8, 10, 2001);\\n        \\n        String result = \\\"Student Information:\\\\nStudent ID: 333\\\\nFirst Name: Peter\\\\nLast Name: Parker\\\\nBirth Date: 8/10/2001\\\\n\\\";\\n\\n        assertEquals(result, s.toString());\\n    }\\n}\\n\\n\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"Main\",\"headline\":\"\",\"points\":40,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"Student Information:\\nStudent ID: 111\\nFirst Name: Bruce\\nLast Name: Banner\\nBirth Date: 12/18/1969\\n\\nStudent Information:\\nStudent ID: 222\\nFirst Name: Natasha\\nLast Name: Romanoff \\nBirth Date: 11/22/1984\\n\\nStudent Information:\\nStudent ID: 333\\nFirst Name: Peter\\nLast Name: Parker\\nBirth Date: 8/10/2001\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"unit_test\",\"title\":\"static numStudent test\",\"headline\":\"\",\"points\":5,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n    @Before\\n    public void setUp() {\\n        // Setup code here (if required)\\n    }\\n\\n    @After\\n    public void tearDown() {\\n        // Teardown code here (if required)\\n    }\\n\\n    @Test\\n    public void testDefaultCase() {\\n        assertEquals(0, Student.getNumStudents());\\n\\n        Student s1 = new Student(111, \\\"a\\\", \\\"a\\\", 1, 1, 2001);\\n        assertEquals(1, Student.getNumStudents());\\n\\n        Student s2 = new Student(222, \\\"b\\\", \\\"b\\\", 2, 2, 2002);\\n        assertEquals(2, Student.getNumStudents());\\n\\n        Student s3 = new Student(333, \\\"c\\\", \\\"c\\\", 3, 3, 2003);\\n        assertEquals(3, Student.getNumStudents());\\n    }\\n}\\n\\n\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"public class Main {\\n\\n    public static void main(String[] args) {\\n        // Here we make an array of size 10 Student object REFERENCES\\n        Student[] students = new Student[10];\\n\\t\\t\\n\\t\\t// Here's one way we can make a new Student object and save it DIRECTLY\\n\\t\\t// into the appropriate index of the students array...\\n\\t\\t// The right side of the assignment has \\\"new Student(....)\\n\\t\\t// That results in a reference variable which points to a NEW Student object\\n\\t\\t// We then save that reference into students[0]\\n\\t\\tstudents[Student.getNumStudents()] = new Student(111, \\\"Bruce\\\", \\\"Banner\\\", 12, 18, 1969);\\n\\t\\t// NOTE:\\n\\t\\t// - this reference variable did get saved at index ZERO...but how did that happen?\\n\\t\\t// - we did *not* hardcode the 0 as the index\\n\\t\\t// - instead, we used the STATIC getNumStudents() method to access the\\n\\t\\t//   STATIC numStudents variable.\\n\\t\\t// - do note that AFTER this statement finishes, numStudents will equal 1\\n\\t\\t// - Now, since we JUST NOW made a new Student, numStudents will equal 1.\\n\\t\\t// - Thus, we save this new Student object into index:\\n\\t\\t//   [Student.getNumStudents() - 1]  ...which equates to\\n\\t\\t//   [1 - 1] ... which is zero, precisely the index we want to save it.\\n\\t\\t\\n\\t\\t// Now let's make another Student object and save it just slightly differently\\n\\t\\tStudent temp = new Student(222, \\\"Natasha\\\", \\\"Romanoff \\\", 11, 22, 1984);\\n\\t\\tstudents[Student.getNumStudents() - 1] = temp;\\n\\t\\t// The right side of the assignment has \\\"new Student(....)\\n\\t\\t// That results in a reference variable which points to a NEW Student object\\n\\t\\t// We then save that reference into the variable \\\"temp\\\"\\n\\t\\t// Finally, the reference, which is saved in \\\"temp\\\", is then saved into \\n\\t\\t// students[Student.getNumStudents() - 1] = temp;\\n\\t\\t// NOTE:\\n\\t\\t// - this is the 2nd student being added, which means it should go at index 1.\\n\\t\\t// - since two students have been CONSTRUCTED, the static variable numStudents equals 2\\n\\t\\t// - this we save it at index getNumStudents() - 1 for this particular way of adding a student\\n\\t\\t// - once again, that is because we made the FULLY made the student on line 26 above\\n\\t\\t// - thus numStudents is 2, and we need to save at index 1...so we save at index getNumStudents() - 1\\n\\t\\t\\n\\t\\t// Finally, here is one more Student being created\\n\\t\\tstudents[Student.getNumStudents()] = new Student(333, \\\"Peter\\\", \\\"Parker\\\", 8, 10, 2001);\\n\\t\\t// NOTE:\\n\\t\\t// - this is the 3rd student and got saved into index 2.\\n\\t\\t\\n        // Now, let's print each of these Student objects using the overridden toString() method\\n\\t\\tfor (int i = 0; i \\u003c Student.getNumStudents(); i++) {\\n\\t\\t\\tSystem.out.println(students[i]);\\n\\t\\t}\\n    }\\n}\\n\",\"defaultFilePath\":\"\",\"defaultFileType\":\"\",\"extraFiles\":{\"QmlydGhEYXRlLmphdmE=\":{\"contents\":\"public class BirthDate {\\n\\tprivate int birthMonth;\\n\\tprivate int birthDay;\\n\\tprivate int birthYear;\\n\\n\\tpublic BirthDate(int birthMonth, int birthDay, int birthYear) {\\n\\t\\tthis.birthMonth = birthMonth;\\n\\t\\tthis.birthDay = birthDay;\\n\\t\\tthis.birthYear = birthYear;\\n\\t}\\n\\n\\tpublic int getBirthYear() {\\n\\t\\treturn birthYear;\\n\\t}\\n\\n\\tpublic void setBirthYear(int birthYear) {\\n\\t\\tthis.birthYear = birthYear;\\n\\t}\\n\\n\\tpublic int getBirthMonth() {\\n\\t\\treturn birthMonth;\\n\\t}\\n\\n\\tpublic void setBirthMonth(int birthMonth) {\\n\\t\\tthis.birthMonth = birthMonth;\\n\\t}\\n\\n\\tpublic int getBirthDay() {\\n\\t\\treturn birthDay;\\n\\t}\\n\\n\\tpublic void setBirthDay(int birthDay) {\\n\\t\\tthis.birthDay = birthDay;\\n\\t}\\n\\t\\n\\t@Override\\n\\tpublic String toString() {\\n\\t\\treturn String.format(\\\"%d/%d/%d\\\", birthMonth, birthDay, birthYear);\\n\\t}\\n}\\n\",\"language\":\"java\",\"type\":\"\"},\"U3R1ZGVudC5qYXZh\":{\"contents\":\"\\npublic class Student {\\n\\n\\t// Data Members\\n\\tprivate int ID;\\n\\tprivate String firstName;\\n\\tprivate String lastName;\\n\\tprivate BirthDate bd;\\n\\tprivate static int numStudents = 0;\\n\\n\\t// Constructor\\n\\tpublic Student(int ID, String firstName, String lastName, int birthMonth, int birthDay, int birthYear) {\\n\\t\\tthis.ID = ID;\\n\\t\\tthis.firstName = firstName;\\n\\t\\tthis.lastName = lastName;\\n\\n\\t\\t// Make a NEW BirthDate object and send over birthMonth, birthDay, and birthYear as parameters in the constructor\\n\\t\\tthis.bd = new BirthDate(birthMonth, birthDay, birthYear);\\n\\n\\t\\t// Increment the static numStudents\\n\\t\\tnumStudents++;\\n\\t}\\n\\n\\t// Accessor \\u0026 Mutator Methods\\n\\tpublic int getID() {\\n\\t\\treturn ID;\\n\\t}\\n\\n\\tpublic void setID(int ID) {\\n\\t\\tthis.ID = ID;\\n\\t}\\n\\n\\tpublic String getFirstName() {\\n\\t\\treturn firstName;\\n\\t}\\n\\n\\tpublic void setFirstName(String firstName) {\\n\\t\\tthis.firstName = firstName;\\n\\t}\\n\\n\\tpublic String getLastName() {\\n\\t\\treturn lastName;\\n\\t}\\n\\n\\tpublic void setLastName(String lastName) {\\n\\t\\tthis.lastName = lastName;\\n\\t}\\n\\n\\tpublic BirthDate getBd() {\\n\\t\\treturn bd;\\n\\t}\\n\\n\\tpublic void setBd(BirthDate bd) {\\n\\t\\tthis.bd = bd;\\n\\t}\\n\\n\\tpublic static int getNumStudents() {\\n\\t\\treturn numStudents;\\n\\t}\\n\\n\\tpublic static void setNumStudents(int aNumStudents) {\\n\\t\\tnumStudents = aNumStudents;\\n\\t}\\n\\t\\n\\t@Override\\n\\tpublic String toString() {\\n\\t\\tString s = \\\"\\\";\\n\\t\\t\\n\\t\\ts += \\\"Student Information:\\\\n\\\";\\n\\t\\ts += String.format(\\\"Student ID: %d\\\\n\\\", ID);\\n\\t\\ts += String.format(\\\"First Name: %s\\\\n\\\", firstName);\\n\\t\\ts += String.format(\\\"Last Name: %s\\\\n\\\", lastName);\\n\\t\\ts += String.format(\\\"Birth Date: %s\\\\n\\\", getBd());\\n\\n\\t\\treturn s;\\n\\t}\\n\\n}\\n\",\"language\":\"java\",\"type\":\"\"}}}},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"public class Main {\\n\\n    public static void main(String[] args) {\\n        // Prints \\\"Hello, World\\\" to the terminal window.\\n        System.out.println(\\\"Hello, World\\\");\\n    }\\n\\n}\\n\"],\"t\":1616731590000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 28743,
    "title": "Lab08_Problem08: Inheritance Example 1",
    "prompt_md": "## IMPORTANT: Read the instructions carefully, so as to not miss any steps.\n\nYou will code five total classes (which includes the Main Demo class) for this problem:\n\n1.  Main.java\n2.  Person.java\n3.  Address.java\n4.  Student.java\n5.  Employee.java\n\nIMPORTANT NOTE: remember that you must type the data members in the EXACT order that they are shown below.\n\n### Address.java\n\n*   Has five data members: String address1, String address2, String city, String state, String zip\n*   Has one constructor that takes in all five parameters and assigns them accordingly\n*   Has a second no-arg constructor with no lines of code inside it\n*   Has a toString() method that returns a String EXACTLY like the sample below\n\n### Person.java\n\n*   Has five data members: String firstName, String lastName, Address a, String email, String phone\n*   Has one constructor that takes in NINE parameters and assigns them accordingly (4 assign to local data members, while the other five are sent to the constructor of the Address object)\n*   Has a second no-arg constructor with no lines of code inside it\n*   Has a toString() method that returns a String EXACTLY like the sample below\n\n### Student.java\n\n*   This class extends Person.\n*   Has three data members: int ID, int hoursEarned, double gpa\n*   Has one constructor that receives TWELVE parameters and assigns them (3 assign to local data members, while the other nine are sent to the super constructor)\n*   Has a second no-arg constructor with no lines of code inside it\n*   Has a toString() method that returns a String EXACTLY like the sample below\n\n### Employee.java\n\n*   This class extends Person.\n*   Has three data members: int ID, String title, double salary\n*   Has one constructor that receives TWELVE parameters and assigns them (3 assign to local data members, while the other nine are sent to the super constructor)\n*   Has a second no-arg constructor with no lines of code inside it\n*   Has a toString() method that returns a String EXACTLY like the sample below\n\n### Main.java\n\n*   This is your main program, which contains a main() method and other methods as described below:\n\n1.  The main method()\n    *   This method can be empty or you can use it for testing\n2.  A method called **makeStudents()**\n    *   Parameters: none\n    *   Returns: an ArrayList of Students\n    *   Description: this method will make an ArrayList of Student objects, and you will add three new Students to this ArrayList\n    *   You should make an ArrayList of Student objects as follows:\n    *   ArrayList\\<Student> **students** = new ArrayList\\<>();\n    *   To the **students** ArrayList, you should add 3 Students using the EXACT information shown at the bottom of this problem description\n    *   You can do this either by making three individual Student objects, each on one line of code and then adding each to the students ArrayList, OR you can simply create a new Student object directly inside the .add() method of the students ArrayList.\n    *   Finally, you should return “**students**”, which means the return type in the method header should be “ArrayList\\<Student>”\n3.  A method called **makeEmployees()**\n    *   Parameters: none\n    *   Returns: an ArrayList of Employees\n    *   Description: this method will make an ArrayList of Employee objects, and you will add three new Employees to this ArrayList\n    *   You should make an ArrayList of Employee objects as follows:\n    *   ArrayList\\<Employee> **employees** \\= new Employee\\<>();\n    *   To the **employees** ArrayList, you should add 3 Employees using the EXACT information shown at the bottom of this problem description\n    *   You can do this either by making three individual Employee objects, each on one line of code and then adding each to the **employees** ArrayList, OR you can simply create a new Employee object directly inside the .add() method of the **employees** ArrayList.\n    *   Finally, you should return “**employees**”, which means the return type in the method header should be “ArrayList\\<Employee>”\n4.  A method called **polymorphismTest(Person p)**\n    *   Parameters: a reference to a Person object\n    *   Returns: a String\n    *   Description: the sole purpose of this method is to practice polymorphism, which, once more, is the idea that we can send a sub-type to any reference that is expecting a super-type.\n    *   This method is expecting a reference to a Person.\n    *   This means we can send a reference to a Person, or a reference to an sub-type that extends Person, which, in this example, would be Student and Employee.\n    *   This method should return a String. What String should be returned?\n    *   If p is an instance of Student, the String “Student” should be returned.\n    *   If p is an instance of Employee, the String “Employee” should be returned.\n    *   Otherwise, the String “Person” should be returned.\n5.  A method called **dynamicBindingTest(Person p)**\n    *   Parameters: a reference to a Person object\n    *   Returns: a String\n    *   Description: the sole purpose of this method is to practice polymorphism AND dynamic binding, which, once more, is the idea that we can send a sub-type to any reference that is expecting a super-type. And then, if an instance method is called on the object being sent, the JVM will dynamically bind the appropriate invocation of the given method at runtime.\n    *   This method is expecting a reference to a Person.\n    *   This means we can send a reference to a Person, or a reference to an sub-type that extends Person, which, in this example, would be Student and Employee.\n    *   This method really only has one line of code inside it.\n    *   The one line of code should simply return the toString() of the given object:\n    *   `return p.toString();`\n6.  If you like, and within the main() method, you can make individual objects of type Person, Student, and Employee, which you can then send to the polymorphismTest() method to confirm that it works as expected.\n\n### Address toString():\n\nAssume we made an Address object as follows:\n\n```plaintext\nAddress a = new Address(\"111 Lake Hollingsworth Dr\", \"Suite 101\", \"Lakeland\", \"FL\", \"33801\");\nSystem.out.println(a);\n```\n\nThat should result in the following output:\n\n```plaintext\nAddress:    111 Lake Hollingsworth Dr\n            Suite 101\n            Lakeland, FL 33801\n```\n\n### Person toString():\n\nAssume we made a Person object as follows (notice the empty String parameter, “”, for address line 2):\n\n```plaintext\nPerson p = new Person(\"Anne\", \"Kerr\",\"111 Lake Hollingsworth Dr\", \"\", \"Lakeland\", \"FL\", \"33801\", \"akerr@flsouthern.edu\", \"863.680.4100\");\nSystem.out.println(p);\n```\n\nThat should result in the following output:\n\n```plaintext\nFirst Name: Anne\nLast Name:  Kerr\nAddress:    111 Lake Hollingsworth Dr\n            Lakeland, FL 33801\nEmail:      akerr@flsouthern.edu\nPhone:      863.680.4100\n```\n\n### Student toString():\n\nAssume we made a Student object as follows:\n\n```plaintext\nStudent s = new Student(111, 124, 3.8, \"Jonathan\", \"Cazalas\",\"111 Lake Hollingsworth Dr\", \"Berry Citrus 303\", \"Lakeland\", \"FL\", \"33801\", \"jcazalas@flsouthern.edu\", \"863.680.6283\");\nSystem.out.println(s);\n```\n\nThat should result in the following output:\n\n```plaintext\nStudent Information\nID:         111\nFirst Name: Jonathan\nLast Name:  Cazalas\nAddress:    111 Lake Hollingsworth Dr\n            Berry Citrus 303\n            Lakeland, FL 33801\nEmail:      jcazalas@flsouthern.edu\nPhone:      863.680.6283\nHours:      124\nGPA:        3.80\n```\n\n### Employee toString():\n\nAssume we made an Employee object as follows:\n\n```plaintext\nEmployee e = new Employee(888, \"The Roberson\", 1000000, \"Christian\", \"Roberson\", \"111 Lake Hollingsworth Dr\", \"Berry Citrus 305\", \"Lakeland\", \"FL\", \"33801\", \"croberson@flsouthern.edu\", \"863-680-5058\");\nSystem.out.println(e);\n```\n\nThat should result in the following output:\n\n```plaintext\nEmployee Information\nID:         888\nFirst Name: Christian\nLast Name:  Roberson\nAddress:    111 Lake Hollingsworth Dr\n            Berry Citrus 305\n            Lakeland, FL 33801\nEmail:      croberson@flsouthern.edu\nPhone:      863-680-5058\nTitle:      The Roberson\nSalary:     $1000000.00\n```\n\n### Information for the three students to be added to the students ArrayList:\n\nYou will add THREE Student objects to the students ArrayList. First add Student #1, then Student #2, and then Student #3. You should use the EXACT information below within the constructor for the three respective Student objects. To avoid spelling errors, you should copy/paste the information into the respective constructors.\n\n```plaintext\nStudent # 1\nID: 111\nHours: 84\nGPA: 4.00\nFirst Name: Natalia\nLast Name: Romanova\nAddress:\n111 Lake Hollingsworth Dr\nApt. 2794\nLakeland, FL 33801\nEmail: blackwidow@avengers.com\nPhone: 678-136-7092\n\n\nStudent # 2\nID: 222\nHours: 4\nGPA: 2.00\nFirst Name: Tony\nLast Name: Stark\nAddress:\n111 Lake Hollingsworth Dr\nApt. 2431\nLakeland, FL 33801\nEmail: ironman@avengers.com\nPhone: 678-136-7092\n\n\nStudent # 3\nID: 333\nHours: 48\nGPA: 2.70\nFirst Name: Thor\nLast Name: Odinson\nAddress:\n111 Lake Hollingsworth Dr\nApt. 8728\nLakeland, FL 33801\nEmail: godofthunder@avengers.com\nPhone: 678-136-7092\n```\n\n### Information for the three employees to be added to the employees ArrayList:\n\nYou will add THREE Employee objects to the employees ArrayList. First add Employee #1, then Employee #2, and then Employee #3. You should use the EXACT information below within the constructor for the three respective Employee objects. To avoid spelling errors, you should copy/paste the information into the respective constructors.\n\n```plaintext\nEmployee # 1\nID: 777\nTitle: Captain\nSalary: $100000.00\nFirst Name: Steve\nLast Name: Rogers\nAddress:\n111 Lake Hollingsworth Dr\nSuite 104\nLakeland, FL 33801\nEmail: cap@avengers.com\nPhone: 678-136-7092\n\n\nEmployee # 2\nID: 888\nTitle: Smasher\nSalary: $100000.00\nFirst Name: Bruce\nLast Name: Banner\nAddress:\n111 Lake Hollingsworth Dr\nLakeland, FL 33801\nEmail:thehulk@avengers.com\nPhone: 678-136-7092\n\n\nEmployee # 3\nID: 999\nTitle: Sorcerer Supreme\nSalary: $1000000.00\nFirst Name: Stephen\nLast Name: Strange\nAddress:\n111 Lake Hollingsworth Dr\nSuite 102\nLakeland, FL 33801\nEmail: drstrange@avengers.com\nPhone: 678-136-7092\n```",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"public class Main {\\n\\n    public static void main(String[] args) {\\n        \\n        \\n\\n    }\\n\\n}\\n\",\"defaultFilePath\":\"Main.java\",\"defaultFileType\":\"text/plain\",\"defaultFileSyntaxLanguage\":\"java\",\"runType\":\"file\",\"extraFiles\":{\"QWRkcmVzcy5qYXZh\":{\"contents\":\"\",\"language\":\"java\",\"type\":\"text/plain\"},\"RW1wbG95ZWUuamF2YQ==\":{\"contents\":\"\",\"language\":\"java\",\"type\":\"text/plain\"},\"U3R1ZGVudC5qYXZh\":{\"contents\":\"\",\"language\":\"java\",\"type\":\"text/plain\"},\"UGVyc29uLmphdmE=\":{\"contents\":\"\",\"language\":\"java\",\"type\":\"text/plain\"}}}},\"grading\":{\"testCases\":[{\"type\":\"unit_test\",\"title\":\"dynamicBindingTest\",\"headline\":\"\",\"points\":20,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\nimport java.util.*;\\n\\npublic class CodingRoomsUnitTests {\\n    @Before\\n    public void setUp() {\\n        // Setup code here (if required)\\n    }\\n\\n    @After\\n    public void tearDown() {\\n        // Teardown code here (if required)\\n    }\\n\\n    @Test\\n    public void testDefaultCase() {\\n        Main m = new Main();\\n        String result;\\n\\n        Person p = new Person(\\\"Anne\\\", \\\"Kerr\\\",\\\"111 Lake Hollingsworth Dr\\\", \\\"\\\", \\\"Lakeland\\\", \\\"FL\\\", \\\"33801\\\", \\\"akerr@flsouthern.edu\\\", \\\"863.680.4100\\\");\\n        result = \\\"First Name: Anne\\\\nLast Name:  Kerr\\\\nAddress:    111 Lake Hollingsworth Dr\\\\n            Lakeland, FL 33801\\\\nEmail:      akerr@flsouthern.edu\\\\nPhone:      863.680.4100\\\\n\\\";\\n        assertEquals(result, m.dynamicBindingTest(p));\\n\\n        Student s = new Student(111, 124, 3.8, \\\"Jonathan\\\", \\\"Cazalas\\\",\\\"111 Lake Hollingsworth Dr\\\", \\\"Berry Citrus 303\\\", \\\"Lakeland\\\", \\\"FL\\\", \\\"33801\\\", \\\"jcazalas@flsouthern.edu\\\", \\\"863.680.6283\\\");\\n        result = \\\"Student Information\\\\nID:         111\\\\nFirst Name: Jonathan\\\\nLast Name:  Cazalas\\\\nAddress:    111 Lake Hollingsworth Dr\\\\n            Berry Citrus 303\\\\n            Lakeland, FL 33801\\\\nEmail:      jcazalas@flsouthern.edu\\\\nPhone:      863.680.6283\\\\nHours:      124\\\\nGPA:        3.80\\\\n\\\";\\n        assertEquals(result, m.dynamicBindingTest(s));\\n\\n        Employee e = new Employee(888, \\\"The Roberson\\\", 1000000, \\\"Christian\\\", \\\"Roberson\\\", \\\"111 Lake Hollingsworth Dr\\\", \\\"Berry Citrus 305\\\", \\\"Lakeland\\\", \\\"FL\\\", \\\"33801\\\", \\\"croberson@flsouthern.edu\\\", \\\"863-680-5058\\\");\\n        result = \\\"Employee Information\\\\nID:         888\\\\nFirst Name: Christian\\\\nLast Name:  Roberson\\\\nAddress:    111 Lake Hollingsworth Dr\\\\n            Berry Citrus 305\\\\n            Lakeland, FL 33801\\\\nEmail:      croberson@flsouthern.edu\\\\nPhone:      863-680-5058\\\\nTitle:      The Roberson\\\\nSalary:     $1000000.00\\\\n\\\";\\n        assertEquals(result, m.dynamicBindingTest(e));\\n        \\n    }\\n}\\n\\n\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"This test case is testing the dynamicBindingTest() method.\\n\\n*   several new objects are being created, each of type Person, Student, or Employee\\n*   each object is created by sending appropriate data to the respective constructor\\n*   then dynamicBindingTest() method is invoked and a reference to the given object is sent to that method\\n*   the method should dynamically bind the appropriate toString() method and should return that particular String value\\n*   This test case then compares your returned value to the expected return value.\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"unit_test\",\"title\":\"makeStudents\",\"headline\":\"\",\"points\":30,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n    @Before\\n    public void setUp() {\\n        // Setup code here (if required)\\n    }\\n\\n    @After\\n    public void tearDown() {\\n        // Teardown code here (if required)\\n    }\\n\\n    @Test\\n    public void testDefaultCase() {\\n        Main m = new Main();\\n\\n        String[] result = new String[3];\\n\\n        result[0] = \\\"Student Information\\\\nID:         111\\\\nFirst Name: Natalia\\\\nLast Name:  Romanova\\\\nAddress:    111 Lake Hollingsworth Dr\\\\n            Apt. 2794\\\\n            Lakeland, FL 33801\\\\nEmail:      blackwidow@avengers.com\\\\nPhone:      678-136-7092\\\\nHours:      84\\\\nGPA:        4.00\\\\n\\\";\\n        result[1] = \\\"Student Information\\\\nID:         222\\\\nFirst Name: Tony\\\\nLast Name:  Stark\\\\nAddress:    111 Lake Hollingsworth Dr\\\\n            Apt. 2431\\\\n            Lakeland, FL 33801\\\\nEmail:      ironman@avengers.com\\\\nPhone:      678-136-7092\\\\nHours:      4\\\\nGPA:        2.00\\\\n\\\";\\n        result[2] = \\\"Student Information\\\\nID:         333\\\\nFirst Name: Thor\\\\nLast Name:  Odinson\\\\nAddress:    111 Lake Hollingsworth Dr\\\\n            Apt. 8728\\\\n            Lakeland, FL 33801\\\\nEmail:      godofthunder@avengers.com\\\\nPhone:      678-136-7092\\\\nHours:      48\\\\nGPA:        2.70\\\\n\\\";\\n    \\n        //ArrayList\\u003cStudent\\u003e students = m.makeStudents();\\n\\n        for (int i = 0; i \\u003c m.makeStudents().size(); i++) {\\n            assertEquals(result[i], m.makeStudents().get(i).toString());\\n        }\\n    }\\n}\\n\\n\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"This test case is checking the RETURNED ArrayList of Student objects from the makeStudents() method. If this test case fails, that means you either have a typo, an extra space, or did not make the ArrayList correctly in this method, or did not return it correctly (or something else along these lines).\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"unit_test\",\"title\":\"makeEmployee\",\"headline\":\"\",\"points\":30,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n    @Before\\n    public void setUp() {\\n        // Setup code here (if required)\\n    }\\n\\n    @After\\n    public void tearDown() {\\n        // Teardown code here (if required)\\n    }\\n\\n    @Test\\n    public void testDefaultCase() {\\n        Main m = new Main();\\n\\n        String[] result = new String[3];\\n\\n        result[0] = \\\"Employee Information\\\\nID:         777\\\\nFirst Name: Steve\\\\nLast Name:  Rogers\\\\nAddress:    111 Lake Hollingsworth Dr\\\\n            Suite 104\\\\n            Lakeland, FL 33801\\\\nEmail:      cap@avengers.com\\\\nPhone:      678-136-7092\\\\nTitle:      Captain\\\\nSalary:     $100000.00\\\\n\\\";\\n        result[1] = \\\"Employee Information\\\\nID:         888\\\\nFirst Name: Bruce\\\\nLast Name:  Banner\\\\nAddress:    111 Lake Hollingsworth Dr\\\\n            Lakeland, FL 33801\\\\nEmail:      thehulk@avengers.com\\\\nPhone:      678-136-7092\\\\nTitle:      Smasher\\\\nSalary:     $100000.00\\\\n\\\";\\n        result[2] = \\\"Employee Information\\\\nID:         999\\\\nFirst Name: Stephen\\\\nLast Name:  Strange\\\\nAddress:    111 Lake Hollingsworth Dr\\\\n            Suite 102\\\\n            Lakeland, FL 33801\\\\nEmail:      drstrange@avengers.com\\\\nPhone:      678-136-7092\\\\nTitle:      Sorcerer Supreme\\\\nSalary:     $1000000.00\\\\n\\\";\\n    \\n        //ArrayList\\u003cStudent\\u003e students = m.makeStudents();\\n\\n        for (int i = 0; i \\u003c m.makeEmployees().size(); i++) {\\n            assertEquals(result[i], m.makeEmployees().get(i).toString());\\n        }\\n    }\\n}\\n\\n\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"This test case is checking the RETURNED ArrayList of Employee objects from the makeEmployee() method. If this test case fails, that means you either have a typo, an extra space, or did not make the ArrayList correctly in this method, or did not return it correctly (or something else along these lines).\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"unit_test\",\"title\":\"polymorphismTest\",\"headline\":\"\",\"points\":20,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\nimport java.util.*;\\n\\npublic class CodingRoomsUnitTests {\\n    @Before\\n    public void setUp() {\\n        // Setup code here (if required)\\n    }\\n\\n    @After\\n    public void tearDown() {\\n        // Teardown code here (if required)\\n    }\\n\\n    @Test\\n    public void testDefaultCase() {\\n        Main m = new Main();\\n\\n        Person p = new Person();\\n        assertEquals(\\\"Person\\\", m.polymorphismTest(p));\\n\\n        Student s = new Student();\\n        assertEquals(\\\"Student\\\", m.polymorphismTest(s));\\n\\n        Employee e = new Employee();\\n        assertEquals(\\\"Employee\\\", m.polymorphismTest(e));\\n        \\n    }\\n}\\n\\n\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"This test case is testing the polymorphismTest() method.\\n\\n*   several new objects are being created, each of type Person, Student, or Employee\\n*   each object is created by sending appropriate data to the respective constructor\\n*   then polymorphismTest() method is invoked and a reference to the given object is sent to that method\\n*   the method then returns a String, either “Person”, “Student”, or “Employee”\\n*   That returned String is then compared to the expected returned String.\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":null},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"public class Main {\\n\\n    public static void main(String[] args) {\\n        // Prints \\\"Hello, World\\\" to the terminal window.\\n        System.out.println(\\\"Hello, World\\\");\\n    }\\n\\n}\\n\"],\"t\":1617932962000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  }
]