[
  {
    "id": 16240,
    "title": "Lab04_Problem18: Number Counts",
    "prompt_md": "## Description\n\nWrite a program that generates 100000 random integers between 0 and 9 and displays the count for each number. (Hint: Use an array of\n\nten integers, say counts, to store the counts for the number of 0s, 1s, ..., 9s.)\n\n\\*\\*Note that the problem has already been started for you. Do _not_ change the provided code. If you do, your solution will not work.\n\nIncluded in the code that is already complete is a prompt for the user to enter a seed value for the random number generator. All numbers produced from the random number generator are \"sprouted\" from this seed. Thus, your answers should match those of the provided output even though the numbers are \"randomly\" generated.\n\n## Sample Run of the Program\n\n```plaintext\nEnter the seed value:651\n\nHere are the results:\n\nNumber of 0's: 9698\nNumber of 1's: 9962\nNumber of 2's: 10118\nNumber of 3's: 10121\nNumber of 4's: 9873\nNumber of 5's: 10100\nNumber of 6's: 10211\nNumber of 7's: 10068\nNumber of 8's: 10036\nNumber of 9's: 9813\n```\n\n## Another Sample Run of the Program\n\n```plaintext\nEnter the seed value: 7\n\nHere are the results:\n\nNumber of 0's: 10148\nNumber of 1's: 9863\nNumber of 2's: 10052\nNumber of 3's: 10091\nNumber of 4's: 9956\nNumber of 5's: 9985\nNumber of 6's: 9970\nNumber of 7's: 10035\nNumber of 8's: 9973\nNumber of 9's: 9927\n```",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"import java.util.*;\\n\\nclass Main {\\n  public static void main(String[] args) {\\n    Scanner in = new Scanner(System.in);\\n\\tSystem.out.print(\\\"Enter the seed value: \\\"); // Here you ENTER the seed value, such as 651 from the sample\\n\\tRandom rng = new Random(in.nextInt());\\n\\t\\n\\t// Do ***NOT*** change the code above.\\n\\t\\n\\t// YOUR CODE SHOULD GO BELOW.\\n\\t\\n\\t// Note: to get a random number between 0 and 9, you can type the following: rng.nextInt(10)\\n\\t// You can test that with the line below...Just make sure to DELETE this line below before submitting:\\n\\tSystem.out.println(rng.nextInt(10));\\n\\t\\n  }\\n}\",\"defaultFilePath\":\"Main.java\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"stdout\",\"title\":\"TC3\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"Enter the seed value: \\n\\nHere are the results:\\n\\nNumber of 0's: 9943\\nNumber of 1's: 9992\\nNumber of 2's: 9918\\nNumber of 3's: 9977\\nNumber of 4's: 10024\\nNumber of 5's: 10067\\nNumber of 6's: 10137\\nNumber of 7's: 9933\\nNumber of 8's: 9957\\nNumber of 9's: 10052\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"7777777\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"TC2\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"Enter the seed value: \\n\\nHere are the results:\\n\\nNumber of 0's: 10019\\nNumber of 1's: 10031\\nNumber of 2's: 9884\\nNumber of 3's: 9971\\nNumber of 4's: 9995\\nNumber of 5's: 10042\\nNumber of 6's: 9967\\nNumber of 7's: 10088\\nNumber of 8's: 10038\\nNumber of 9's: 9965\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"2651\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"stdout\",\"title\":\"TC1\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"\",\"unitTestCode\":\"\",\"unitTestFilePath\":\"\",\"feedbackOnFailure\":\"\",\"stdout\":\"Enter the seed value: \\n\\nHere are the results:\\n\\nNumber of 0's: 9981\\nNumber of 1's: 10004\\nNumber of 2's: 10043\\nNumber of 3's: 9943\\nNumber of 4's: 10030\\nNumber of 5's: 9918\\nNumber of 6's: 10034\\nNumber of 7's: 10089\\nNumber of 8's: 9949\\nNumber of 9's: 10009\",\"stdoutCompareMethod\":\"equals_flexible\",\"stdin\":\"1\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"import java.util.*;\\n\\nclass Main {\\n  public static void main(String[] args) {\\n    Scanner in = new Scanner(System.in);\\n\\tSystem.out.print(\\\"Enter the seed value: \\\"); // Here you ENTER the seed value, such as 651 from the sample\\n\\tRandom rng = new Random(in.nextInt());\\n\\t\\n\\t// Do ***NOT*** change the code above.\\n\\t\\n\\t// YOUR CODE SHOULD GO BELOW.\\n\\t\\n\\t// Note: to get a random number between 0 and 9, you can type the following: rng.nextInt(10)\\n\\t// You can test that with the line below...Just make sure to DELETE this line below before submitting:\\n\\t\\n\\t// Make array of counts:\\n\\t// We use this array to store the \\\"counts\\\" of each integer from 0 to 9.\\n\\t// So, for example, if 14 6's were randomly generated, at the end of this\\n\\t// program, the number 14 should be found at index 6.\\n\\tint[] counts = new int[10];\\n\\t\\n\\t// Generate 100 numbers between 0 and 9 (inclusive)\\n\\tint randomNumber;\\n\\t\\n\\tfor (int i = 0; i \\u003c 100000; i++) {\\n\\t\\trandomNumber = rng.nextInt(10);\\n\\t\\tcounts[randomNumber]++;\\n\\t}\\n\\t\\n\\t// Output the result\\n\\tSystem.out.println(\\\"\\\\nHere are the results:\\\\n\\\");\\n\\t\\n\\tfor (int i = 0; i \\u003c 10; i++) {\\n\\t\\tSystem.out.printf(\\\"Number of %d's: %d\\\\n\\\", i, counts[i]);\\n\\t}\\n\\t\\n  }\\n}\",\"defaultFilePath\":\"Main.java\",\"extraFiles\":{}}},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"import java.util.*;\\n\\nclass Main {\\n  public static void main(String[] args) {\\n    Scanner in = new Scanner(System.in);\\n\\tSystem.out.print(\\\"Enter the seed value: \\\"); // Here you ENTER the seed value, such as 651 from the sample\\n\\tRandom rng = new Random(in.nextInt());\\n\\t\\n\\t// Do ***NOT*** change the code above.\\n\\t\\n\\t// YOUR CODE SHOULD GO BELOW.\\n\\t\\n\\t// Note: to get a random number between 0 and 9, you can type the following: rng.nextInt(10)\\n\\t// You can test that with the line below...Just make sure to DELETE this line below before submitting:\\n\\tSystem.out.println(rng.nextInt(10));\\n\\t\\n  }\\n}\"],\"t\":1614276087000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
  {
    "id": 16241,
    "title": "Lab03_Problem24: Password Checker",
    "prompt_md": "\n# Description:\n\nWrite a method that checks whether a string is a valid password. Suppose the password rules are as follows:\n\n* A password must have at least eight characters.\n* A password consists of only letters and digits.\n* A password must contain at least two digits.\n\n\n\nIf a password is not valid, an appropriate message should be returned from the method (see Samples below). If the password is valid, a message should also be returned (again, see Samples below).\n\n\n\n**Note that the rules should be applied in the above order. Thus, if a password has only one digit, has illegal characters, and only has a total of 6 characters, the message returned from the method will be\n\n```\n`\"The entered password is less than 8 characters.\"`\n```\n\n\n\nSo although the other rules were also invalid, the returned message is based on the first rule to be marked invalid. In this case, the very first rule failed (password length). As such, the other two checks were not performed.\n\n\n\n\n\n**Method Name:**\n\n```\ncheckPassword\n```\n\n\n\n**Parameter(s):**\n\n```\nString password\n```\n\n\n\n**Return Type:**\n\n```\nString message, the message returned from your method\n```\n\n\n\n**Samples:**\n\n```\ncheckPassword(\"1234\")  ---> returns \"The entered password is less than 8 characters.\"\ncheckPassword(\"!@#$%^&*\")  ---> returns \"The entered password contains illegal characters.\"\ncheckPassword(\"asdfasdf\")  ---> returns \"The entered password contains less than two digits.\"\ncheckPassword(\"1234asdf\")  ---> returns \"The entered password is a valid password.\"\n```\n\n\n\n\n\n\n\n",
    "question_type": "single_file_code",
    "single_file_code_data": "{\"common\":{\"template\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main {\\n  // Write your method(s) below:\\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  public static void main(String[] args) {\\n    System.out.println(checkPassword(\\\"1234\\\"));\\n    System.out.println(checkPassword(\\\"!@#$%^\\u0026*\\\"));\\n    System.out.println(checkPassword(\\\"asdfasdf\\\"));\\n    System.out.println(checkPassword(\\\"1234asdf\\\"));\\n  }\\n}\",\"defaultFilePath\":\"Main.java\",\"extraFiles\":{}}},\"grading\":{\"testCases\":[{\"type\":\"unit_test\",\"title\":\"testName\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void testName() {\\n    Main m = new Main();\\n    assertEquals(m.checkPassword(\\\"1234\\\"), \\\"The entered password is less than 8 characters.\\\");\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"Main.java\",\"argStr\":\"\"},{\"type\":\"unit_test\",\"title\":\"tc2\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void testName() {\\n    Main m = new Main();\\n    assertEquals(m.checkPassword(\\\"!@#$%^\\u0026*\\\"), \\\"The entered password contains illegal characters.\\\");\\n\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"unit_test\",\"title\":\"tc3\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void testName() {\\n    Main m = new Main();\\n    assertEquals(m.checkPassword(\\\"123ad*#a\\\"), \\\"The entered password contains illegal characters.\\\");\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"unit_test\",\"title\":\"tc4\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void testName() {\\n    Main m = new Main();\\n    assertEquals(m.checkPassword(\\\"asdfasdf\\\"), \\\"The entered password contains less than two digits.\\\");\\n\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"unit_test\",\"title\":\"tc5\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void testName() {\\n    Main m = new Main();\\n    assertEquals(m.checkPassword(\\\"2sdfasdf\\\"), \\\"The entered password contains less than two digits.\\\");\\n\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"unit_test\",\"title\":\"tc6\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void testName() {\\n    Main m = new Main();\\n    assertEquals(m.checkPassword(\\\"1234asdf\\\"), \\\"The entered password is a valid password.\\\");\\n\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"unit_test\",\"title\":\"tc7\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void testName() {\\n    Main m = new Main();\\n    assertEquals(m.checkPassword(\\\"12testing\\\"), \\\"The entered password is a valid password.\\\");\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"\",\"argStr\":\"\"},{\"type\":\"unit_test\",\"title\":\"tc8\",\"headline\":\"\",\"points\":100,\"unitTestFlavor\":\"junit4\",\"unitTestCode\":\"import org.junit.Before;\\nimport org.junit.After;\\nimport org.junit.Test;\\nimport static org.junit.Assert.*;\\n\\npublic class CodingRoomsUnitTests {\\n\\n  @Test\\n  public void testName() {\\n    Main m = new Main();\\n    assertEquals(m.checkPassword(\\\"testing12\\\"), \\\"The entered password is a valid password.\\\");\\n  }\\n\\n}\",\"unitTestFilePath\":\"CodingRoomsUnitTests.java\",\"feedbackOnFailure\":\"\",\"stdout\":\"\",\"stdoutCompareMethod\":\"\",\"stdin\":\"\",\"sourceFile\":\"\",\"argStr\":\"\"}],\"testCaseResults\":null,\"modelSolution\":{\"primaryCodeLanguage\":\"java\",\"defaultFileContents\":\"class Main {\\n  // Write your method(s) below:\\n  public static String checkPassword(String pw) {\\n\\t\\tint numLetters = 0, numDigits = 0;\\n\\t\\tString message;\\n\\n\\t\\t// IF the length is less than 8, it's not valid!\\n\\t\\tif (pw.length() \\u003c 8) {\\n\\t\\t\\tmessage = \\\"The entered password is less than 8 characters.\\\";\\n\\t\\t\\treturn message;\\n\\t\\t}\\n\\t\\t// ELSE, so okay, the length is fine...let's keep digging\\n\\t\\telse {\\n\\t\\t\\t// Count the number of digits and letters in the password\\n\\t\\t\\tfor (int i = 0; i \\u003c pw.length(); i++) {\\n\\t\\t\\t\\tif (Character.isDigit(pw.charAt(i))) {\\n\\t\\t\\t\\t\\tnumDigits++;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (Character.isLetter(pw.charAt(i))) {\\n\\t\\t\\t\\t\\tnumLetters++;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Remember, the pw can ONLY contain letters and digits\\n\\t\\t\\t// IF the letters and digits don't add up to the length, then we have a problem...\\n\\t\\t\\tif (numLetters + numDigits != pw.length()) {\\n\\t\\t\\t\\tmessage = \\\"The entered password contains illegal characters.\\\";\\n\\t\\t\\t\\treturn message;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// IF the digits are less than 2, we have a problem...\\n\\t\\t\\telse if (numDigits \\u003c 2) {\\n\\t\\t\\t\\tmessage = \\\"The entered password contains less than two digits.\\\";\\n\\t\\t\\t\\treturn message;\\n\\t\\t\\t}\\n\\t\\t\\telse {\\n\\t\\t\\t\\tmessage = \\\"The entered password is a valid password.\\\";\\n\\t\\t\\t\\treturn message;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n  \\n  public static void main(String[] args) {\\n    System.out.println(checkPassword(\\\"1234\\\"));\\n    System.out.println(checkPassword(\\\"!@#$%^\\u0026*\\\"));\\n    System.out.println(checkPassword(\\\"asdfasdf\\\"));\\n    System.out.println(checkPassword(\\\"1234asdf\\\"));\\n  }\\n}\",\"defaultFilePath\":\"Main.java\",\"extraFiles\":{}}},\"response\":{\"_codeFirepad\":{\"_defaultFilePath\":\"Main.java\",\"files\":{},\"history\":{\"A0\":{\"a\":\"1\",\"o\":[\"class Main {\\n  // Write your method(s) below:\\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  public static void main(String[] args) {\\n    System.out.println(checkPassword(\\\"1234\\\"));\\n    System.out.println(checkPassword(\\\"!@#$%^\\u0026*\\\"));\\n    System.out.println(checkPassword(\\\"asdfasdf\\\"));\\n    System.out.println(checkPassword(\\\"1234asdf\\\"));\\n  }\\n}\"],\"t\":1613420144000}},\"users\":{\"1\":{\"color\":\"#80ff95\",\"name\":\"Exam Admin\"}}}}}"
  },
]
